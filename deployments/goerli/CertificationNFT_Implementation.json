{
  "address": "0xfBA0De7536A616c53B38028db6F12Dd3ff5782ac",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "oldURI",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "newURI",
          "type": "string"
        }
      ],
      "name": "BaseURIChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "certificationId",
          "type": "uint256"
        }
      ],
      "name": "CertificaitonNFTBurned",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "certificationId",
          "type": "uint256"
        }
      ],
      "name": "CertificationNFTMinted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        }
      ],
      "name": "intialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_certificationId",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_uri",
          "type": "string"
        }
      ],
      "name": "setBaseURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "userMinted",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x5fb66f91f2b97ab0064b374285ac0b027dc57ffaed5daf4e51066fe2ae5d14e0",
  "receipt": {
    "to": null,
    "from": "0x32eB34d060c12aD0491d260c436d30e5fB13a8Cd",
    "contractAddress": "0xfBA0De7536A616c53B38028db6F12Dd3ff5782ac",
    "transactionIndex": 80,
    "gasUsed": "2973533",
    "logsBloom": "0x
    "blockHash": "0x50b41ebf84ebd6c9f6edd67f303ea2438f8fb9daab9ac27dfc92a3e775c89a52",
    "transactionHash": "0x5fb66f91f2b97ab0064b374285ac0b027dc57ffaed5daf4e51066fe2ae5d14e0",
    "logs": [],
    "blockNumber": 7745448,
    "cumulativeGasUsed": "20336189",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "e00da16aa8bea2b2ac579733d06e0b0b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"oldURI\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newURI\",\"type\":\"string\"}],\"name\":\"BaseURIChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"certificationId\",\"type\":\"uint256\"}],\"name\":\"CertificaitonNFTBurned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"certificationId\",\"type\":\"uint256\"}],\"name\":\"CertificationNFTMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"intialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_certificationId\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userMinted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Eric Lee\",\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"Certification NFT for Blockchain Academy\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"This contract is used to mint NFTs for Blockchain Academy Certification.         Certification is the top level NFT for Blockchain Academy.         It is minted for those who:         - Complete all BuidlCamp courses and exercises         - Finish certain courses combination & pass certain tests         - To be extended...         Certification NFT is a ERC721 token.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/badge/CertificationNFT.sol\":\"CertificationNFT\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0-rc.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initialized`\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initializing`\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0xf2efdd01f01f127e8b631675a359cd8cabfbcdcd2e8587ecf906181bcd667bc9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0-rc.1) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xabed77589961adbaaa36817e0914bcbe4c447311c9451bf3fc9b073c1f092d8d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"contracts/badge/CertificationNFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"../base/ERC721Upgradeable.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\n/**\\n * @title Certification NFT for Blockchain Academy\\n * @author Eric Lee\\n *\\n * @notice This contract is used to mint NFTs for Blockchain Academy Certification.\\n *\\n *         Certification is the top level NFT for Blockchain Academy.\\n *         It is minted for those who:\\n *         - Complete all BuidlCamp courses and exercises\\n *         - Finish certain courses combination & pass certain tests\\n *         - To be extended...\\n *\\n *         Certification NFT is a ERC721 token.\\n *\\n */\\ncontract CertificationNFT is OwnableUpgradeable, ERC721Upgradeable {\\n    using Strings for uint256;\\n\\n    uint256 counter;\\n\\n    string public baseURI;\\n\\n    // Token id => Certification id\\n    mapping(uint256 => uint256) certificationIds;\\n\\n    // User address => certification id => token id\\n    mapping(address => mapping(uint256 => uint256)) public userMinted;\\n\\n    event BaseURIChanged(string oldURI, string newURI);\\n\\n    event CertificationNFTMinted(\\n        address indexed to,\\n        uint256 indexed tokenId,\\n        uint256 indexed certificationId\\n    );\\n\\n    event CertificaitonNFTBurned(\\n        uint256 indexed tokenId,\\n        uint256 indexed certificationId\\n    );\\n\\n    function initialize(string memory _name, string memory _symbol)\\n        public\\n        initializer\\n    {\\n        __Ownable_init();\\n        __ERC721_init(_name, _symbol);\\n    }\\n\\n    function setBaseURI(string memory _uri) public onlyOwner {\\n        emit BaseURIChanged(_uri, baseURI);\\n        baseURI = _uri;\\n    }\\n\\n    function mint(address _to, uint256 _certificationId)\\n        external\\n        onlyOwner\\n        returns (uint256)\\n    {\\n        require(\\n            userMinted[_to][_certificationId] == 0,\\n            \\\"CertificationNFT: already minted\\\"\\n        );\\n\\n        uint256 tokenId = counter++;\\n\\n        _safeMint(_to, tokenId);\\n\\n        certificationIds[tokenId] = _certificationId;\\n\\n        userMinted[_to][_certificationId] = tokenId;\\n\\n        emit CertificationNFTMinted(_to, tokenId, _certificationId);\\n\\n        return tokenId;\\n    }\\n\\n    function burn(uint256 _tokenId) external {\\n        require(\\n            ownerOf[_tokenId] == msg.sender,\\n            \\\"Only the token owner can burn\\\"\\n        );\\n\\n        _burn(_tokenId);\\n\\n        uint256 certificationId = certificationIds[_tokenId];\\n        delete userMinted[msg.sender][certificationId];\\n\\n        emit CertificaitonNFTBurned(_tokenId, certificationId);\\n    }\\n\\n    function tokenURI(uint256 _tokenId) public view returns (string memory) {\\n        return _tokenURI(_tokenId);\\n    }\\n\\n    /**\\n     * @notice Generate the token URI\\n     *\\n     *         Token URI will be stored on backend\\n     *         URI = \\\"https://api.blockchainacademy.org/api/v1/nft/course/{courseId}\\\"\\n     */\\n    function _tokenURI(uint256 _tokenId) internal view returns (string memory) {\\n        return string.concat(baseURI, certificationIds[_tokenId].toString());\\n    }\\n}\\n\",\"keccak256\":\"0x7c869135618cd27037c302e5c5a1115509a4985707a0bc904efab823737305cc\",\"license\":\"MIT\"},\"contracts/base/ERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @title ERC721 Token Contract\\n *\\n * @notice This contract is mainly based on solmate/ERC721.sol\\n *         By default, not implement IERC721Metadata\\n */\\nabstract contract ERC721Upgradeable is Initializable {\\n    address internal constant ZERO_ADDRESS = address(0);\\n\\n    string public name;\\n    string public symbol;\\n\\n    mapping(uint256 => address) public ownerOf;\\n    mapping(address => uint256) public balanceOf;\\n\\n    mapping(uint256 => address) public getApproved;\\n    mapping(address => mapping(address => bool)) public isApprovedForAll;\\n\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(\\n        address indexed from,\\n        address indexed to,\\n        uint256 indexed tokenId\\n    );\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(\\n        address indexed owner,\\n        address indexed approved,\\n        uint256 indexed tokenId\\n    );\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(\\n        address indexed owner,\\n        address indexed operator,\\n        bool approved\\n    );\\n\\n    function intialize(string memory _name, string memory _symbol)\\n        public\\n        initializer\\n    {\\n        __ERC721_init(_name, _symbol);\\n    }\\n\\n    function __ERC721_init(string memory _name, string memory _symbol)\\n        internal\\n        onlyInitializing\\n    {\\n        name = _name;\\n        symbol = _symbol;\\n    }\\n\\n    function approve(address _spender, uint256 _tokenId) public virtual {\\n        address owner = ownerOf[_tokenId];\\n\\n        require(\\n            msg.sender == owner || isApprovedForAll[owner][msg.sender],\\n            \\\"NOT_AUTHORIZED\\\"\\n        );\\n\\n        getApproved[_tokenId] = _spender;\\n\\n        emit Approval(owner, _spender, _tokenId);\\n    }\\n\\n    function setApprovalForAll(address _operator, bool _approved)\\n        public\\n        virtual\\n    {\\n        isApprovedForAll[msg.sender][_operator] = _approved;\\n\\n        emit ApprovalForAll(msg.sender, _operator, _approved);\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 id\\n    ) public virtual {\\n        _beforeTokenTransfer(from, to, id);\\n\\n        require(from == ownerOf[id], \\\"WRONG_FROM\\\");\\n\\n        require(to != ZERO_ADDRESS, \\\"INVALID_RECIPIENT\\\");\\n\\n        require(\\n            msg.sender == from ||\\n                isApprovedForAll[from][msg.sender] ||\\n                msg.sender == getApproved[id],\\n            \\\"NOT_AUTHORIZED\\\"\\n        );\\n\\n        // Underflow of the sender's balance is impossible because we check for\\n        // ownership above and the recipient's balance can't realistically overflow.\\n        unchecked {\\n            --balanceOf[from];\\n\\n            ++balanceOf[to];\\n        }\\n\\n        ownerOf[id] = to;\\n\\n        delete getApproved[id];\\n\\n        emit Transfer(from, to, id);\\n\\n        _afterTokenTransfer(from, to, id);\\n    }\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id\\n    ) public virtual {\\n        transferFrom(from, to, id);\\n\\n        require(\\n            to.code.length == 0 ||\\n                IERC721Receiver(to).onERC721Received(\\n                    msg.sender,\\n                    from,\\n                    id,\\n                    \\\"\\\"\\n                ) ==\\n                IERC721Receiver.onERC721Received.selector,\\n            \\\"UNSAFE_RECIPIENT\\\"\\n        );\\n    }\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        bytes calldata data\\n    ) public virtual {\\n        transferFrom(from, to, id);\\n\\n        require(\\n            to.code.length == 0 ||\\n                IERC721Receiver(to).onERC721Received(\\n                    msg.sender,\\n                    from,\\n                    id,\\n                    data\\n                ) ==\\n                IERC721Receiver.onERC721Received.selector,\\n            \\\"UNSAFE_RECIPIENT\\\"\\n        );\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        returns (bool)\\n    {\\n        return\\n            interfaceId == 0x01ffc9a7 || // ERC165 Interface ID for ERC165\\n            interfaceId == 0x80ac58cd || // ERC165 Interface ID for ERC721\\n            interfaceId == 0x5b5e139f; // ERC165 Interface ID for ERC721Metadata\\n    }\\n\\n    function _mint(address to, uint256 id) internal virtual {\\n        require(to != ZERO_ADDRESS, \\\"INVALID_RECIPIENT\\\");\\n\\n        require(ownerOf[id] == ZERO_ADDRESS, \\\"ALREADY_MINTED\\\");\\n\\n        // Counter overflow is incredibly unrealistic.\\n        unchecked {\\n            ++balanceOf[to];\\n        }\\n\\n        ownerOf[id] = to;\\n\\n        emit Transfer(ZERO_ADDRESS, to, id);\\n    }\\n\\n    function _burn(uint256 id) internal virtual {\\n        address owner = ownerOf[id];\\n\\n        require(owner != ZERO_ADDRESS, \\\"NOT_MINTED\\\");\\n\\n        // Ownership check above ensures no underflow.\\n        unchecked {\\n            --balanceOf[owner];\\n        }\\n\\n        delete ownerOf[id];\\n\\n        delete getApproved[id];\\n\\n        emit Transfer(owner, ZERO_ADDRESS, id);\\n    }\\n\\n    function _safeMint(address to, uint256 id) internal virtual {\\n        _mint(to, id);\\n\\n        require(\\n            to.code.length == 0 ||\\n                IERC721Receiver(to).onERC721Received(\\n                    msg.sender,\\n                    address(0),\\n                    id,\\n                    \\\"\\\"\\n                ) ==\\n                IERC721Receiver.onERC721Received.selector,\\n            \\\"UNSAFE_RECIPIENT\\\"\\n        );\\n    }\\n\\n    function _safeMint(\\n        address to,\\n        uint256 id,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, id);\\n\\n        require(\\n            to.code.length == 0 ||\\n                IERC721Receiver(to).onERC721Received(\\n                    msg.sender,\\n                    address(0),\\n                    id,\\n                    data\\n                ) ==\\n                IERC721Receiver.onERC721Received.selector,\\n            \\\"UNSAFE_RECIPIENT\\\"\\n        );\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address _from,\\n        address _to,\\n        uint256 _tokenId\\n    ) internal virtual {}\\n\\n    function _afterTokenTransfer(\\n        address _from,\\n        address _to,\\n        uint256 _tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xd48596c6ca02d24cf9e4f85f7c2e38d24c6b269b2d9e232500180357e30bf411\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061350a806100206000396000f3fe608060405234801561001057600080fd5b506004361061014d5760003560e01c80636352211e116100c3578063a22cb4651161007c578063a22cb4651461039c578063b88d4fde146103b8578063c87b56dd146103d4578063e985e9c514610404578063f105a5f114610434578063f2fde38b146104505761014d565b80636352211e146102d85780636c0360eb1461030857806370a0823114610326578063715018a6146103565780638da5cb5b1461036057806395d89b411461037e5761014d565b806340c10f191161011557806340c10f191461020857806342842e0e1461023857806342966c68146102545780634cd88b761461027057806353f23a271461028c57806355f804b3146102bc5761014d565b806301ffc9a71461015257806306fdde0314610182578063081812fc146101a0578063095ea7b3146101d057806323b872dd146101ec575b600080fd5b61016c60048036038101906101679190612122565b61046c565b604051610179919061216a565b60405180910390f35b61018a6104fe565b6040516101979190612215565b60405180910390f35b6101ba60048036038101906101b5919061226d565b61058c565b6040516101c791906122db565b60405180910390f35b6101ea60048036038101906101e59190612322565b6105bf565b005b61020660048036038101906102019190612362565b6107a8565b005b610222600480360381019061021d9190612322565b610bb9565b60405161022f91906123c4565b60405180910390f35b610252600480360381019061024d9190612362565b610d37565b005b61026e6004803603810190610269919061226d565b610e6f565b005b61028a60048036038101906102859190612514565b610fb7565b005b6102a660048036038101906102a19190612322565b611101565b6040516102b391906123c4565b60405180910390f35b6102d660048036038101906102d1919061258c565b611126565b005b6102f260048036038101906102ed919061226d565b61117b565b6040516102ff91906122db565b60405180910390f35b6103106111ae565b60405161031d9190612215565b60405180910390f35b610340600480360381019061033b91906125d5565b61123c565b60405161034d91906123c4565b60405180910390f35b61035e611254565b005b610368611268565b60405161037591906122db565b60405180910390f35b610386611292565b6040516103939190612215565b60405180910390f35b6103b660048036038101906103b1919061262e565b611320565b005b6103d260048036038101906103cd91906126ce565b61141d565b005b6103ee60048036038101906103e9919061226d565b61155b565b6040516103fb9190612215565b60405180910390f35b61041e60048036038101906104199190612756565b61156d565b60405161042b919061216a565b60405180910390f35b61044e60048036038101906104499190612514565b61159c565b005b61046a600480360381019061046591906125d5565b6116de565b005b60006301ffc9a760e01b827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806104c757506380ac58cd60e01b827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806104f75750635b5e139f60e01b827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b9050919050565b6065805461050b906127c5565b80601f0160208091040260200160405190810160405280929190818152602001828054610537906127c5565b80156105845780601f1061055957610100808354040283529160200191610584565b820191906000526020600020905b81548152906001019060200180831161056757829003601f168201915b505050505081565b60696020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006067600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806106b75750606a60008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b6106f6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106ed90612842565b60405180910390fd5b826069600084815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550818373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a4505050565b6107b3838383611761565b6067600082815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614610854576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161084b906128ae565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036108c3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108ba9061291a565b60405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806109835750606a60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b806109ec57506069600082815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b610a2b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a2290612842565b60405180910390fd5b606860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600081546001900391905081905550606860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000815460010191905081905550816067600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506069600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4610bb4838383611766565b505050565b6000610bc361176b565b6000606e60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008481526020019081526020016000205414610c56576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c4d90612986565b60405180910390fd5b6000606b6000815480929190610c6b906129d5565b919050559050610c7b84826117e9565b82606d60008381526020019081526020016000208190555080606e60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008581526020019081526020016000208190555082818573ffffffffffffffffffffffffffffffffffffffff167ff17989e6170eec2417726193ff9da458247dd589eead2a51d6fc5c44909f3fe560405160405180910390a48091505092915050565b610d428383836107a8565b60008273ffffffffffffffffffffffffffffffffffffffff163b1480610e2b575063150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168273ffffffffffffffffffffffffffffffffffffffff1663150b7a023386856040518463ffffffff1660e01b8152600401610dc793929190612a54565b6020604051808303816000875af1158015610de6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e0a9190612ab3565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b610e6a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e6190612b2c565b60405180910390fd5b505050565b3373ffffffffffffffffffffffffffffffffffffffff166067600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610f10576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f0790612b98565b60405180910390fd5b610f1981611920565b6000606d6000838152602001908152602001600020549050606e60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008281526020019081526020016000206000905580827f8c999f5bf470414b20062099d6b047199d536d12556ee179aa166c5e5df9e3dd60405160405180910390a35050565b60008060019054906101000a900460ff16159050808015610fe85750600160008054906101000a900460ff1660ff16105b806110155750610ff730611ae1565b1580156110145750600160008054906101000a900460ff1660ff16145b5b611054576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161104b90612c2a565b60405180910390fd5b60016000806101000a81548160ff021916908360ff1602179055508015611091576001600060016101000a81548160ff0219169083151502179055505b611099611b04565b6110a38383611b5d565b80156110fc5760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249860016040516110f39190612c9c565b60405180910390a15b505050565b606e602052816000526040600020602052806000526040600020600091509150505481565b61112e61176b565b7fc41b7cb64e5be01af4afc2641afc861432136270f4206b7773f229b658b9669981606c604051611160929190612d50565b60405180910390a180606c90816111779190612f14565b5050565b60676020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b606c80546111bb906127c5565b80601f01602080910402602001604051908101604052809291908181526020018280546111e7906127c5565b80156112345780601f1061120957610100808354040283529160200191611234565b820191906000526020600020905b81548152906001019060200180831161121757829003601f168201915b505050505081565b60686020528060005260406000206000915090505481565b61125c61176b565b6112666000611bd0565b565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6066805461129f906127c5565b80601f01602080910402602001604051908101604052809291908181526020018280546112cb906127c5565b80156113185780601f106112ed57610100808354040283529160200191611318565b820191906000526020600020905b8154815290600101906020018083116112fb57829003601f168201915b505050505081565b80606a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051611411919061216a565b60405180910390a35050565b6114288585856107a8565b60008473ffffffffffffffffffffffffffffffffffffffff163b1480611515575063150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168473ffffffffffffffffffffffffffffffffffffffff1663150b7a0233888787876040518663ffffffff1660e01b81526004016114b1959493929190613013565b6020604051808303816000875af11580156114d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114f49190612ab3565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b611554576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161154b90612b2c565b60405180910390fd5b5050505050565b606061156682611c96565b9050919050565b606a6020528160005260406000206020528060005260406000206000915091509054906101000a900460ff1681565b60008060019054906101000a900460ff161590508080156115cd5750600160008054906101000a900460ff1660ff16105b806115fa57506115dc30611ae1565b1580156115f95750600160008054906101000a900460ff1660ff16145b5b611639576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161163090612c2a565b60405180910390fd5b60016000806101000a81548160ff021916908360ff1602179055508015611676576001600060016101000a81548160ff0219169083151502179055505b6116808383611b5d565b80156116d95760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249860016040516116d09190612c9c565b60405180910390a15b505050565b6116e661176b565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611755576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161174c906130d3565b60405180910390fd5b61175e81611bd0565b50565b505050565b505050565b611773611cdd565b73ffffffffffffffffffffffffffffffffffffffff16611791611268565b73ffffffffffffffffffffffffffffffffffffffff16146117e7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117de9061313f565b60405180910390fd5b565b6117f38282611ce5565b60008273ffffffffffffffffffffffffffffffffffffffff163b14806118dd575063150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168273ffffffffffffffffffffffffffffffffffffffff1663150b7a02336000856040518463ffffffff1660e01b815260040161187993929190612a54565b6020604051808303816000875af1158015611898573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118bc9190612ab3565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b61191c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161191390612b2c565b60405180910390fd5b5050565b60006067600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036119c7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119be906131ab565b60405180910390fd5b606860008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000815460019003919050819055506067600083815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556069600083815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905581600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600060019054906101000a900460ff16611b53576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b4a9061323d565b60405180910390fd5b611b5b611ef5565b565b600060019054906101000a900460ff16611bac576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ba39061323d565b60405180910390fd5b8160659081611bbb9190612f14565b508060669081611bcb9190612f14565b505050565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6060606c611cb6606d600085815260200190815260200160002054611f56565b604051602001611cc792919061331c565b6040516020818303038152906040529050919050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611d54576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d4b9061291a565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff166067600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611df6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ded9061338c565b60405180910390fd5b606860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000815460010191905081905550816067600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050565b600060019054906101000a900460ff16611f44576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f3b9061323d565b60405180910390fd5b611f54611f4f611cdd565b611bd0565b565b606060008203611f9d576040518060400160405280600181526020017f300000000000000000000000000000000000000000000000000000000000000081525090506120b1565b600082905060005b60008214611fcf578080611fb8906129d5565b915050600a82611fc891906133db565b9150611fa5565b60008167ffffffffffffffff811115611feb57611fea6123e9565b5b6040519080825280601f01601f19166020018201604052801561201d5781602001600182028036833780820191505090505b5090505b600085146120aa57600182612036919061340c565b9150600a856120459190613440565b60306120519190613471565b60f81b818381518110612067576120666134a5565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a856120a391906133db565b9450612021565b8093505050505b919050565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6120ff816120ca565b811461210a57600080fd5b50565b60008135905061211c816120f6565b92915050565b600060208284031215612138576121376120c0565b5b60006121468482850161210d565b91505092915050565b60008115159050919050565b6121648161214f565b82525050565b600060208201905061217f600083018461215b565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156121bf5780820151818401526020810190506121a4565b60008484015250505050565b6000601f19601f8301169050919050565b60006121e782612185565b6121f18185612190565b93506122018185602086016121a1565b61220a816121cb565b840191505092915050565b6000602082019050818103600083015261222f81846121dc565b905092915050565b6000819050919050565b61224a81612237565b811461225557600080fd5b50565b60008135905061226781612241565b92915050565b600060208284031215612283576122826120c0565b5b600061229184828501612258565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006122c58261229a565b9050919050565b6122d5816122ba565b82525050565b60006020820190506122f060008301846122cc565b92915050565b6122ff816122ba565b811461230a57600080fd5b50565b60008135905061231c816122f6565b92915050565b60008060408385031215612339576123386120c0565b5b60006123478582860161230d565b925050602061235885828601612258565b9150509250929050565b60008060006060848603121561237b5761237a6120c0565b5b60006123898682870161230d565b935050602061239a8682870161230d565b92505060406123ab86828701612258565b9150509250925092565b6123be81612237565b82525050565b60006020820190506123d960008301846123b5565b92915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b612421826121cb565b810181811067ffffffffffffffff821117156124405761243f6123e9565b5b80604052505050565b60006124536120b6565b905061245f8282612418565b919050565b600067ffffffffffffffff82111561247f5761247e6123e9565b5b612488826121cb565b9050602081019050919050565b82818337600083830152505050565b60006124b76124b284612464565b612449565b9050828152602081018484840111156124d3576124d26123e4565b5b6124de848285612495565b509392505050565b600082601f8301126124fb576124fa6123df565b5b813561250b8482602086016124a4565b91505092915050565b6000806040838503121561252b5761252a6120c0565b5b600083013567ffffffffffffffff811115612549576125486120c5565b5b612555858286016124e6565b925050602083013567ffffffffffffffff811115612576576125756120c5565b5b612582858286016124e6565b9150509250929050565b6000602082840312156125a2576125a16120c0565b5b600082013567ffffffffffffffff8111156125c0576125bf6120c5565b5b6125cc848285016124e6565b91505092915050565b6000602082840312156125eb576125ea6120c0565b5b60006125f98482850161230d565b91505092915050565b61260b8161214f565b811461261657600080fd5b50565b60008135905061262881612602565b92915050565b60008060408385031215612645576126446120c0565b5b60006126538582860161230d565b925050602061266485828601612619565b9150509250929050565b600080fd5b600080fd5b60008083601f84011261268e5761268d6123df565b5b8235905067ffffffffffffffff8111156126ab576126aa61266e565b5b6020830191508360018202830111156126c7576126c6612673565b5b9250929050565b6000806000806000608086880312156126ea576126e96120c0565b5b60006126f88882890161230d565b95505060206127098882890161230d565b945050604061271a88828901612258565b935050606086013567ffffffffffffffff81111561273b5761273a6120c5565b5b61274788828901612678565b92509250509295509295909350565b6000806040838503121561276d5761276c6120c0565b5b600061277b8582860161230d565b925050602061278c8582860161230d565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806127dd57607f821691505b6020821081036127f0576127ef612796565b5b50919050565b7f4e4f545f415554484f52495a4544000000000000000000000000000000000000600082015250565b600061282c600e83612190565b9150612837826127f6565b602082019050919050565b6000602082019050818103600083015261285b8161281f565b9050919050565b7f57524f4e475f46524f4d00000000000000000000000000000000000000000000600082015250565b6000612898600a83612190565b91506128a382612862565b602082019050919050565b600060208201905081810360008301526128c78161288b565b9050919050565b7f494e56414c49445f524543495049454e54000000000000000000000000000000600082015250565b6000612904601183612190565b915061290f826128ce565b602082019050919050565b60006020820190508181036000830152612933816128f7565b9050919050565b7f43657274696669636174696f6e4e46543a20616c7265616479206d696e746564600082015250565b6000612970602083612190565b915061297b8261293a565b602082019050919050565b6000602082019050818103600083015261299f81612963565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006129e082612237565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203612a1257612a116129a6565b5b600182019050919050565b600082825260208201905092915050565b50565b6000612a3e600083612a1d565b9150612a4982612a2e565b600082019050919050565b6000608082019050612a6960008301866122cc565b612a7660208301856122cc565b612a8360408301846123b5565b8181036060830152612a9481612a31565b9050949350505050565b600081519050612aad816120f6565b92915050565b600060208284031215612ac957612ac86120c0565b5b6000612ad784828501612a9e565b91505092915050565b7f554e534146455f524543495049454e5400000000000000000000000000000000600082015250565b6000612b16601083612190565b9150612b2182612ae0565b602082019050919050565b60006020820190508181036000830152612b4581612b09565b9050919050565b7f4f6e6c792074686520746f6b656e206f776e65722063616e206275726e000000600082015250565b6000612b82601d83612190565b9150612b8d82612b4c565b602082019050919050565b60006020820190508181036000830152612bb181612b75565b9050919050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b6000612c14602e83612190565b9150612c1f82612bb8565b604082019050919050565b60006020820190508181036000830152612c4381612c07565b9050919050565b6000819050919050565b600060ff82169050919050565b6000819050919050565b6000612c86612c81612c7c84612c4a565b612c61565b612c54565b9050919050565b612c9681612c6b565b82525050565b6000602082019050612cb16000830184612c8d565b92915050565b60008190508160005260206000209050919050565b60008154612cd9816127c5565b612ce38186612190565b94506001821660008114612cfe5760018114612d1457612d47565b60ff198316865281151560200286019350612d47565b612d1d85612cb7565b60005b83811015612d3f57815481890152600182019150602081019050612d20565b808801955050505b50505092915050565b60006040820190508181036000830152612d6a81856121dc565b90508181036020830152612d7e8184612ccc565b90509392505050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302612dd47fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82612d97565b612dde8683612d97565b95508019841693508086168417925050509392505050565b6000612e11612e0c612e0784612237565b612c61565b612237565b9050919050565b6000819050919050565b612e2b83612df6565b612e3f612e3782612e18565b848454612da4565b825550505050565b600090565b612e54612e47565b612e5f818484612e22565b505050565b5b81811015612e8357612e78600082612e4c565b600181019050612e65565b5050565b601f821115612ec857612e9981612cb7565b612ea284612d87565b81016020851015612eb1578190505b612ec5612ebd85612d87565b830182612e64565b50505b505050565b600082821c905092915050565b6000612eeb60001984600802612ecd565b1980831691505092915050565b6000612f048383612eda565b9150826002028217905092915050565b612f1d82612185565b67ffffffffffffffff811115612f3657612f356123e9565b5b612f4082546127c5565b612f4b828285612e87565b600060209050601f831160018114612f7e5760008415612f6c578287015190505b612f768582612ef8565b865550612fde565b601f198416612f8c86612cb7565b60005b82811015612fb457848901518255600182019150602085019450602081019050612f8f565b86831015612fd15784890151612fcd601f891682612eda565b8355505b6001600288020188555050505b505050505050565b6000612ff28385612a1d565b9350612fff838584612495565b613008836121cb565b840190509392505050565b600060808201905061302860008301886122cc565b61303560208301876122cc565b61304260408301866123b5565b8181036060830152613055818486612fe6565b90509695505050505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006130bd602683612190565b91506130c882613061565b604082019050919050565b600060208201905081810360008301526130ec816130b0565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000613129602083612190565b9150613134826130f3565b602082019050919050565b600060208201905081810360008301526131588161311c565b9050919050565b7f4e4f545f4d494e54454400000000000000000000000000000000000000000000600082015250565b6000613195600a83612190565b91506131a08261315f565b602082019050919050565b600060208201905081810360008301526131c481613188565b9050919050565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b6000613227602b83612190565b9150613232826131cb565b604082019050919050565b600060208201905081810360008301526132568161321a565b9050919050565b600081905092915050565b60008154613275816127c5565b61327f818661325d565b9450600182166000811461329a57600181146132af576132e2565b60ff19831686528115158202860193506132e2565b6132b885612cb7565b60005b838110156132da578154818901526001820191506020810190506132bb565b838801955050505b50505092915050565b60006132f682612185565b613300818561325d565b93506133108185602086016121a1565b80840191505092915050565b60006133288285613268565b915061333482846132eb565b91508190509392505050565b7f414c52454144595f4d494e544544000000000000000000000000000000000000600082015250565b6000613376600e83612190565b915061338182613340565b602082019050919050565b600060208201905081810360008301526133a581613369565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006133e682612237565b91506133f183612237565b925082613401576134006133ac565b5b828204905092915050565b600061341782612237565b915061342283612237565b925082820390508181111561343a576134396129a6565b5b92915050565b600061344b82612237565b915061345683612237565b925082613466576134656133ac565b5b828206905092915050565b600061347c82612237565b915061348783612237565b925082820190508082111561349f5761349e6129a6565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fdfea2646970667358221220167013bf0b8f06bf9eae694fda00150f3851496ac7436bccd1bcc168facbb8a364736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061014d5760003560e01c80636352211e116100c3578063a22cb4651161007c578063a22cb4651461039c578063b88d4fde146103b8578063c87b56dd146103d4578063e985e9c514610404578063f105a5f114610434578063f2fde38b146104505761014d565b80636352211e146102d85780636c0360eb1461030857806370a0823114610326578063715018a6146103565780638da5cb5b1461036057806395d89b411461037e5761014d565b806340c10f191161011557806340c10f191461020857806342842e0e1461023857806342966c68146102545780634cd88b761461027057806353f23a271461028c57806355f804b3146102bc5761014d565b806301ffc9a71461015257806306fdde0314610182578063081812fc146101a0578063095ea7b3146101d057806323b872dd146101ec575b600080fd5b61016c60048036038101906101679190612122565b61046c565b604051610179919061216a565b60405180910390f35b61018a6104fe565b6040516101979190612215565b60405180910390f35b6101ba60048036038101906101b5919061226d565b61058c565b6040516101c791906122db565b60405180910390f35b6101ea60048036038101906101e59190612322565b6105bf565b005b61020660048036038101906102019190612362565b6107a8565b005b610222600480360381019061021d9190612322565b610bb9565b60405161022f91906123c4565b60405180910390f35b610252600480360381019061024d9190612362565b610d37565b005b61026e6004803603810190610269919061226d565b610e6f565b005b61028a60048036038101906102859190612514565b610fb7565b005b6102a660048036038101906102a19190612322565b611101565b6040516102b391906123c4565b60405180910390f35b6102d660048036038101906102d1919061258c565b611126565b005b6102f260048036038101906102ed919061226d565b61117b565b6040516102ff91906122db565b60405180910390f35b6103106111ae565b60405161031d9190612215565b60405180910390f35b610340600480360381019061033b91906125d5565b61123c565b60405161034d91906123c4565b60405180910390f35b61035e611254565b005b610368611268565b60405161037591906122db565b60405180910390f35b610386611292565b6040516103939190612215565b60405180910390f35b6103b660048036038101906103b1919061262e565b611320565b005b6103d260048036038101906103cd91906126ce565b61141d565b005b6103ee60048036038101906103e9919061226d565b61155b565b6040516103fb9190612215565b60405180910390f35b61041e60048036038101906104199190612756565b61156d565b60405161042b919061216a565b60405180910390f35b61044e60048036038101906104499190612514565b61159c565b005b61046a600480360381019061046591906125d5565b6116de565b005b60006301ffc9a760e01b827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806104c757506380ac58cd60e01b827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806104f75750635b5e139f60e01b827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b9050919050565b6065805461050b906127c5565b80601f0160208091040260200160405190810160405280929190818152602001828054610537906127c5565b80156105845780601f1061055957610100808354040283529160200191610584565b820191906000526020600020905b81548152906001019060200180831161056757829003601f168201915b505050505081565b60696020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006067600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806106b75750606a60008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b6106f6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106ed90612842565b60405180910390fd5b826069600084815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550818373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a4505050565b6107b3838383611761565b6067600082815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614610854576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161084b906128ae565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036108c3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108ba9061291a565b60405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806109835750606a60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b806109ec57506069600082815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b610a2b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a2290612842565b60405180910390fd5b606860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600081546001900391905081905550606860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000815460010191905081905550816067600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506069600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4610bb4838383611766565b505050565b6000610bc361176b565b6000606e60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008481526020019081526020016000205414610c56576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c4d90612986565b60405180910390fd5b6000606b6000815480929190610c6b906129d5565b919050559050610c7b84826117e9565b82606d60008381526020019081526020016000208190555080606e60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008581526020019081526020016000208190555082818573ffffffffffffffffffffffffffffffffffffffff167ff17989e6170eec2417726193ff9da458247dd589eead2a51d6fc5c44909f3fe560405160405180910390a48091505092915050565b610d428383836107a8565b60008273ffffffffffffffffffffffffffffffffffffffff163b1480610e2b575063150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168273ffffffffffffffffffffffffffffffffffffffff1663150b7a023386856040518463ffffffff1660e01b8152600401610dc793929190612a54565b6020604051808303816000875af1158015610de6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e0a9190612ab3565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b610e6a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e6190612b2c565b60405180910390fd5b505050565b3373ffffffffffffffffffffffffffffffffffffffff166067600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610f10576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f0790612b98565b60405180910390fd5b610f1981611920565b6000606d6000838152602001908152602001600020549050606e60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008281526020019081526020016000206000905580827f8c999f5bf470414b20062099d6b047199d536d12556ee179aa166c5e5df9e3dd60405160405180910390a35050565b60008060019054906101000a900460ff16159050808015610fe85750600160008054906101000a900460ff1660ff16105b806110155750610ff730611ae1565b1580156110145750600160008054906101000a900460ff1660ff16145b5b611054576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161104b90612c2a565b60405180910390fd5b60016000806101000a81548160ff021916908360ff1602179055508015611091576001600060016101000a81548160ff0219169083151502179055505b611099611b04565b6110a38383611b5d565b80156110fc5760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249860016040516110f39190612c9c565b60405180910390a15b505050565b606e602052816000526040600020602052806000526040600020600091509150505481565b61112e61176b565b7fc41b7cb64e5be01af4afc2641afc861432136270f4206b7773f229b658b9669981606c604051611160929190612d50565b60405180910390a180606c90816111779190612f14565b5050565b60676020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b606c80546111bb906127c5565b80601f01602080910402602001604051908101604052809291908181526020018280546111e7906127c5565b80156112345780601f1061120957610100808354040283529160200191611234565b820191906000526020600020905b81548152906001019060200180831161121757829003601f168201915b505050505081565b60686020528060005260406000206000915090505481565b61125c61176b565b6112666000611bd0565b565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6066805461129f906127c5565b80601f01602080910402602001604051908101604052809291908181526020018280546112cb906127c5565b80156113185780601f106112ed57610100808354040283529160200191611318565b820191906000526020600020905b8154815290600101906020018083116112fb57829003601f168201915b505050505081565b80606a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051611411919061216a565b60405180910390a35050565b6114288585856107a8565b60008473ffffffffffffffffffffffffffffffffffffffff163b1480611515575063150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168473ffffffffffffffffffffffffffffffffffffffff1663150b7a0233888787876040518663ffffffff1660e01b81526004016114b1959493929190613013565b6020604051808303816000875af11580156114d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114f49190612ab3565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b611554576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161154b90612b2c565b60405180910390fd5b5050505050565b606061156682611c96565b9050919050565b606a6020528160005260406000206020528060005260406000206000915091509054906101000a900460ff1681565b60008060019054906101000a900460ff161590508080156115cd5750600160008054906101000a900460ff1660ff16105b806115fa57506115dc30611ae1565b1580156115f95750600160008054906101000a900460ff1660ff16145b5b611639576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161163090612c2a565b60405180910390fd5b60016000806101000a81548160ff021916908360ff1602179055508015611676576001600060016101000a81548160ff0219169083151502179055505b6116808383611b5d565b80156116d95760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249860016040516116d09190612c9c565b60405180910390a15b505050565b6116e661176b565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611755576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161174c906130d3565b60405180910390fd5b61175e81611bd0565b50565b505050565b505050565b611773611cdd565b73ffffffffffffffffffffffffffffffffffffffff16611791611268565b73ffffffffffffffffffffffffffffffffffffffff16146117e7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117de9061313f565b60405180910390fd5b565b6117f38282611ce5565b60008273ffffffffffffffffffffffffffffffffffffffff163b14806118dd575063150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168273ffffffffffffffffffffffffffffffffffffffff1663150b7a02336000856040518463ffffffff1660e01b815260040161187993929190612a54565b6020604051808303816000875af1158015611898573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118bc9190612ab3565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b61191c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161191390612b2c565b60405180910390fd5b5050565b60006067600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036119c7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119be906131ab565b60405180910390fd5b606860008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000815460019003919050819055506067600083815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556069600083815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905581600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600060019054906101000a900460ff16611b53576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b4a9061323d565b60405180910390fd5b611b5b611ef5565b565b600060019054906101000a900460ff16611bac576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ba39061323d565b60405180910390fd5b8160659081611bbb9190612f14565b508060669081611bcb9190612f14565b505050565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6060606c611cb6606d600085815260200190815260200160002054611f56565b604051602001611cc792919061331c565b6040516020818303038152906040529050919050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611d54576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d4b9061291a565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff166067600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611df6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ded9061338c565b60405180910390fd5b606860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000815460010191905081905550816067600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050565b600060019054906101000a900460ff16611f44576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f3b9061323d565b60405180910390fd5b611f54611f4f611cdd565b611bd0565b565b606060008203611f9d576040518060400160405280600181526020017f300000000000000000000000000000000000000000000000000000000000000081525090506120b1565b600082905060005b60008214611fcf578080611fb8906129d5565b915050600a82611fc891906133db565b9150611fa5565b60008167ffffffffffffffff811115611feb57611fea6123e9565b5b6040519080825280601f01601f19166020018201604052801561201d5781602001600182028036833780820191505090505b5090505b600085146120aa57600182612036919061340c565b9150600a856120459190613440565b60306120519190613471565b60f81b818381518110612067576120666134a5565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a856120a391906133db565b9450612021565b8093505050505b919050565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6120ff816120ca565b811461210a57600080fd5b50565b60008135905061211c816120f6565b92915050565b600060208284031215612138576121376120c0565b5b60006121468482850161210d565b91505092915050565b60008115159050919050565b6121648161214f565b82525050565b600060208201905061217f600083018461215b565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156121bf5780820151818401526020810190506121a4565b60008484015250505050565b6000601f19601f8301169050919050565b60006121e782612185565b6121f18185612190565b93506122018185602086016121a1565b61220a816121cb565b840191505092915050565b6000602082019050818103600083015261222f81846121dc565b905092915050565b6000819050919050565b61224a81612237565b811461225557600080fd5b50565b60008135905061226781612241565b92915050565b600060208284031215612283576122826120c0565b5b600061229184828501612258565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006122c58261229a565b9050919050565b6122d5816122ba565b82525050565b60006020820190506122f060008301846122cc565b92915050565b6122ff816122ba565b811461230a57600080fd5b50565b60008135905061231c816122f6565b92915050565b60008060408385031215612339576123386120c0565b5b60006123478582860161230d565b925050602061235885828601612258565b9150509250929050565b60008060006060848603121561237b5761237a6120c0565b5b60006123898682870161230d565b935050602061239a8682870161230d565b92505060406123ab86828701612258565b9150509250925092565b6123be81612237565b82525050565b60006020820190506123d960008301846123b5565b92915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b612421826121cb565b810181811067ffffffffffffffff821117156124405761243f6123e9565b5b80604052505050565b60006124536120b6565b905061245f8282612418565b919050565b600067ffffffffffffffff82111561247f5761247e6123e9565b5b612488826121cb565b9050602081019050919050565b82818337600083830152505050565b60006124b76124b284612464565b612449565b9050828152602081018484840111156124d3576124d26123e4565b5b6124de848285612495565b509392505050565b600082601f8301126124fb576124fa6123df565b5b813561250b8482602086016124a4565b91505092915050565b6000806040838503121561252b5761252a6120c0565b5b600083013567ffffffffffffffff811115612549576125486120c5565b5b612555858286016124e6565b925050602083013567ffffffffffffffff811115612576576125756120c5565b5b612582858286016124e6565b9150509250929050565b6000602082840312156125a2576125a16120c0565b5b600082013567ffffffffffffffff8111156125c0576125bf6120c5565b5b6125cc848285016124e6565b91505092915050565b6000602082840312156125eb576125ea6120c0565b5b60006125f98482850161230d565b91505092915050565b61260b8161214f565b811461261657600080fd5b50565b60008135905061262881612602565b92915050565b60008060408385031215612645576126446120c0565b5b60006126538582860161230d565b925050602061266485828601612619565b9150509250929050565b600080fd5b600080fd5b60008083601f84011261268e5761268d6123df565b5b8235905067ffffffffffffffff8111156126ab576126aa61266e565b5b6020830191508360018202830111156126c7576126c6612673565b5b9250929050565b6000806000806000608086880312156126ea576126e96120c0565b5b60006126f88882890161230d565b95505060206127098882890161230d565b945050604061271a88828901612258565b935050606086013567ffffffffffffffff81111561273b5761273a6120c5565b5b61274788828901612678565b92509250509295509295909350565b6000806040838503121561276d5761276c6120c0565b5b600061277b8582860161230d565b925050602061278c8582860161230d565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806127dd57607f821691505b6020821081036127f0576127ef612796565b5b50919050565b7f4e4f545f415554484f52495a4544000000000000000000000000000000000000600082015250565b600061282c600e83612190565b9150612837826127f6565b602082019050919050565b6000602082019050818103600083015261285b8161281f565b9050919050565b7f57524f4e475f46524f4d00000000000000000000000000000000000000000000600082015250565b6000612898600a83612190565b91506128a382612862565b602082019050919050565b600060208201905081810360008301526128c78161288b565b9050919050565b7f494e56414c49445f524543495049454e54000000000000000000000000000000600082015250565b6000612904601183612190565b915061290f826128ce565b602082019050919050565b60006020820190508181036000830152612933816128f7565b9050919050565b7f43657274696669636174696f6e4e46543a20616c7265616479206d696e746564600082015250565b6000612970602083612190565b915061297b8261293a565b602082019050919050565b6000602082019050818103600083015261299f81612963565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006129e082612237565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203612a1257612a116129a6565b5b600182019050919050565b600082825260208201905092915050565b50565b6000612a3e600083612a1d565b9150612a4982612a2e565b600082019050919050565b6000608082019050612a6960008301866122cc565b612a7660208301856122cc565b612a8360408301846123b5565b8181036060830152612a9481612a31565b9050949350505050565b600081519050612aad816120f6565b92915050565b600060208284031215612ac957612ac86120c0565b5b6000612ad784828501612a9e565b91505092915050565b7f554e534146455f524543495049454e5400000000000000000000000000000000600082015250565b6000612b16601083612190565b9150612b2182612ae0565b602082019050919050565b60006020820190508181036000830152612b4581612b09565b9050919050565b7f4f6e6c792074686520746f6b656e206f776e65722063616e206275726e000000600082015250565b6000612b82601d83612190565b9150612b8d82612b4c565b602082019050919050565b60006020820190508181036000830152612bb181612b75565b9050919050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b6000612c14602e83612190565b9150612c1f82612bb8565b604082019050919050565b60006020820190508181036000830152612c4381612c07565b9050919050565b6000819050919050565b600060ff82169050919050565b6000819050919050565b6000612c86612c81612c7c84612c4a565b612c61565b612c54565b9050919050565b612c9681612c6b565b82525050565b6000602082019050612cb16000830184612c8d565b92915050565b60008190508160005260206000209050919050565b60008154612cd9816127c5565b612ce38186612190565b94506001821660008114612cfe5760018114612d1457612d47565b60ff198316865281151560200286019350612d47565b612d1d85612cb7565b60005b83811015612d3f57815481890152600182019150602081019050612d20565b808801955050505b50505092915050565b60006040820190508181036000830152612d6a81856121dc565b90508181036020830152612d7e8184612ccc565b90509392505050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302612dd47fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82612d97565b612dde8683612d97565b95508019841693508086168417925050509392505050565b6000612e11612e0c612e0784612237565b612c61565b612237565b9050919050565b6000819050919050565b612e2b83612df6565b612e3f612e3782612e18565b848454612da4565b825550505050565b600090565b612e54612e47565b612e5f818484612e22565b505050565b5b81811015612e8357612e78600082612e4c565b600181019050612e65565b5050565b601f821115612ec857612e9981612cb7565b612ea284612d87565b81016020851015612eb1578190505b612ec5612ebd85612d87565b830182612e64565b50505b505050565b600082821c905092915050565b6000612eeb60001984600802612ecd565b1980831691505092915050565b6000612f048383612eda565b9150826002028217905092915050565b612f1d82612185565b67ffffffffffffffff811115612f3657612f356123e9565b5b612f4082546127c5565b612f4b828285612e87565b600060209050601f831160018114612f7e5760008415612f6c578287015190505b612f768582612ef8565b865550612fde565b601f198416612f8c86612cb7565b60005b82811015612fb457848901518255600182019150602085019450602081019050612f8f565b86831015612fd15784890151612fcd601f891682612eda565b8355505b6001600288020188555050505b505050505050565b6000612ff28385612a1d565b9350612fff838584612495565b613008836121cb565b840190509392505050565b600060808201905061302860008301886122cc565b61303560208301876122cc565b61304260408301866123b5565b8181036060830152613055818486612fe6565b90509695505050505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006130bd602683612190565b91506130c882613061565b604082019050919050565b600060208201905081810360008301526130ec816130b0565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000613129602083612190565b9150613134826130f3565b602082019050919050565b600060208201905081810360008301526131588161311c565b9050919050565b7f4e4f545f4d494e54454400000000000000000000000000000000000000000000600082015250565b6000613195600a83612190565b91506131a08261315f565b602082019050919050565b600060208201905081810360008301526131c481613188565b9050919050565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b6000613227602b83612190565b9150613232826131cb565b604082019050919050565b600060208201905081810360008301526132568161321a565b9050919050565b600081905092915050565b60008154613275816127c5565b61327f818661325d565b9450600182166000811461329a57600181146132af576132e2565b60ff19831686528115158202860193506132e2565b6132b885612cb7565b60005b838110156132da578154818901526001820191506020810190506132bb565b838801955050505b50505092915050565b60006132f682612185565b613300818561325d565b93506133108185602086016121a1565b80840191505092915050565b60006133288285613268565b915061333482846132eb565b91508190509392505050565b7f414c52454144595f4d494e544544000000000000000000000000000000000000600082015250565b6000613376600e83612190565b915061338182613340565b602082019050919050565b600060208201905081810360008301526133a581613369565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006133e682612237565b91506133f183612237565b925082613401576134006133ac565b5b828204905092915050565b600061341782612237565b915061342283612237565b925082820390508181111561343a576134396129a6565b5b92915050565b600061344b82612237565b915061345683612237565b925082613466576134656133ac565b5b828206905092915050565b600061347c82612237565b915061348783612237565b925082820190508082111561349f5761349e6129a6565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fdfea2646970667358221220167013bf0b8f06bf9eae694fda00150f3851496ac7436bccd1bcc168facbb8a364736f6c63430008110033",
  "devdoc": {
    "author": "Eric Lee",
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "Certification NFT for Blockchain Academy",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "This contract is used to mint NFTs for Blockchain Academy Certification.         Certification is the top level NFT for Blockchain Academy.         It is minted for those who:         - Complete all BuidlCamp courses and exercises         - Finish certain courses combination & pass certain tests         - To be extended...         Certification NFT is a ERC721 token.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 138,
        "contract": "contracts/badge/CertificationNFT.sol:CertificationNFT",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 141,
        "contract": "contracts/badge/CertificationNFT.sol:CertificationNFT",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 625,
        "contract": "contracts/badge/CertificationNFT.sol:CertificationNFT",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/badge/CertificationNFT.sol:CertificationNFT",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 130,
        "contract": "contracts/badge/CertificationNFT.sol:CertificationNFT",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 1334,
        "contract": "contracts/badge/CertificationNFT.sol:CertificationNFT",
        "label": "name",
        "offset": 0,
        "slot": "101",
        "type": "t_string_storage"
      },
      {
        "astId": 1336,
        "contract": "contracts/badge/CertificationNFT.sol:CertificationNFT",
        "label": "symbol",
        "offset": 0,
        "slot": "102",
        "type": "t_string_storage"
      },
      {
        "astId": 1340,
        "contract": "contracts/badge/CertificationNFT.sol:CertificationNFT",
        "label": "ownerOf",
        "offset": 0,
        "slot": "103",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 1344,
        "contract": "contracts/badge/CertificationNFT.sol:CertificationNFT",
        "label": "balanceOf",
        "offset": 0,
        "slot": "104",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1348,
        "contract": "contracts/badge/CertificationNFT.sol:CertificationNFT",
        "label": "getApproved",
        "offset": 0,
        "slot": "105",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 1354,
        "contract": "contracts/badge/CertificationNFT.sol:CertificationNFT",
        "label": "isApprovedForAll",
        "offset": 0,
        "slot": "106",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 885,
        "contract": "contracts/badge/CertificationNFT.sol:CertificationNFT",
        "label": "counter",
        "offset": 0,
        "slot": "107",
        "type": "t_uint256"
      },
      {
        "astId": 887,
        "contract": "contracts/badge/CertificationNFT.sol:CertificationNFT",
        "label": "baseURI",
        "offset": 0,
        "slot": "108",
        "type": "t_string_storage"
      },
      {
        "astId": 891,
        "contract": "contracts/badge/CertificationNFT.sol:CertificationNFT",
        "label": "certificationIds",
        "offset": 0,
        "slot": "109",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 897,
        "contract": "contracts/badge/CertificationNFT.sol:CertificationNFT",
        "label": "userMinted",
        "offset": 0,
        "slot": "110",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}