{
  "address": "0x0f3A2eE017930ec027b4b51faB51cecAfb2BE4cA",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "oldURI",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "newURI",
          "type": "string"
        }
      ],
      "name": "BaseURIChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "courseId",
          "type": "uint256"
        }
      ],
      "name": "CourseNFTBurned",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "courseId",
          "type": "uint256"
        }
      ],
      "name": "CourseNFTMinted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "counter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "courseIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "expiryForCourses",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        }
      ],
      "name": "intialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_courseId",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_uri",
          "type": "string"
        }
      ],
      "name": "setBaseURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "userMinted",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x7cffeb613823b20571f03ee8697449d5c169f633214e3e427182cc2673597b5e",
  "receipt": {
    "to": null,
    "from": "0x32eB34d060c12aD0491d260c436d30e5fB13a8Cd",
    "contractAddress": "0x0f3A2eE017930ec027b4b51faB51cecAfb2BE4cA",
    "transactionIndex": 22,
    "gasUsed": "3091444",
    "logsBloom": "0x
    "blockHash": "0xcf14f77ccd58279897a76de7410372ec123b39f5648bfdaaef4f3134242246a6",
    "transactionHash": "0x7cffeb613823b20571f03ee8697449d5c169f633214e3e427182cc2673597b5e",
    "logs": [],
    "blockNumber": 7735474,
    "cumulativeGasUsed": "9354891",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "f0b1f625b1034bcad97d394916d33a2c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"oldURI\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newURI\",\"type\":\"string\"}],\"name\":\"BaseURIChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"courseId\",\"type\":\"uint256\"}],\"name\":\"CourseNFTBurned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"courseId\",\"type\":\"uint256\"}],\"name\":\"CourseNFTMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"counter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"courseIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"expiryForCourses\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"intialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_courseId\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userMinted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/badge/CourseNFT.sol\":\"CourseNFT\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0-rc.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initialized`\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initializing`\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0xf2efdd01f01f127e8b631675a359cd8cabfbcdcd2e8587ecf906181bcd667bc9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0-rc.1) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xabed77589961adbaaa36817e0914bcbe4c447311c9451bf3fc9b073c1f092d8d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"contracts/badge/CourseNFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"../base/ERC721Upgradeable.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\ncontract CourseNFT is OwnableUpgradeable, ERC721Upgradeable {\\n    using Strings for uint256;\\n\\n    uint256 public counter;\\n\\n    string public baseURI;\\n\\n    // Token id => Course Id\\n    // Course id is an index for the server to query the course\\n    // After querying the correct course, the server can get the event data\\n    mapping(uint256 => uint256) public courseIds;\\n\\n    // Expiry timestamp for a course id\\n    // After this timestamp, the NFT is no longer available for mint\\n    // If expiry == 0, the NFT is always available for mint\\n    mapping(uint256 => uint256) public expiryForCourses;\\n\\n    // User address => course id => token id\\n    mapping(address => mapping(uint256 => uint256)) public userMinted;\\n\\n    event BaseURIChanged(string oldURI, string newURI);\\n\\n    event CourseNFTMinted(\\n        address indexed to,\\n        uint256 indexed tokenId,\\n        uint256 indexed courseId\\n    );\\n\\n    event CourseNFTBurned(uint256 indexed tokenId, uint256 indexed courseId);\\n\\n    function initialize(string memory _name, string memory _symbol)\\n        public\\n        initializer\\n    {\\n        __Ownable_init();\\n        __ERC721_init(_name, _symbol);\\n    }\\n\\n    modifier notExpired(uint256 _courseId) {\\n        uint256 expiryDate = expiryForCourses[_courseId];\\n        if (expiryDate != 0) {\\n            require(\\n                block.timestamp < expiryDate,\\n                \\\"CourseNFT: NFT is no longer available for mint\\\"\\n            );\\n        }\\n        _;\\n    }\\n\\n    function setBaseURI(string memory _uri) public onlyOwner {\\n        emit BaseURIChanged(_uri, baseURI);\\n        baseURI = _uri;\\n    }\\n\\n    function mint(address _to, uint256 _courseId)\\n        external\\n        notExpired(_courseId)\\n        onlyOwner\\n        returns (uint256)\\n    {\\n        require(\\n            userMinted[_to][_courseId] == 0,\\n            \\\"CourseNFT: user already minted this course\\\"\\n        );\\n\\n        uint256 tokenId = counter++;\\n\\n        _safeMint(_to, tokenId);\\n\\n        // Record this token's course Id\\n        courseIds[tokenId] = _courseId;\\n\\n        userMinted[_to][_courseId] = tokenId;\\n\\n        emit CourseNFTMinted(_to, tokenId, _courseId);\\n\\n        return tokenId;\\n    }\\n\\n    function burn(uint256 _tokenId) external {\\n        require(\\n            ownerOf[_tokenId] == msg.sender,\\n            \\\"Only the token owner can burn\\\"\\n        );\\n\\n        _burn(_tokenId);\\n\\n        uint256 courseId = courseIds[_tokenId];\\n        delete userMinted[msg.sender][courseId];\\n\\n        emit CourseNFTBurned(_tokenId, courseIds[_tokenId]);\\n    }\\n\\n    function tokenURI(uint256 _tokenId) public view returns (string memory) {\\n        return _tokenURI(_tokenId);\\n    }\\n\\n    /**\\n     * @notice Generate the token URI\\n     *\\n     *         Token URI will be stored on backend\\n     *         URI = \\\"https://api.blockchainacademy.org/api/v1/nft/course/{courseId}\\\"\\n     */\\n    function _tokenURI(uint256 _tokenId) internal view returns (string memory) {\\n        return string.concat(baseURI, courseIds[_tokenId].toString());\\n    }\\n}\\n\",\"keccak256\":\"0xad2506141cf9b871e80c1d54c4b36ada4a2fda38d99fb1a716047a6b76879dea\",\"license\":\"MIT\"},\"contracts/base/ERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @title ERC721 Token Contract\\n *\\n * @notice This contract is mainly based on solmate/ERC721.sol\\n *         By default, not implement IERC721Metadata\\n */\\nabstract contract ERC721Upgradeable is Initializable {\\n    address internal constant ZERO_ADDRESS = address(0);\\n\\n    string public name;\\n    string public symbol;\\n\\n    mapping(uint256 => address) public ownerOf;\\n    mapping(address => uint256) public balanceOf;\\n\\n    mapping(uint256 => address) public getApproved;\\n    mapping(address => mapping(address => bool)) public isApprovedForAll;\\n\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(\\n        address indexed from,\\n        address indexed to,\\n        uint256 indexed tokenId\\n    );\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(\\n        address indexed owner,\\n        address indexed approved,\\n        uint256 indexed tokenId\\n    );\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(\\n        address indexed owner,\\n        address indexed operator,\\n        bool approved\\n    );\\n\\n    function intialize(string memory _name, string memory _symbol)\\n        public\\n        initializer\\n    {\\n        __ERC721_init(_name, _symbol);\\n    }\\n\\n    function __ERC721_init(string memory _name, string memory _symbol)\\n        internal\\n        onlyInitializing\\n    {\\n        name = _name;\\n        symbol = _symbol;\\n    }\\n\\n    function approve(address _spender, uint256 _tokenId) public virtual {\\n        address owner = ownerOf[_tokenId];\\n\\n        require(\\n            msg.sender == owner || isApprovedForAll[owner][msg.sender],\\n            \\\"NOT_AUTHORIZED\\\"\\n        );\\n\\n        getApproved[_tokenId] = _spender;\\n\\n        emit Approval(owner, _spender, _tokenId);\\n    }\\n\\n    function setApprovalForAll(address _operator, bool _approved)\\n        public\\n        virtual\\n    {\\n        isApprovedForAll[msg.sender][_operator] = _approved;\\n\\n        emit ApprovalForAll(msg.sender, _operator, _approved);\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 id\\n    ) public virtual {\\n        _beforeTokenTransfer(from, to, id);\\n\\n        require(from == ownerOf[id], \\\"WRONG_FROM\\\");\\n\\n        require(to != ZERO_ADDRESS, \\\"INVALID_RECIPIENT\\\");\\n\\n        require(\\n            msg.sender == from ||\\n                isApprovedForAll[from][msg.sender] ||\\n                msg.sender == getApproved[id],\\n            \\\"NOT_AUTHORIZED\\\"\\n        );\\n\\n        // Underflow of the sender's balance is impossible because we check for\\n        // ownership above and the recipient's balance can't realistically overflow.\\n        unchecked {\\n            --balanceOf[from];\\n\\n            ++balanceOf[to];\\n        }\\n\\n        ownerOf[id] = to;\\n\\n        delete getApproved[id];\\n\\n        emit Transfer(from, to, id);\\n\\n        _afterTokenTransfer(from, to, id);\\n    }\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id\\n    ) public virtual {\\n        transferFrom(from, to, id);\\n\\n        require(\\n            to.code.length == 0 ||\\n                IERC721Receiver(to).onERC721Received(\\n                    msg.sender,\\n                    from,\\n                    id,\\n                    \\\"\\\"\\n                ) ==\\n                IERC721Receiver.onERC721Received.selector,\\n            \\\"UNSAFE_RECIPIENT\\\"\\n        );\\n    }\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        bytes calldata data\\n    ) public virtual {\\n        transferFrom(from, to, id);\\n\\n        require(\\n            to.code.length == 0 ||\\n                IERC721Receiver(to).onERC721Received(\\n                    msg.sender,\\n                    from,\\n                    id,\\n                    data\\n                ) ==\\n                IERC721Receiver.onERC721Received.selector,\\n            \\\"UNSAFE_RECIPIENT\\\"\\n        );\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        returns (bool)\\n    {\\n        return\\n            interfaceId == 0x01ffc9a7 || // ERC165 Interface ID for ERC165\\n            interfaceId == 0x80ac58cd || // ERC165 Interface ID for ERC721\\n            interfaceId == 0x5b5e139f; // ERC165 Interface ID for ERC721Metadata\\n    }\\n\\n    function _mint(address to, uint256 id) internal virtual {\\n        require(to != ZERO_ADDRESS, \\\"INVALID_RECIPIENT\\\");\\n\\n        require(ownerOf[id] == ZERO_ADDRESS, \\\"ALREADY_MINTED\\\");\\n\\n        // Counter overflow is incredibly unrealistic.\\n        unchecked {\\n            ++balanceOf[to];\\n        }\\n\\n        ownerOf[id] = to;\\n\\n        emit Transfer(ZERO_ADDRESS, to, id);\\n    }\\n\\n    function _burn(uint256 id) internal virtual {\\n        address owner = ownerOf[id];\\n\\n        require(owner != ZERO_ADDRESS, \\\"NOT_MINTED\\\");\\n\\n        // Ownership check above ensures no underflow.\\n        unchecked {\\n            --balanceOf[owner];\\n        }\\n\\n        delete ownerOf[id];\\n\\n        delete getApproved[id];\\n\\n        emit Transfer(owner, ZERO_ADDRESS, id);\\n    }\\n\\n    function _safeMint(address to, uint256 id) internal virtual {\\n        _mint(to, id);\\n\\n        require(\\n            to.code.length == 0 ||\\n                IERC721Receiver(to).onERC721Received(\\n                    msg.sender,\\n                    address(0),\\n                    id,\\n                    \\\"\\\"\\n                ) ==\\n                IERC721Receiver.onERC721Received.selector,\\n            \\\"UNSAFE_RECIPIENT\\\"\\n        );\\n    }\\n\\n    function _safeMint(\\n        address to,\\n        uint256 id,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, id);\\n\\n        require(\\n            to.code.length == 0 ||\\n                IERC721Receiver(to).onERC721Received(\\n                    msg.sender,\\n                    address(0),\\n                    id,\\n                    data\\n                ) ==\\n                IERC721Receiver.onERC721Received.selector,\\n            \\\"UNSAFE_RECIPIENT\\\"\\n        );\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address _from,\\n        address _to,\\n        uint256 _tokenId\\n    ) internal virtual {}\\n\\n    function _afterTokenTransfer(\\n        address _from,\\n        address _to,\\n        uint256 _tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xd48596c6ca02d24cf9e4f85f7c2e38d24c6b269b2d9e232500180357e30bf411\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50613730806100206000396000f3fe608060405234801561001057600080fd5b506004361061018e5760003560e01c80636352211e116100de578063a22cb46511610097578063e985e9c511610071578063e985e9c514610493578063f105a5f1146104c3578063f2fde38b146104df578063f3801cc5146104fb5761018e565b8063a22cb4651461042b578063b88d4fde14610447578063c87b56dd146104635761018e565b80636352211e146103675780636c0360eb1461039757806370a08231146103b5578063715018a6146103e55780638da5cb5b146103ef57806395d89b411461040d5761018e565b806342842e0e1161014b5780634cd88b76116101255780634cd88b76146102e157806353f23a27146102fd57806355f804b31461032d57806361bc221a146103495761018e565b806342842e0e1461027957806342966c6814610295578063494e2371146102b15761018e565b806301ffc9a71461019357806306fdde03146101c3578063081812fc146101e1578063095ea7b31461021157806323b872dd1461022d57806340c10f1914610249575b600080fd5b6101ad60048036038101906101a89190612290565b61052b565b6040516101ba91906122d8565b60405180910390f35b6101cb6105bd565b6040516101d89190612383565b60405180910390f35b6101fb60048036038101906101f691906123db565b61064b565b6040516102089190612449565b60405180910390f35b61022b60048036038101906102269190612490565b61067e565b005b610247600480360381019061024291906124d0565b610867565b005b610263600480360381019061025e9190612490565b610c78565b6040516102709190612532565b60405180910390f35b610293600480360381019061028e91906124d0565b610e5c565b005b6102af60048036038101906102aa91906123db565b610f94565b005b6102cb60048036038101906102c691906123db565b6110ef565b6040516102d89190612532565b60405180910390f35b6102fb60048036038101906102f69190612682565b611107565b005b61031760048036038101906103129190612490565b611251565b6040516103249190612532565b60405180910390f35b610347600480360381019061034291906126fa565b611276565b005b6103516112cb565b60405161035e9190612532565b60405180910390f35b610381600480360381019061037c91906123db565b6112d1565b60405161038e9190612449565b60405180910390f35b61039f611304565b6040516103ac9190612383565b60405180910390f35b6103cf60048036038101906103ca9190612743565b611392565b6040516103dc9190612532565b60405180910390f35b6103ed6113aa565b005b6103f76113be565b6040516104049190612449565b60405180910390f35b6104156113e8565b6040516104229190612383565b60405180910390f35b6104456004803603810190610440919061279c565b611476565b005b610461600480360381019061045c919061283c565b611573565b005b61047d600480360381019061047891906123db565b6116b1565b60405161048a9190612383565b60405180910390f35b6104ad60048036038101906104a891906128c4565b6116c3565b6040516104ba91906122d8565b60405180910390f35b6104dd60048036038101906104d89190612682565b6116f2565b005b6104f960048036038101906104f49190612743565b611834565b005b610515600480360381019061051091906123db565b6118b7565b6040516105229190612532565b60405180910390f35b60006301ffc9a760e01b827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061058657506380ac58cd60e01b827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806105b65750635b5e139f60e01b827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b9050919050565b606580546105ca90612933565b80601f01602080910402602001604051908101604052809291908181526020018280546105f690612933565b80156106435780601f1061061857610100808354040283529160200191610643565b820191906000526020600020905b81548152906001019060200180831161062657829003601f168201915b505050505081565b60696020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006067600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806107765750606a60008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b6107b5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107ac906129b0565b60405180910390fd5b826069600084815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550818373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a4505050565b6108728383836118cf565b6067600082815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614610913576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161090a90612a1c565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610982576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161097990612a88565b60405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480610a425750606a60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b80610aab57506069600082815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b610aea576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ae1906129b0565b60405180910390fd5b606860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600081546001900391905081905550606860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000815460010191905081905550816067600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506069600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4610c738383836118d4565b505050565b6000816000606e600083815260200190815260200160002054905060008114610cde57804210610cdd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cd490612b1a565b60405180910390fd5b5b610ce66118d9565b6000606f60008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008681526020019081526020016000205414610d79576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d7090612bac565b60405180910390fd5b6000606b6000815480929190610d8e90612bfb565b919050559050610d9e8682611957565b84606d60008381526020019081526020016000208190555080606f60008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008781526020019081526020016000208190555084818773ffffffffffffffffffffffffffffffffffffffff167fa8963a1df737598e6f80f76f857611b54c7e6642a3af609a14d9cee52e63dd7a60405160405180910390a480935050505092915050565b610e67838383610867565b60008273ffffffffffffffffffffffffffffffffffffffff163b1480610f50575063150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168273ffffffffffffffffffffffffffffffffffffffff1663150b7a023386856040518463ffffffff1660e01b8152600401610eec93929190612c7a565b6020604051808303816000875af1158015610f0b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f2f9190612cd9565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b610f8f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f8690612d52565b60405180910390fd5b505050565b3373ffffffffffffffffffffffffffffffffffffffff166067600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611035576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161102c90612dbe565b60405180910390fd5b61103e81611a8e565b6000606d6000838152602001908152602001600020549050606f60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082815260200190815260200160002060009055606d600083815260200190815260200160002054827fdc8e1a3d96514a8c52ee312fbf211f9a066d5fc7375d88038516cc227f84ffc060405160405180910390a35050565b606d6020528060005260406000206000915090505481565b60008060019054906101000a900460ff161590508080156111385750600160008054906101000a900460ff1660ff16105b80611165575061114730611c4f565b1580156111645750600160008054906101000a900460ff1660ff16145b5b6111a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161119b90612e50565b60405180910390fd5b60016000806101000a81548160ff021916908360ff16021790555080156111e1576001600060016101000a81548160ff0219169083151502179055505b6111e9611c72565b6111f38383611ccb565b801561124c5760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249860016040516112439190612ec2565b60405180910390a15b505050565b606f602052816000526040600020602052806000526040600020600091509150505481565b61127e6118d9565b7fc41b7cb64e5be01af4afc2641afc861432136270f4206b7773f229b658b9669981606c6040516112b0929190612f76565b60405180910390a180606c90816112c7919061313a565b5050565b606b5481565b60676020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b606c805461131190612933565b80601f016020809104026020016040519081016040528092919081815260200182805461133d90612933565b801561138a5780601f1061135f5761010080835404028352916020019161138a565b820191906000526020600020905b81548152906001019060200180831161136d57829003601f168201915b505050505081565b60686020528060005260406000206000915090505481565b6113b26118d9565b6113bc6000611d3e565b565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b606680546113f590612933565b80601f016020809104026020016040519081016040528092919081815260200182805461142190612933565b801561146e5780601f106114435761010080835404028352916020019161146e565b820191906000526020600020905b81548152906001019060200180831161145157829003601f168201915b505050505081565b80606a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c318360405161156791906122d8565b60405180910390a35050565b61157e858585610867565b60008473ffffffffffffffffffffffffffffffffffffffff163b148061166b575063150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168473ffffffffffffffffffffffffffffffffffffffff1663150b7a0233888787876040518663ffffffff1660e01b8152600401611607959493929190613239565b6020604051808303816000875af1158015611626573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061164a9190612cd9565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b6116aa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116a190612d52565b60405180910390fd5b5050505050565b60606116bc82611e04565b9050919050565b606a6020528160005260406000206020528060005260406000206000915091509054906101000a900460ff1681565b60008060019054906101000a900460ff161590508080156117235750600160008054906101000a900460ff1660ff16105b80611750575061173230611c4f565b15801561174f5750600160008054906101000a900460ff1660ff16145b5b61178f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161178690612e50565b60405180910390fd5b60016000806101000a81548160ff021916908360ff16021790555080156117cc576001600060016101000a81548160ff0219169083151502179055505b6117d68383611ccb565b801561182f5760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249860016040516118269190612ec2565b60405180910390a15b505050565b61183c6118d9565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036118ab576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118a2906132f9565b60405180910390fd5b6118b481611d3e565b50565b606e6020528060005260406000206000915090505481565b505050565b505050565b6118e1611e4b565b73ffffffffffffffffffffffffffffffffffffffff166118ff6113be565b73ffffffffffffffffffffffffffffffffffffffff1614611955576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161194c90613365565b60405180910390fd5b565b6119618282611e53565b60008273ffffffffffffffffffffffffffffffffffffffff163b1480611a4b575063150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168273ffffffffffffffffffffffffffffffffffffffff1663150b7a02336000856040518463ffffffff1660e01b81526004016119e793929190612c7a565b6020604051808303816000875af1158015611a06573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a2a9190612cd9565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b611a8a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a8190612d52565b60405180910390fd5b5050565b60006067600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611b35576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b2c906133d1565b60405180910390fd5b606860008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000815460019003919050819055506067600083815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556069600083815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905581600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600060019054906101000a900460ff16611cc1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cb890613463565b60405180910390fd5b611cc9612063565b565b600060019054906101000a900460ff16611d1a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d1190613463565b60405180910390fd5b8160659081611d29919061313a565b508060669081611d39919061313a565b505050565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6060606c611e24606d6000858152602001908152602001600020546120c4565b604051602001611e35929190613542565b6040516020818303038152906040529050919050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611ec2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611eb990612a88565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff166067600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611f64576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f5b906135b2565b60405180910390fd5b606860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000815460010191905081905550816067600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050565b600060019054906101000a900460ff166120b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120a990613463565b60405180910390fd5b6120c26120bd611e4b565b611d3e565b565b60606000820361210b576040518060400160405280600181526020017f3000000000000000000000000000000000000000000000000000000000000000815250905061221f565b600082905060005b6000821461213d57808061212690612bfb565b915050600a826121369190613601565b9150612113565b60008167ffffffffffffffff81111561215957612158612557565b5b6040519080825280601f01601f19166020018201604052801561218b5781602001600182028036833780820191505090505b5090505b60008514612218576001826121a49190613632565b9150600a856121b39190613666565b60306121bf9190613697565b60f81b8183815181106121d5576121d46136cb565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a856122119190613601565b945061218f565b8093505050505b919050565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61226d81612238565b811461227857600080fd5b50565b60008135905061228a81612264565b92915050565b6000602082840312156122a6576122a561222e565b5b60006122b48482850161227b565b91505092915050565b60008115159050919050565b6122d2816122bd565b82525050565b60006020820190506122ed60008301846122c9565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561232d578082015181840152602081019050612312565b60008484015250505050565b6000601f19601f8301169050919050565b6000612355826122f3565b61235f81856122fe565b935061236f81856020860161230f565b61237881612339565b840191505092915050565b6000602082019050818103600083015261239d818461234a565b905092915050565b6000819050919050565b6123b8816123a5565b81146123c357600080fd5b50565b6000813590506123d5816123af565b92915050565b6000602082840312156123f1576123f061222e565b5b60006123ff848285016123c6565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061243382612408565b9050919050565b61244381612428565b82525050565b600060208201905061245e600083018461243a565b92915050565b61246d81612428565b811461247857600080fd5b50565b60008135905061248a81612464565b92915050565b600080604083850312156124a7576124a661222e565b5b60006124b58582860161247b565b92505060206124c6858286016123c6565b9150509250929050565b6000806000606084860312156124e9576124e861222e565b5b60006124f78682870161247b565b93505060206125088682870161247b565b9250506040612519868287016123c6565b9150509250925092565b61252c816123a5565b82525050565b60006020820190506125476000830184612523565b92915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61258f82612339565b810181811067ffffffffffffffff821117156125ae576125ad612557565b5b80604052505050565b60006125c1612224565b90506125cd8282612586565b919050565b600067ffffffffffffffff8211156125ed576125ec612557565b5b6125f682612339565b9050602081019050919050565b82818337600083830152505050565b6000612625612620846125d2565b6125b7565b90508281526020810184848401111561264157612640612552565b5b61264c848285612603565b509392505050565b600082601f8301126126695761266861254d565b5b8135612679848260208601612612565b91505092915050565b600080604083850312156126995761269861222e565b5b600083013567ffffffffffffffff8111156126b7576126b6612233565b5b6126c385828601612654565b925050602083013567ffffffffffffffff8111156126e4576126e3612233565b5b6126f085828601612654565b9150509250929050565b6000602082840312156127105761270f61222e565b5b600082013567ffffffffffffffff81111561272e5761272d612233565b5b61273a84828501612654565b91505092915050565b6000602082840312156127595761275861222e565b5b60006127678482850161247b565b91505092915050565b612779816122bd565b811461278457600080fd5b50565b60008135905061279681612770565b92915050565b600080604083850312156127b3576127b261222e565b5b60006127c18582860161247b565b92505060206127d285828601612787565b9150509250929050565b600080fd5b600080fd5b60008083601f8401126127fc576127fb61254d565b5b8235905067ffffffffffffffff811115612819576128186127dc565b5b602083019150836001820283011115612835576128346127e1565b5b9250929050565b6000806000806000608086880312156128585761285761222e565b5b60006128668882890161247b565b95505060206128778882890161247b565b9450506040612888888289016123c6565b935050606086013567ffffffffffffffff8111156128a9576128a8612233565b5b6128b5888289016127e6565b92509250509295509295909350565b600080604083850312156128db576128da61222e565b5b60006128e98582860161247b565b92505060206128fa8582860161247b565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061294b57607f821691505b60208210810361295e5761295d612904565b5b50919050565b7f4e4f545f415554484f52495a4544000000000000000000000000000000000000600082015250565b600061299a600e836122fe565b91506129a582612964565b602082019050919050565b600060208201905081810360008301526129c98161298d565b9050919050565b7f57524f4e475f46524f4d00000000000000000000000000000000000000000000600082015250565b6000612a06600a836122fe565b9150612a11826129d0565b602082019050919050565b60006020820190508181036000830152612a35816129f9565b9050919050565b7f494e56414c49445f524543495049454e54000000000000000000000000000000600082015250565b6000612a726011836122fe565b9150612a7d82612a3c565b602082019050919050565b60006020820190508181036000830152612aa181612a65565b9050919050565b7f436f757273654e46543a204e4654206973206e6f206c6f6e676572206176616960008201527f6c61626c6520666f72206d696e74000000000000000000000000000000000000602082015250565b6000612b04602e836122fe565b9150612b0f82612aa8565b604082019050919050565b60006020820190508181036000830152612b3381612af7565b9050919050565b7f436f757273654e46543a207573657220616c7265616479206d696e746564207460008201527f68697320636f7572736500000000000000000000000000000000000000000000602082015250565b6000612b96602a836122fe565b9150612ba182612b3a565b604082019050919050565b60006020820190508181036000830152612bc581612b89565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612c06826123a5565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203612c3857612c37612bcc565b5b600182019050919050565b600082825260208201905092915050565b50565b6000612c64600083612c43565b9150612c6f82612c54565b600082019050919050565b6000608082019050612c8f600083018661243a565b612c9c602083018561243a565b612ca96040830184612523565b8181036060830152612cba81612c57565b9050949350505050565b600081519050612cd381612264565b92915050565b600060208284031215612cef57612cee61222e565b5b6000612cfd84828501612cc4565b91505092915050565b7f554e534146455f524543495049454e5400000000000000000000000000000000600082015250565b6000612d3c6010836122fe565b9150612d4782612d06565b602082019050919050565b60006020820190508181036000830152612d6b81612d2f565b9050919050565b7f4f6e6c792074686520746f6b656e206f776e65722063616e206275726e000000600082015250565b6000612da8601d836122fe565b9150612db382612d72565b602082019050919050565b60006020820190508181036000830152612dd781612d9b565b9050919050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b6000612e3a602e836122fe565b9150612e4582612dde565b604082019050919050565b60006020820190508181036000830152612e6981612e2d565b9050919050565b6000819050919050565b600060ff82169050919050565b6000819050919050565b6000612eac612ea7612ea284612e70565b612e87565b612e7a565b9050919050565b612ebc81612e91565b82525050565b6000602082019050612ed76000830184612eb3565b92915050565b60008190508160005260206000209050919050565b60008154612eff81612933565b612f0981866122fe565b94506001821660008114612f245760018114612f3a57612f6d565b60ff198316865281151560200286019350612f6d565b612f4385612edd565b60005b83811015612f6557815481890152600182019150602081019050612f46565b808801955050505b50505092915050565b60006040820190508181036000830152612f90818561234a565b90508181036020830152612fa48184612ef2565b90509392505050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302612ffa7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82612fbd565b6130048683612fbd565b95508019841693508086168417925050509392505050565b600061303761303261302d846123a5565b612e87565b6123a5565b9050919050565b6000819050919050565b6130518361301c565b61306561305d8261303e565b848454612fca565b825550505050565b600090565b61307a61306d565b613085818484613048565b505050565b5b818110156130a95761309e600082613072565b60018101905061308b565b5050565b601f8211156130ee576130bf81612edd565b6130c884612fad565b810160208510156130d7578190505b6130eb6130e385612fad565b83018261308a565b50505b505050565b600082821c905092915050565b6000613111600019846008026130f3565b1980831691505092915050565b600061312a8383613100565b9150826002028217905092915050565b613143826122f3565b67ffffffffffffffff81111561315c5761315b612557565b5b6131668254612933565b6131718282856130ad565b600060209050601f8311600181146131a45760008415613192578287015190505b61319c858261311e565b865550613204565b601f1984166131b286612edd565b60005b828110156131da578489015182556001820191506020850194506020810190506131b5565b868310156131f757848901516131f3601f891682613100565b8355505b6001600288020188555050505b505050505050565b60006132188385612c43565b9350613225838584612603565b61322e83612339565b840190509392505050565b600060808201905061324e600083018861243a565b61325b602083018761243a565b6132686040830186612523565b818103606083015261327b81848661320c565b90509695505050505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006132e36026836122fe565b91506132ee82613287565b604082019050919050565b60006020820190508181036000830152613312816132d6565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b600061334f6020836122fe565b915061335a82613319565b602082019050919050565b6000602082019050818103600083015261337e81613342565b9050919050565b7f4e4f545f4d494e54454400000000000000000000000000000000000000000000600082015250565b60006133bb600a836122fe565b91506133c682613385565b602082019050919050565b600060208201905081810360008301526133ea816133ae565b9050919050565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b600061344d602b836122fe565b9150613458826133f1565b604082019050919050565b6000602082019050818103600083015261347c81613440565b9050919050565b600081905092915050565b6000815461349b81612933565b6134a58186613483565b945060018216600081146134c057600181146134d557613508565b60ff1983168652811515820286019350613508565b6134de85612edd565b60005b83811015613500578154818901526001820191506020810190506134e1565b838801955050505b50505092915050565b600061351c826122f3565b6135268185613483565b935061353681856020860161230f565b80840191505092915050565b600061354e828561348e565b915061355a8284613511565b91508190509392505050565b7f414c52454144595f4d494e544544000000000000000000000000000000000000600082015250565b600061359c600e836122fe565b91506135a782613566565b602082019050919050565b600060208201905081810360008301526135cb8161358f565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061360c826123a5565b9150613617836123a5565b925082613627576136266135d2565b5b828204905092915050565b600061363d826123a5565b9150613648836123a5565b92508282039050818111156136605761365f612bcc565b5b92915050565b6000613671826123a5565b915061367c836123a5565b92508261368c5761368b6135d2565b5b828206905092915050565b60006136a2826123a5565b91506136ad836123a5565b92508282019050808211156136c5576136c4612bcc565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fdfea264697066735822122037aaa23c1064e3783906824cdafff62f41b4ade23dab63a709fd32c5467d1ab464736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061018e5760003560e01c80636352211e116100de578063a22cb46511610097578063e985e9c511610071578063e985e9c514610493578063f105a5f1146104c3578063f2fde38b146104df578063f3801cc5146104fb5761018e565b8063a22cb4651461042b578063b88d4fde14610447578063c87b56dd146104635761018e565b80636352211e146103675780636c0360eb1461039757806370a08231146103b5578063715018a6146103e55780638da5cb5b146103ef57806395d89b411461040d5761018e565b806342842e0e1161014b5780634cd88b76116101255780634cd88b76146102e157806353f23a27146102fd57806355f804b31461032d57806361bc221a146103495761018e565b806342842e0e1461027957806342966c6814610295578063494e2371146102b15761018e565b806301ffc9a71461019357806306fdde03146101c3578063081812fc146101e1578063095ea7b31461021157806323b872dd1461022d57806340c10f1914610249575b600080fd5b6101ad60048036038101906101a89190612290565b61052b565b6040516101ba91906122d8565b60405180910390f35b6101cb6105bd565b6040516101d89190612383565b60405180910390f35b6101fb60048036038101906101f691906123db565b61064b565b6040516102089190612449565b60405180910390f35b61022b60048036038101906102269190612490565b61067e565b005b610247600480360381019061024291906124d0565b610867565b005b610263600480360381019061025e9190612490565b610c78565b6040516102709190612532565b60405180910390f35b610293600480360381019061028e91906124d0565b610e5c565b005b6102af60048036038101906102aa91906123db565b610f94565b005b6102cb60048036038101906102c691906123db565b6110ef565b6040516102d89190612532565b60405180910390f35b6102fb60048036038101906102f69190612682565b611107565b005b61031760048036038101906103129190612490565b611251565b6040516103249190612532565b60405180910390f35b610347600480360381019061034291906126fa565b611276565b005b6103516112cb565b60405161035e9190612532565b60405180910390f35b610381600480360381019061037c91906123db565b6112d1565b60405161038e9190612449565b60405180910390f35b61039f611304565b6040516103ac9190612383565b60405180910390f35b6103cf60048036038101906103ca9190612743565b611392565b6040516103dc9190612532565b60405180910390f35b6103ed6113aa565b005b6103f76113be565b6040516104049190612449565b60405180910390f35b6104156113e8565b6040516104229190612383565b60405180910390f35b6104456004803603810190610440919061279c565b611476565b005b610461600480360381019061045c919061283c565b611573565b005b61047d600480360381019061047891906123db565b6116b1565b60405161048a9190612383565b60405180910390f35b6104ad60048036038101906104a891906128c4565b6116c3565b6040516104ba91906122d8565b60405180910390f35b6104dd60048036038101906104d89190612682565b6116f2565b005b6104f960048036038101906104f49190612743565b611834565b005b610515600480360381019061051091906123db565b6118b7565b6040516105229190612532565b60405180910390f35b60006301ffc9a760e01b827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061058657506380ac58cd60e01b827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806105b65750635b5e139f60e01b827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b9050919050565b606580546105ca90612933565b80601f01602080910402602001604051908101604052809291908181526020018280546105f690612933565b80156106435780601f1061061857610100808354040283529160200191610643565b820191906000526020600020905b81548152906001019060200180831161062657829003601f168201915b505050505081565b60696020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006067600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806107765750606a60008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b6107b5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107ac906129b0565b60405180910390fd5b826069600084815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550818373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a4505050565b6108728383836118cf565b6067600082815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614610913576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161090a90612a1c565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610982576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161097990612a88565b60405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480610a425750606a60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b80610aab57506069600082815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b610aea576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ae1906129b0565b60405180910390fd5b606860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600081546001900391905081905550606860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000815460010191905081905550816067600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506069600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4610c738383836118d4565b505050565b6000816000606e600083815260200190815260200160002054905060008114610cde57804210610cdd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cd490612b1a565b60405180910390fd5b5b610ce66118d9565b6000606f60008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008681526020019081526020016000205414610d79576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d7090612bac565b60405180910390fd5b6000606b6000815480929190610d8e90612bfb565b919050559050610d9e8682611957565b84606d60008381526020019081526020016000208190555080606f60008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008781526020019081526020016000208190555084818773ffffffffffffffffffffffffffffffffffffffff167fa8963a1df737598e6f80f76f857611b54c7e6642a3af609a14d9cee52e63dd7a60405160405180910390a480935050505092915050565b610e67838383610867565b60008273ffffffffffffffffffffffffffffffffffffffff163b1480610f50575063150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168273ffffffffffffffffffffffffffffffffffffffff1663150b7a023386856040518463ffffffff1660e01b8152600401610eec93929190612c7a565b6020604051808303816000875af1158015610f0b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f2f9190612cd9565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b610f8f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f8690612d52565b60405180910390fd5b505050565b3373ffffffffffffffffffffffffffffffffffffffff166067600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611035576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161102c90612dbe565b60405180910390fd5b61103e81611a8e565b6000606d6000838152602001908152602001600020549050606f60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082815260200190815260200160002060009055606d600083815260200190815260200160002054827fdc8e1a3d96514a8c52ee312fbf211f9a066d5fc7375d88038516cc227f84ffc060405160405180910390a35050565b606d6020528060005260406000206000915090505481565b60008060019054906101000a900460ff161590508080156111385750600160008054906101000a900460ff1660ff16105b80611165575061114730611c4f565b1580156111645750600160008054906101000a900460ff1660ff16145b5b6111a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161119b90612e50565b60405180910390fd5b60016000806101000a81548160ff021916908360ff16021790555080156111e1576001600060016101000a81548160ff0219169083151502179055505b6111e9611c72565b6111f38383611ccb565b801561124c5760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249860016040516112439190612ec2565b60405180910390a15b505050565b606f602052816000526040600020602052806000526040600020600091509150505481565b61127e6118d9565b7fc41b7cb64e5be01af4afc2641afc861432136270f4206b7773f229b658b9669981606c6040516112b0929190612f76565b60405180910390a180606c90816112c7919061313a565b5050565b606b5481565b60676020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b606c805461131190612933565b80601f016020809104026020016040519081016040528092919081815260200182805461133d90612933565b801561138a5780601f1061135f5761010080835404028352916020019161138a565b820191906000526020600020905b81548152906001019060200180831161136d57829003601f168201915b505050505081565b60686020528060005260406000206000915090505481565b6113b26118d9565b6113bc6000611d3e565b565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b606680546113f590612933565b80601f016020809104026020016040519081016040528092919081815260200182805461142190612933565b801561146e5780601f106114435761010080835404028352916020019161146e565b820191906000526020600020905b81548152906001019060200180831161145157829003601f168201915b505050505081565b80606a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c318360405161156791906122d8565b60405180910390a35050565b61157e858585610867565b60008473ffffffffffffffffffffffffffffffffffffffff163b148061166b575063150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168473ffffffffffffffffffffffffffffffffffffffff1663150b7a0233888787876040518663ffffffff1660e01b8152600401611607959493929190613239565b6020604051808303816000875af1158015611626573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061164a9190612cd9565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b6116aa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116a190612d52565b60405180910390fd5b5050505050565b60606116bc82611e04565b9050919050565b606a6020528160005260406000206020528060005260406000206000915091509054906101000a900460ff1681565b60008060019054906101000a900460ff161590508080156117235750600160008054906101000a900460ff1660ff16105b80611750575061173230611c4f565b15801561174f5750600160008054906101000a900460ff1660ff16145b5b61178f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161178690612e50565b60405180910390fd5b60016000806101000a81548160ff021916908360ff16021790555080156117cc576001600060016101000a81548160ff0219169083151502179055505b6117d68383611ccb565b801561182f5760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249860016040516118269190612ec2565b60405180910390a15b505050565b61183c6118d9565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036118ab576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118a2906132f9565b60405180910390fd5b6118b481611d3e565b50565b606e6020528060005260406000206000915090505481565b505050565b505050565b6118e1611e4b565b73ffffffffffffffffffffffffffffffffffffffff166118ff6113be565b73ffffffffffffffffffffffffffffffffffffffff1614611955576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161194c90613365565b60405180910390fd5b565b6119618282611e53565b60008273ffffffffffffffffffffffffffffffffffffffff163b1480611a4b575063150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168273ffffffffffffffffffffffffffffffffffffffff1663150b7a02336000856040518463ffffffff1660e01b81526004016119e793929190612c7a565b6020604051808303816000875af1158015611a06573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a2a9190612cd9565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b611a8a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a8190612d52565b60405180910390fd5b5050565b60006067600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611b35576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b2c906133d1565b60405180910390fd5b606860008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000815460019003919050819055506067600083815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556069600083815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905581600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600060019054906101000a900460ff16611cc1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cb890613463565b60405180910390fd5b611cc9612063565b565b600060019054906101000a900460ff16611d1a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d1190613463565b60405180910390fd5b8160659081611d29919061313a565b508060669081611d39919061313a565b505050565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6060606c611e24606d6000858152602001908152602001600020546120c4565b604051602001611e35929190613542565b6040516020818303038152906040529050919050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611ec2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611eb990612a88565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff166067600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611f64576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f5b906135b2565b60405180910390fd5b606860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000815460010191905081905550816067600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050565b600060019054906101000a900460ff166120b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120a990613463565b60405180910390fd5b6120c26120bd611e4b565b611d3e565b565b60606000820361210b576040518060400160405280600181526020017f3000000000000000000000000000000000000000000000000000000000000000815250905061221f565b600082905060005b6000821461213d57808061212690612bfb565b915050600a826121369190613601565b9150612113565b60008167ffffffffffffffff81111561215957612158612557565b5b6040519080825280601f01601f19166020018201604052801561218b5781602001600182028036833780820191505090505b5090505b60008514612218576001826121a49190613632565b9150600a856121b39190613666565b60306121bf9190613697565b60f81b8183815181106121d5576121d46136cb565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a856122119190613601565b945061218f565b8093505050505b919050565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61226d81612238565b811461227857600080fd5b50565b60008135905061228a81612264565b92915050565b6000602082840312156122a6576122a561222e565b5b60006122b48482850161227b565b91505092915050565b60008115159050919050565b6122d2816122bd565b82525050565b60006020820190506122ed60008301846122c9565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561232d578082015181840152602081019050612312565b60008484015250505050565b6000601f19601f8301169050919050565b6000612355826122f3565b61235f81856122fe565b935061236f81856020860161230f565b61237881612339565b840191505092915050565b6000602082019050818103600083015261239d818461234a565b905092915050565b6000819050919050565b6123b8816123a5565b81146123c357600080fd5b50565b6000813590506123d5816123af565b92915050565b6000602082840312156123f1576123f061222e565b5b60006123ff848285016123c6565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061243382612408565b9050919050565b61244381612428565b82525050565b600060208201905061245e600083018461243a565b92915050565b61246d81612428565b811461247857600080fd5b50565b60008135905061248a81612464565b92915050565b600080604083850312156124a7576124a661222e565b5b60006124b58582860161247b565b92505060206124c6858286016123c6565b9150509250929050565b6000806000606084860312156124e9576124e861222e565b5b60006124f78682870161247b565b93505060206125088682870161247b565b9250506040612519868287016123c6565b9150509250925092565b61252c816123a5565b82525050565b60006020820190506125476000830184612523565b92915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61258f82612339565b810181811067ffffffffffffffff821117156125ae576125ad612557565b5b80604052505050565b60006125c1612224565b90506125cd8282612586565b919050565b600067ffffffffffffffff8211156125ed576125ec612557565b5b6125f682612339565b9050602081019050919050565b82818337600083830152505050565b6000612625612620846125d2565b6125b7565b90508281526020810184848401111561264157612640612552565b5b61264c848285612603565b509392505050565b600082601f8301126126695761266861254d565b5b8135612679848260208601612612565b91505092915050565b600080604083850312156126995761269861222e565b5b600083013567ffffffffffffffff8111156126b7576126b6612233565b5b6126c385828601612654565b925050602083013567ffffffffffffffff8111156126e4576126e3612233565b5b6126f085828601612654565b9150509250929050565b6000602082840312156127105761270f61222e565b5b600082013567ffffffffffffffff81111561272e5761272d612233565b5b61273a84828501612654565b91505092915050565b6000602082840312156127595761275861222e565b5b60006127678482850161247b565b91505092915050565b612779816122bd565b811461278457600080fd5b50565b60008135905061279681612770565b92915050565b600080604083850312156127b3576127b261222e565b5b60006127c18582860161247b565b92505060206127d285828601612787565b9150509250929050565b600080fd5b600080fd5b60008083601f8401126127fc576127fb61254d565b5b8235905067ffffffffffffffff811115612819576128186127dc565b5b602083019150836001820283011115612835576128346127e1565b5b9250929050565b6000806000806000608086880312156128585761285761222e565b5b60006128668882890161247b565b95505060206128778882890161247b565b9450506040612888888289016123c6565b935050606086013567ffffffffffffffff8111156128a9576128a8612233565b5b6128b5888289016127e6565b92509250509295509295909350565b600080604083850312156128db576128da61222e565b5b60006128e98582860161247b565b92505060206128fa8582860161247b565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061294b57607f821691505b60208210810361295e5761295d612904565b5b50919050565b7f4e4f545f415554484f52495a4544000000000000000000000000000000000000600082015250565b600061299a600e836122fe565b91506129a582612964565b602082019050919050565b600060208201905081810360008301526129c98161298d565b9050919050565b7f57524f4e475f46524f4d00000000000000000000000000000000000000000000600082015250565b6000612a06600a836122fe565b9150612a11826129d0565b602082019050919050565b60006020820190508181036000830152612a35816129f9565b9050919050565b7f494e56414c49445f524543495049454e54000000000000000000000000000000600082015250565b6000612a726011836122fe565b9150612a7d82612a3c565b602082019050919050565b60006020820190508181036000830152612aa181612a65565b9050919050565b7f436f757273654e46543a204e4654206973206e6f206c6f6e676572206176616960008201527f6c61626c6520666f72206d696e74000000000000000000000000000000000000602082015250565b6000612b04602e836122fe565b9150612b0f82612aa8565b604082019050919050565b60006020820190508181036000830152612b3381612af7565b9050919050565b7f436f757273654e46543a207573657220616c7265616479206d696e746564207460008201527f68697320636f7572736500000000000000000000000000000000000000000000602082015250565b6000612b96602a836122fe565b9150612ba182612b3a565b604082019050919050565b60006020820190508181036000830152612bc581612b89565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612c06826123a5565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203612c3857612c37612bcc565b5b600182019050919050565b600082825260208201905092915050565b50565b6000612c64600083612c43565b9150612c6f82612c54565b600082019050919050565b6000608082019050612c8f600083018661243a565b612c9c602083018561243a565b612ca96040830184612523565b8181036060830152612cba81612c57565b9050949350505050565b600081519050612cd381612264565b92915050565b600060208284031215612cef57612cee61222e565b5b6000612cfd84828501612cc4565b91505092915050565b7f554e534146455f524543495049454e5400000000000000000000000000000000600082015250565b6000612d3c6010836122fe565b9150612d4782612d06565b602082019050919050565b60006020820190508181036000830152612d6b81612d2f565b9050919050565b7f4f6e6c792074686520746f6b656e206f776e65722063616e206275726e000000600082015250565b6000612da8601d836122fe565b9150612db382612d72565b602082019050919050565b60006020820190508181036000830152612dd781612d9b565b9050919050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b6000612e3a602e836122fe565b9150612e4582612dde565b604082019050919050565b60006020820190508181036000830152612e6981612e2d565b9050919050565b6000819050919050565b600060ff82169050919050565b6000819050919050565b6000612eac612ea7612ea284612e70565b612e87565b612e7a565b9050919050565b612ebc81612e91565b82525050565b6000602082019050612ed76000830184612eb3565b92915050565b60008190508160005260206000209050919050565b60008154612eff81612933565b612f0981866122fe565b94506001821660008114612f245760018114612f3a57612f6d565b60ff198316865281151560200286019350612f6d565b612f4385612edd565b60005b83811015612f6557815481890152600182019150602081019050612f46565b808801955050505b50505092915050565b60006040820190508181036000830152612f90818561234a565b90508181036020830152612fa48184612ef2565b90509392505050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302612ffa7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82612fbd565b6130048683612fbd565b95508019841693508086168417925050509392505050565b600061303761303261302d846123a5565b612e87565b6123a5565b9050919050565b6000819050919050565b6130518361301c565b61306561305d8261303e565b848454612fca565b825550505050565b600090565b61307a61306d565b613085818484613048565b505050565b5b818110156130a95761309e600082613072565b60018101905061308b565b5050565b601f8211156130ee576130bf81612edd565b6130c884612fad565b810160208510156130d7578190505b6130eb6130e385612fad565b83018261308a565b50505b505050565b600082821c905092915050565b6000613111600019846008026130f3565b1980831691505092915050565b600061312a8383613100565b9150826002028217905092915050565b613143826122f3565b67ffffffffffffffff81111561315c5761315b612557565b5b6131668254612933565b6131718282856130ad565b600060209050601f8311600181146131a45760008415613192578287015190505b61319c858261311e565b865550613204565b601f1984166131b286612edd565b60005b828110156131da578489015182556001820191506020850194506020810190506131b5565b868310156131f757848901516131f3601f891682613100565b8355505b6001600288020188555050505b505050505050565b60006132188385612c43565b9350613225838584612603565b61322e83612339565b840190509392505050565b600060808201905061324e600083018861243a565b61325b602083018761243a565b6132686040830186612523565b818103606083015261327b81848661320c565b90509695505050505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006132e36026836122fe565b91506132ee82613287565b604082019050919050565b60006020820190508181036000830152613312816132d6565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b600061334f6020836122fe565b915061335a82613319565b602082019050919050565b6000602082019050818103600083015261337e81613342565b9050919050565b7f4e4f545f4d494e54454400000000000000000000000000000000000000000000600082015250565b60006133bb600a836122fe565b91506133c682613385565b602082019050919050565b600060208201905081810360008301526133ea816133ae565b9050919050565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b600061344d602b836122fe565b9150613458826133f1565b604082019050919050565b6000602082019050818103600083015261347c81613440565b9050919050565b600081905092915050565b6000815461349b81612933565b6134a58186613483565b945060018216600081146134c057600181146134d557613508565b60ff1983168652811515820286019350613508565b6134de85612edd565b60005b83811015613500578154818901526001820191506020810190506134e1565b838801955050505b50505092915050565b600061351c826122f3565b6135268185613483565b935061353681856020860161230f565b80840191505092915050565b600061354e828561348e565b915061355a8284613511565b91508190509392505050565b7f414c52454144595f4d494e544544000000000000000000000000000000000000600082015250565b600061359c600e836122fe565b91506135a782613566565b602082019050919050565b600060208201905081810360008301526135cb8161358f565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061360c826123a5565b9150613617836123a5565b925082613627576136266135d2565b5b828204905092915050565b600061363d826123a5565b9150613648836123a5565b92508282039050818111156136605761365f612bcc565b5b92915050565b6000613671826123a5565b915061367c836123a5565b92508261368c5761368b6135d2565b5b828206905092915050565b60006136a2826123a5565b91506136ad836123a5565b92508282019050808211156136c5576136c4612bcc565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fdfea264697066735822122037aaa23c1064e3783906824cdafff62f41b4ade23dab63a709fd32c5467d1ab464736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 138,
        "contract": "contracts/badge/CourseNFT.sol:CourseNFT",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 141,
        "contract": "contracts/badge/CourseNFT.sol:CourseNFT",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 752,
        "contract": "contracts/badge/CourseNFT.sol:CourseNFT",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/badge/CourseNFT.sol:CourseNFT",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 130,
        "contract": "contracts/badge/CourseNFT.sol:CourseNFT",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 1564,
        "contract": "contracts/badge/CourseNFT.sol:CourseNFT",
        "label": "name",
        "offset": 0,
        "slot": "101",
        "type": "t_string_storage"
      },
      {
        "astId": 1566,
        "contract": "contracts/badge/CourseNFT.sol:CourseNFT",
        "label": "symbol",
        "offset": 0,
        "slot": "102",
        "type": "t_string_storage"
      },
      {
        "astId": 1570,
        "contract": "contracts/badge/CourseNFT.sol:CourseNFT",
        "label": "ownerOf",
        "offset": 0,
        "slot": "103",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 1574,
        "contract": "contracts/badge/CourseNFT.sol:CourseNFT",
        "label": "balanceOf",
        "offset": 0,
        "slot": "104",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1578,
        "contract": "contracts/badge/CourseNFT.sol:CourseNFT",
        "label": "getApproved",
        "offset": 0,
        "slot": "105",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 1584,
        "contract": "contracts/badge/CourseNFT.sol:CourseNFT",
        "label": "isApprovedForAll",
        "offset": 0,
        "slot": "106",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1011,
        "contract": "contracts/badge/CourseNFT.sol:CourseNFT",
        "label": "counter",
        "offset": 0,
        "slot": "107",
        "type": "t_uint256"
      },
      {
        "astId": 1013,
        "contract": "contracts/badge/CourseNFT.sol:CourseNFT",
        "label": "baseURI",
        "offset": 0,
        "slot": "108",
        "type": "t_string_storage"
      },
      {
        "astId": 1017,
        "contract": "contracts/badge/CourseNFT.sol:CourseNFT",
        "label": "courseIds",
        "offset": 0,
        "slot": "109",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 1021,
        "contract": "contracts/badge/CourseNFT.sol:CourseNFT",
        "label": "expiryForCourses",
        "offset": 0,
        "slot": "110",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 1027,
        "contract": "contracts/badge/CourseNFT.sol:CourseNFT",
        "label": "userMinted",
        "offset": 0,
        "slot": "111",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}