{
  "address": "0x852d0fa8a53c5FE484A396d5b1f476a7f137Af77",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "counter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        }
      ],
      "name": "intialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "onERC721Linked",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_baseURI",
          "type": "string"
        }
      ],
      "name": "setBaseURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "soulBoundTokenId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x8ea6e5f2bda8fc68b36e63146d86a4d882d4dbc68712e428a3a8d713aa4cdc1f",
  "receipt": {
    "to": null,
    "from": "0x53F5339C69d940242dC32D89637824459c96D67E",
    "contractAddress": "0x852d0fa8a53c5FE484A396d5b1f476a7f137Af77",
    "transactionIndex": 282,
    "gasUsed": "2937171",
    "logsBloom": "0x
    "blockHash": "0x02df7cdde3b97bc1333b6bdf2417fe7e5dc7e6fcc2802632f410caf17440e94c",
    "transactionHash": "0x8ea6e5f2bda8fc68b36e63146d86a4d882d4dbc68712e428a3a8d713aa4cdc1f",
    "logs": [],
    "blockNumber": 15782745,
    "cumulativeGasUsed": "29212858",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "76515367593e2f9129486a2f6ae93b55",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"counter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"intialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"onERC721Linked\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_baseURI\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"soulBoundTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"Profile NFT\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"mint(address)\":{\"notice\":\"Mint a profile NFT for a user         It is minted by the owner so user no need for gas fee\"}},\"notice\":\"This is the user profile NFT on blockchain academy platform         It is a soul bound token, which means it         - can not be transferred         - can not mint more than one for each user         - can be burned (will have side effects)         Profile NFT can link other NFTs to it, for example, after a user finished a course / task,         or attended some events.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/profile/ProfileToken.sol\":\"ProfileToken\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0-rc.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initialized`\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initializing`\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0xf2efdd01f01f127e8b631675a359cd8cabfbcdcd2e8587ecf906181bcd667bc9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0-rc.1) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xabed77589961adbaaa36817e0914bcbe4c447311c9451bf3fc9b073c1f092d8d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"contracts/base/ERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title ERC721 Token Contract\\r\\n *\\r\\n * @notice This contract is mainly based on solmate/ERC721.sol\\r\\n *         By default, not implement IERC721Metadata\\r\\n */\\r\\nabstract contract ERC721Upgradeable is Initializable {\\r\\n    address internal constant ZERO_ADDRESS = address(0);\\r\\n\\r\\n    string public name;\\r\\n    string public symbol;\\r\\n\\r\\n    mapping(uint256 => address) public ownerOf;\\r\\n    mapping(address => uint256) public balanceOf;\\r\\n\\r\\n    mapping(uint256 => address) public getApproved;\\r\\n    mapping(address => mapping(address => bool)) public isApprovedForAll;\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\r\\n     */\\r\\n    event Transfer(\\r\\n        address indexed from,\\r\\n        address indexed to,\\r\\n        uint256 indexed tokenId\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\r\\n     */\\r\\n    event Approval(\\r\\n        address indexed owner,\\r\\n        address indexed approved,\\r\\n        uint256 indexed tokenId\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\r\\n     */\\r\\n    event ApprovalForAll(\\r\\n        address indexed owner,\\r\\n        address indexed operator,\\r\\n        bool approved\\r\\n    );\\r\\n\\r\\n    function intialize(string memory _name, string memory _symbol)\\r\\n        public\\r\\n        initializer\\r\\n    {\\r\\n        __ERC721_init(_name, _symbol);\\r\\n    }\\r\\n\\r\\n    function __ERC721_init(string memory _name, string memory _symbol)\\r\\n        internal\\r\\n        onlyInitializing\\r\\n    {\\r\\n        name = _name;\\r\\n        symbol = _symbol;\\r\\n    }\\r\\n\\r\\n    function approve(address _spender, uint256 _tokenId) public virtual {\\r\\n        address owner = ownerOf[_tokenId];\\r\\n\\r\\n        require(\\r\\n            msg.sender == owner || isApprovedForAll[owner][msg.sender],\\r\\n            \\\"NOT_AUTHORIZED\\\"\\r\\n        );\\r\\n\\r\\n        getApproved[_tokenId] = _spender;\\r\\n\\r\\n        emit Approval(owner, _spender, _tokenId);\\r\\n    }\\r\\n\\r\\n    function setApprovalForAll(address _operator, bool _approved)\\r\\n        public\\r\\n        virtual\\r\\n    {\\r\\n        isApprovedForAll[msg.sender][_operator] = _approved;\\r\\n\\r\\n        emit ApprovalForAll(msg.sender, _operator, _approved);\\r\\n    }\\r\\n\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 id\\r\\n    ) public virtual {\\r\\n        _beforeTokenTransfer(from, to, id);\\r\\n\\r\\n        require(from == ownerOf[id], \\\"WRONG_FROM\\\");\\r\\n\\r\\n        require(to != ZERO_ADDRESS, \\\"INVALID_RECIPIENT\\\");\\r\\n\\r\\n        require(\\r\\n            msg.sender == from ||\\r\\n                isApprovedForAll[from][msg.sender] ||\\r\\n                msg.sender == getApproved[id],\\r\\n            \\\"NOT_AUTHORIZED\\\"\\r\\n        );\\r\\n\\r\\n        // Underflow of the sender's balance is impossible because we check for\\r\\n        // ownership above and the recipient's balance can't realistically overflow.\\r\\n        unchecked {\\r\\n            --balanceOf[from];\\r\\n\\r\\n            ++balanceOf[to];\\r\\n        }\\r\\n\\r\\n        ownerOf[id] = to;\\r\\n\\r\\n        delete getApproved[id];\\r\\n\\r\\n        emit Transfer(from, to, id);\\r\\n\\r\\n        _afterTokenTransfer(from, to, id);\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 id\\r\\n    ) public virtual {\\r\\n        transferFrom(from, to, id);\\r\\n\\r\\n        require(\\r\\n            to.code.length == 0 ||\\r\\n                IERC721Receiver(to).onERC721Received(\\r\\n                    msg.sender,\\r\\n                    from,\\r\\n                    id,\\r\\n                    \\\"\\\"\\r\\n                ) ==\\r\\n                IERC721Receiver.onERC721Received.selector,\\r\\n            \\\"UNSAFE_RECIPIENT\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 id,\\r\\n        bytes calldata data\\r\\n    ) public virtual {\\r\\n        transferFrom(from, to, id);\\r\\n\\r\\n        require(\\r\\n            to.code.length == 0 ||\\r\\n                IERC721Receiver(to).onERC721Received(\\r\\n                    msg.sender,\\r\\n                    from,\\r\\n                    id,\\r\\n                    data\\r\\n                ) ==\\r\\n                IERC721Receiver.onERC721Received.selector,\\r\\n            \\\"UNSAFE_RECIPIENT\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function supportsInterface(bytes4 interfaceId)\\r\\n        public\\r\\n        view\\r\\n        virtual\\r\\n        returns (bool)\\r\\n    {\\r\\n        return\\r\\n            interfaceId == 0x01ffc9a7 || // ERC165 Interface ID for ERC165\\r\\n            interfaceId == 0x80ac58cd || // ERC165 Interface ID for ERC721\\r\\n            interfaceId == 0x5b5e139f; // ERC165 Interface ID for ERC721Metadata\\r\\n    }\\r\\n\\r\\n    function _mint(address to, uint256 id) internal virtual {\\r\\n        require(to != ZERO_ADDRESS, \\\"INVALID_RECIPIENT\\\");\\r\\n\\r\\n        require(ownerOf[id] == ZERO_ADDRESS, \\\"ALREADY_MINTED\\\");\\r\\n\\r\\n        // Counter overflow is incredibly unrealistic.\\r\\n        unchecked {\\r\\n            ++balanceOf[to];\\r\\n        }\\r\\n\\r\\n        ownerOf[id] = to;\\r\\n\\r\\n        emit Transfer(ZERO_ADDRESS, to, id);\\r\\n    }\\r\\n\\r\\n    function _burn(uint256 id) internal virtual {\\r\\n        address owner = ownerOf[id];\\r\\n\\r\\n        require(owner != ZERO_ADDRESS, \\\"NOT_MINTED\\\");\\r\\n\\r\\n        // Ownership check above ensures no underflow.\\r\\n        unchecked {\\r\\n            --balanceOf[owner];\\r\\n        }\\r\\n\\r\\n        delete ownerOf[id];\\r\\n\\r\\n        delete getApproved[id];\\r\\n\\r\\n        emit Transfer(owner, ZERO_ADDRESS, id);\\r\\n    }\\r\\n\\r\\n    function _safeMint(address to, uint256 id) internal virtual {\\r\\n        _mint(to, id);\\r\\n\\r\\n        require(\\r\\n            to.code.length == 0 ||\\r\\n                IERC721Receiver(to).onERC721Received(\\r\\n                    msg.sender,\\r\\n                    address(0),\\r\\n                    id,\\r\\n                    \\\"\\\"\\r\\n                ) ==\\r\\n                IERC721Receiver.onERC721Received.selector,\\r\\n            \\\"UNSAFE_RECIPIENT\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _safeMint(\\r\\n        address to,\\r\\n        uint256 id,\\r\\n        bytes memory data\\r\\n    ) internal virtual {\\r\\n        _mint(to, id);\\r\\n\\r\\n        require(\\r\\n            to.code.length == 0 ||\\r\\n                IERC721Receiver(to).onERC721Received(\\r\\n                    msg.sender,\\r\\n                    address(0),\\r\\n                    id,\\r\\n                    data\\r\\n                ) ==\\r\\n                IERC721Receiver.onERC721Received.selector,\\r\\n            \\\"UNSAFE_RECIPIENT\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _beforeTokenTransfer(\\r\\n        address _from,\\r\\n        address _to,\\r\\n        uint256 _tokenId\\r\\n    ) internal virtual {}\\r\\n\\r\\n    function _afterTokenTransfer(\\r\\n        address _from,\\r\\n        address _to,\\r\\n        uint256 _tokenId\\r\\n    ) internal virtual {}\\r\\n}\\r\\n\",\"keccak256\":\"0x8933f1844e1a551ba6dd81ecb9958427fc0c57ddec8f10f25cfa7901ebe68833\",\"license\":\"MIT\"},\"contracts/base/ILinkableSBT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\ninterface ILinkableSBT {\\r\\n    function onERC721Linked(\\r\\n        address from,\\r\\n        uint256 fromTokenId,\\r\\n        address to,\\r\\n        uint256 toTokenId\\r\\n    ) external returns (bytes4);\\r\\n}\\r\\n\",\"keccak256\":\"0xab00e82240c42de3da8c60ae4d738d4b919ca52c3ef22c3925147c921d3f367e\",\"license\":\"MIT\"},\"contracts/profile/ProfileToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\r\\nimport \\\"./SoulBoundToken.sol\\\";\\r\\nimport \\\"../base/ILinkableSBT.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Profile NFT\\r\\n *\\r\\n * @notice This is the user profile NFT on blockchain academy platform\\r\\n *\\r\\n *         It is a soul bound token, which means it\\r\\n *         - can not be transferred\\r\\n *         - can not mint more than one for each user\\r\\n *         - can be burned (will have side effects)\\r\\n *\\r\\n *         Profile NFT can link other NFTs to it, for example, after a user finished a course / task,\\r\\n *         or attended some events.\\r\\n *\\r\\n *\\r\\n */\\r\\n\\r\\ncontract ProfileToken is OwnableUpgradeable, SoulBoundToken, ILinkableSBT {\\r\\n    using Strings for uint256;\\r\\n\\r\\n    string public baseURI;\\r\\n\\r\\n    function initialize(string memory _name, string memory _symbol)\\r\\n        public\\r\\n        initializer\\r\\n    {\\r\\n        __Ownable_init();\\r\\n        __SBT_init(_name, _symbol);\\r\\n    }\\r\\n\\r\\n    function setBaseURI(string memory _baseURI) public onlyOwner {\\r\\n        baseURI = _baseURI;\\r\\n    }\\r\\n\\r\\n    function tokenURI(uint256 _tokenId) public view returns (string memory) {\\r\\n        return _tokenURI(_tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Generate the token URI\\r\\n     *\\r\\n     *         Token URI will be stored on backend\\r\\n     *         URI = \\\"https://api.blockchainacademy.org/api/v1/nft/profile/{tokenId}\\\"\\r\\n     */\\r\\n    function _tokenURI(uint256 _tokenId) internal view returns (string memory) {\\r\\n        return string.concat(baseURI, _tokenId.toString());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Mint a profile NFT for a user\\r\\n     *         It is minted by the owner so user no need for gas fee\\r\\n     *\\r\\n     */\\r\\n    function mint(address _to) public onlyOwner {\\r\\n        _mintSBT(_to);\\r\\n    }\\r\\n\\r\\n    function burn() public {\\r\\n        _burn(soulBoundTokenId[msg.sender]);\\r\\n    }\\r\\n\\r\\n    function onERC721Linked(\\r\\n        address,\\r\\n        uint256,\\r\\n        address,\\r\\n        uint256\\r\\n    ) external pure returns (bytes4) {\\r\\n        return ILinkableSBT.onERC721Linked.selector;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xe483aef7415c2f1911716a2ce3685a86bdff895bc34e00dfa175f507e3ac5210\",\"license\":\"MIT\"},\"contracts/profile/SoulBoundToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\nimport \\\"../base/ERC721Upgradeable.sol\\\";\\r\\n\\r\\nabstract contract SoulBoundToken is ERC721Upgradeable {\\r\\n    uint256 public counter;\\r\\n\\r\\n    mapping(address => uint256) public soulBoundTokenId;\\r\\n\\r\\n    function __SBT_init(string memory _name, string memory _symbol)\\r\\n        internal\\r\\n        onlyInitializing\\r\\n    {\\r\\n        __ERC721_init(_name, _symbol);\\r\\n    }\\r\\n\\r\\n    modifier onlyOne(address _owner) {\\r\\n        require(\\r\\n            balanceOf[_owner] == 0,\\r\\n            \\\"SoulBoundToken: already have a soul bound token\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function _mintSBT(address _to)\\r\\n        internal\\r\\n        virtual\\r\\n        onlyOne(_to)\\r\\n        returns (uint256)\\r\\n    {\\r\\n        uint256 tokenId = counter++;\\r\\n\\r\\n        _safeMint(_to, tokenId);\\r\\n\\r\\n        return tokenId;\\r\\n    }\\r\\n\\r\\n    function _beforeTokenTransfer(\\r\\n        address _from,\\r\\n        address _to,\\r\\n        uint256 _tokenId\\r\\n    ) internal virtual override {\\r\\n        require(\\r\\n            _from == ZERO_ADDRESS || _to == ZERO_ADDRESS,\\r\\n            \\\"SBT: No transfers\\\"\\r\\n        );\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x88aeac9ec6669cd8eb149a9a1afda240ae6fbebdb9f4ad526c96b3f006ce4e9a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50613464806100206000396000f3fe608060405234801561001057600080fd5b50600436106101735760003560e01c80636a627842116100de578063a22cb46511610097578063c87b56dd11610071578063c87b56dd14610422578063e985e9c514610452578063f105a5f114610482578063f2fde38b1461049e57610173565b8063a22cb465146103ba578063ab0d082b146103d6578063b88d4fde1461040657610173565b80636a6278421461030a5780636c0360eb1461032657806370a0823114610344578063715018a6146103745780638da5cb5b1461037e57806395d89b411461039c57610173565b806342842e0e1161013057806342842e0e1461025e57806344df8e701461027a5780634cd88b761461028457806355f804b3146102a057806361bc221a146102bc5780636352211e146102da57610173565b806301ffc9a71461017857806306fdde03146101a8578063081812fc146101c6578063095ea7b3146101f65780630e63304d1461021257806323b872dd14610242575b600080fd5b610192600480360381019061018d9190612080565b6104ba565b60405161019f91906120c8565b60405180910390f35b6101b061054c565b6040516101bd9190612173565b60405180910390f35b6101e060048036038101906101db91906121cb565b6105da565b6040516101ed9190612239565b60405180910390f35b610210600480360381019061020b9190612280565b61060d565b005b61022c600480360381019061022791906122c0565b6107f6565b6040516102399190612336565b60405180910390f35b61025c60048036038101906102579190612351565b61080a565b005b61027860048036038101906102739190612351565b610c1b565b005b610282610d53565b005b61029e600480360381019061029991906124d9565b610d9d565b005b6102ba60048036038101906102b59190612551565b610ee7565b005b6102c4610f02565b6040516102d191906125a9565b60405180910390f35b6102f460048036038101906102ef91906121cb565b610f08565b6040516103019190612239565b60405180910390f35b610324600480360381019061031f91906125c4565b610f3b565b005b61032e610f50565b60405161033b9190612173565b60405180910390f35b61035e600480360381019061035991906125c4565b610fde565b60405161036b91906125a9565b60405180910390f35b61037c610ff6565b005b61038661100a565b6040516103939190612239565b60405180910390f35b6103a4611034565b6040516103b19190612173565b60405180910390f35b6103d460048036038101906103cf919061261d565b6110c2565b005b6103f060048036038101906103eb91906125c4565b6111bf565b6040516103fd91906125a9565b60405180910390f35b610420600480360381019061041b91906126bd565b6111d7565b005b61043c600480360381019061043791906121cb565b611315565b6040516104499190612173565b60405180910390f35b61046c60048036038101906104679190612745565b611327565b60405161047991906120c8565b60405180910390f35b61049c600480360381019061049791906124d9565b611356565b005b6104b860048036038101906104b391906125c4565b611498565b005b60006301ffc9a760e01b827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061051557506380ac58cd60e01b827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806105455750635b5e139f60e01b827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b9050919050565b60658054610559906127b4565b80601f0160208091040260200160405190810160405280929190818152602001828054610585906127b4565b80156105d25780601f106105a7576101008083540402835291602001916105d2565b820191906000526020600020905b8154815290600101906020018083116105b557829003601f168201915b505050505081565b60696020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006067600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806107055750606a60008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b610744576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161073b90612831565b60405180910390fd5b826069600084815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550818373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a4505050565b6000630e63304d60e01b9050949350505050565b61081583838361151b565b6067600082815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16146108b6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108ad9061289d565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610925576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161091c90612909565b60405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806109e55750606a60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b80610a4e57506069600082815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b610a8d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a8490612831565b60405180910390fd5b606860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600081546001900391905081905550606860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000815460010191905081905550816067600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506069600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4610c168383836115c6565b505050565b610c2683838361080a565b60008273ffffffffffffffffffffffffffffffffffffffff163b1480610d0f575063150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168273ffffffffffffffffffffffffffffffffffffffff1663150b7a023386856040518463ffffffff1660e01b8152600401610cab93929190612960565b6020604051808303816000875af1158015610cca573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cee91906129bf565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b610d4e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d4590612a38565b60405180910390fd5b505050565b610d9b606c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546115cb565b565b60008060019054906101000a900460ff16159050808015610dce5750600160008054906101000a900460ff1660ff16105b80610dfb5750610ddd3061178c565b158015610dfa5750600160008054906101000a900460ff1660ff16145b5b610e3a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e3190612aca565b60405180910390fd5b60016000806101000a81548160ff021916908360ff1602179055508015610e77576001600060016101000a81548160ff0219169083151502179055505b610e7f6117af565b610e898383611808565b8015610ee25760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024986001604051610ed99190612b3c565b60405180910390a15b505050565b610eef611865565b80606d9081610efe9190612cf9565b5050565b606b5481565b60676020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610f43611865565b610f4c816118e3565b5050565b606d8054610f5d906127b4565b80601f0160208091040260200160405190810160405280929190818152602001828054610f89906127b4565b8015610fd65780601f10610fab57610100808354040283529160200191610fd6565b820191906000526020600020905b815481529060010190602001808311610fb957829003601f168201915b505050505081565b60686020528060005260406000206000915090505481565b610ffe611865565b6110086000611997565b565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60668054611041906127b4565b80601f016020809104026020016040519081016040528092919081815260200182805461106d906127b4565b80156110ba5780601f1061108f576101008083540402835291602001916110ba565b820191906000526020600020905b81548152906001019060200180831161109d57829003601f168201915b505050505081565b80606a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516111b391906120c8565b60405180910390a35050565b606c6020528060005260406000206000915090505481565b6111e285858561080a565b60008473ffffffffffffffffffffffffffffffffffffffff163b14806112cf575063150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168473ffffffffffffffffffffffffffffffffffffffff1663150b7a0233888787876040518663ffffffff1660e01b815260040161126b959493929190612df8565b6020604051808303816000875af115801561128a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112ae91906129bf565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b61130e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161130590612a38565b60405180910390fd5b5050505050565b606061132082611a5d565b9050919050565b606a6020528160005260406000206020528060005260406000206000915091509054906101000a900460ff1681565b60008060019054906101000a900460ff161590508080156113875750600160008054906101000a900460ff1660ff16105b806113b457506113963061178c565b1580156113b35750600160008054906101000a900460ff1660ff16145b5b6113f3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113ea90612aca565b60405180910390fd5b60016000806101000a81548160ff021916908360ff1602179055508015611430576001600060016101000a81548160ff0219169083151502179055505b61143a8383611a91565b80156114935760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498600160405161148a9190612b3c565b60405180910390a15b505050565b6114a0611865565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361150f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161150690612eb8565b60405180910390fd5b61151881611997565b50565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614806115825750600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b6115c1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115b890612f24565b60405180910390fd5b505050565b505050565b60006067600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611672576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161166990612f90565b60405180910390fd5b606860008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000815460019003919050819055506067600083815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556069600083815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905581600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600060019054906101000a900460ff166117fe576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117f590613022565b60405180910390fd5b611806611b04565b565b600060019054906101000a900460ff16611857576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161184e90613022565b60405180910390fd5b6118618282611a91565b5050565b61186d611b65565b73ffffffffffffffffffffffffffffffffffffffff1661188b61100a565b73ffffffffffffffffffffffffffffffffffffffff16146118e1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118d89061308e565b60405180910390fd5b565b6000816000606860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414611968576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161195f90613120565b60405180910390fd5b6000606b600081548092919061197d9061316f565b91905055905061198d8482611b6d565b8092505050919050565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6060606d611a6a83611ca4565b604051602001611a7b929190613276565b6040516020818303038152906040529050919050565b600060019054906101000a900460ff16611ae0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ad790613022565b60405180910390fd5b8160659081611aef9190612cf9565b508060669081611aff9190612cf9565b505050565b600060019054906101000a900460ff16611b53576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b4a90613022565b60405180910390fd5b611b63611b5e611b65565b611997565b565b600033905090565b611b778282611e04565b60008273ffffffffffffffffffffffffffffffffffffffff163b1480611c61575063150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168273ffffffffffffffffffffffffffffffffffffffff1663150b7a02336000856040518463ffffffff1660e01b8152600401611bfd93929190612960565b6020604051808303816000875af1158015611c1c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c4091906129bf565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b611ca0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c9790612a38565b60405180910390fd5b5050565b606060008203611ceb576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050611dff565b600082905060005b60008214611d1d578080611d069061316f565b915050600a82611d1691906132c9565b9150611cf3565b60008167ffffffffffffffff811115611d3957611d386123ae565b5b6040519080825280601f01601f191660200182016040528015611d6b5781602001600182028036833780820191505090505b5090505b60008514611df857600182611d8491906132fa565b9150600a85611d93919061332e565b6030611d9f919061335f565b60f81b818381518110611db557611db4613393565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a85611df191906132c9565b9450611d6f565b8093505050505b919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611e73576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e6a90612909565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff166067600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611f15576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f0c9061340e565b60405180910390fd5b606860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000815460010191905081905550816067600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61205d81612028565b811461206857600080fd5b50565b60008135905061207a81612054565b92915050565b6000602082840312156120965761209561201e565b5b60006120a48482850161206b565b91505092915050565b60008115159050919050565b6120c2816120ad565b82525050565b60006020820190506120dd60008301846120b9565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561211d578082015181840152602081019050612102565b60008484015250505050565b6000601f19601f8301169050919050565b6000612145826120e3565b61214f81856120ee565b935061215f8185602086016120ff565b61216881612129565b840191505092915050565b6000602082019050818103600083015261218d818461213a565b905092915050565b6000819050919050565b6121a881612195565b81146121b357600080fd5b50565b6000813590506121c58161219f565b92915050565b6000602082840312156121e1576121e061201e565b5b60006121ef848285016121b6565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000612223826121f8565b9050919050565b61223381612218565b82525050565b600060208201905061224e600083018461222a565b92915050565b61225d81612218565b811461226857600080fd5b50565b60008135905061227a81612254565b92915050565b600080604083850312156122975761229661201e565b5b60006122a58582860161226b565b92505060206122b6858286016121b6565b9150509250929050565b600080600080608085870312156122da576122d961201e565b5b60006122e88782880161226b565b94505060206122f9878288016121b6565b935050604061230a8782880161226b565b925050606061231b878288016121b6565b91505092959194509250565b61233081612028565b82525050565b600060208201905061234b6000830184612327565b92915050565b60008060006060848603121561236a5761236961201e565b5b60006123788682870161226b565b93505060206123898682870161226b565b925050604061239a868287016121b6565b9150509250925092565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6123e682612129565b810181811067ffffffffffffffff82111715612405576124046123ae565b5b80604052505050565b6000612418612014565b905061242482826123dd565b919050565b600067ffffffffffffffff821115612444576124436123ae565b5b61244d82612129565b9050602081019050919050565b82818337600083830152505050565b600061247c61247784612429565b61240e565b905082815260208101848484011115612498576124976123a9565b5b6124a384828561245a565b509392505050565b600082601f8301126124c0576124bf6123a4565b5b81356124d0848260208601612469565b91505092915050565b600080604083850312156124f0576124ef61201e565b5b600083013567ffffffffffffffff81111561250e5761250d612023565b5b61251a858286016124ab565b925050602083013567ffffffffffffffff81111561253b5761253a612023565b5b612547858286016124ab565b9150509250929050565b6000602082840312156125675761256661201e565b5b600082013567ffffffffffffffff81111561258557612584612023565b5b612591848285016124ab565b91505092915050565b6125a381612195565b82525050565b60006020820190506125be600083018461259a565b92915050565b6000602082840312156125da576125d961201e565b5b60006125e88482850161226b565b91505092915050565b6125fa816120ad565b811461260557600080fd5b50565b600081359050612617816125f1565b92915050565b600080604083850312156126345761263361201e565b5b60006126428582860161226b565b925050602061265385828601612608565b9150509250929050565b600080fd5b600080fd5b60008083601f84011261267d5761267c6123a4565b5b8235905067ffffffffffffffff81111561269a5761269961265d565b5b6020830191508360018202830111156126b6576126b5612662565b5b9250929050565b6000806000806000608086880312156126d9576126d861201e565b5b60006126e78882890161226b565b95505060206126f88882890161226b565b9450506040612709888289016121b6565b935050606086013567ffffffffffffffff81111561272a57612729612023565b5b61273688828901612667565b92509250509295509295909350565b6000806040838503121561275c5761275b61201e565b5b600061276a8582860161226b565b925050602061277b8582860161226b565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806127cc57607f821691505b6020821081036127df576127de612785565b5b50919050565b7f4e4f545f415554484f52495a4544000000000000000000000000000000000000600082015250565b600061281b600e836120ee565b9150612826826127e5565b602082019050919050565b6000602082019050818103600083015261284a8161280e565b9050919050565b7f57524f4e475f46524f4d00000000000000000000000000000000000000000000600082015250565b6000612887600a836120ee565b915061289282612851565b602082019050919050565b600060208201905081810360008301526128b68161287a565b9050919050565b7f494e56414c49445f524543495049454e54000000000000000000000000000000600082015250565b60006128f36011836120ee565b91506128fe826128bd565b602082019050919050565b60006020820190508181036000830152612922816128e6565b9050919050565b600082825260208201905092915050565b50565b600061294a600083612929565b91506129558261293a565b600082019050919050565b6000608082019050612975600083018661222a565b612982602083018561222a565b61298f604083018461259a565b81810360608301526129a08161293d565b9050949350505050565b6000815190506129b981612054565b92915050565b6000602082840312156129d5576129d461201e565b5b60006129e3848285016129aa565b91505092915050565b7f554e534146455f524543495049454e5400000000000000000000000000000000600082015250565b6000612a226010836120ee565b9150612a2d826129ec565b602082019050919050565b60006020820190508181036000830152612a5181612a15565b9050919050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b6000612ab4602e836120ee565b9150612abf82612a58565b604082019050919050565b60006020820190508181036000830152612ae381612aa7565b9050919050565b6000819050919050565b600060ff82169050919050565b6000819050919050565b6000612b26612b21612b1c84612aea565b612b01565b612af4565b9050919050565b612b3681612b0b565b82525050565b6000602082019050612b516000830184612b2d565b92915050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302612bb97fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82612b7c565b612bc38683612b7c565b95508019841693508086168417925050509392505050565b6000612bf6612bf1612bec84612195565b612b01565b612195565b9050919050565b6000819050919050565b612c1083612bdb565b612c24612c1c82612bfd565b848454612b89565b825550505050565b600090565b612c39612c2c565b612c44818484612c07565b505050565b5b81811015612c6857612c5d600082612c31565b600181019050612c4a565b5050565b601f821115612cad57612c7e81612b57565b612c8784612b6c565b81016020851015612c96578190505b612caa612ca285612b6c565b830182612c49565b50505b505050565b600082821c905092915050565b6000612cd060001984600802612cb2565b1980831691505092915050565b6000612ce98383612cbf565b9150826002028217905092915050565b612d02826120e3565b67ffffffffffffffff811115612d1b57612d1a6123ae565b5b612d2582546127b4565b612d30828285612c6c565b600060209050601f831160018114612d635760008415612d51578287015190505b612d5b8582612cdd565b865550612dc3565b601f198416612d7186612b57565b60005b82811015612d9957848901518255600182019150602085019450602081019050612d74565b86831015612db65784890151612db2601f891682612cbf565b8355505b6001600288020188555050505b505050505050565b6000612dd78385612929565b9350612de483858461245a565b612ded83612129565b840190509392505050565b6000608082019050612e0d600083018861222a565b612e1a602083018761222a565b612e27604083018661259a565b8181036060830152612e3a818486612dcb565b90509695505050505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000612ea26026836120ee565b9150612ead82612e46565b604082019050919050565b60006020820190508181036000830152612ed181612e95565b9050919050565b7f5342543a204e6f207472616e7366657273000000000000000000000000000000600082015250565b6000612f0e6011836120ee565b9150612f1982612ed8565b602082019050919050565b60006020820190508181036000830152612f3d81612f01565b9050919050565b7f4e4f545f4d494e54454400000000000000000000000000000000000000000000600082015250565b6000612f7a600a836120ee565b9150612f8582612f44565b602082019050919050565b60006020820190508181036000830152612fa981612f6d565b9050919050565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b600061300c602b836120ee565b915061301782612fb0565b604082019050919050565b6000602082019050818103600083015261303b81612fff565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006130786020836120ee565b915061308382613042565b602082019050919050565b600060208201905081810360008301526130a78161306b565b9050919050565b7f536f756c426f756e64546f6b656e3a20616c726561647920686176652061207360008201527f6f756c20626f756e6420746f6b656e0000000000000000000000000000000000602082015250565b600061310a602f836120ee565b9150613115826130ae565b604082019050919050565b60006020820190508181036000830152613139816130fd565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061317a82612195565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036131ac576131ab613140565b5b600182019050919050565b600081905092915050565b600081546131cf816127b4565b6131d981866131b7565b945060018216600081146131f457600181146132095761323c565b60ff198316865281151582028601935061323c565b61321285612b57565b60005b8381101561323457815481890152600182019150602081019050613215565b838801955050505b50505092915050565b6000613250826120e3565b61325a81856131b7565b935061326a8185602086016120ff565b80840191505092915050565b600061328282856131c2565b915061328e8284613245565b91508190509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006132d482612195565b91506132df83612195565b9250826132ef576132ee61329a565b5b828204905092915050565b600061330582612195565b915061331083612195565b925082820390508181111561332857613327613140565b5b92915050565b600061333982612195565b915061334483612195565b9250826133545761335361329a565b5b828206905092915050565b600061336a82612195565b915061337583612195565b925082820190508082111561338d5761338c613140565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f414c52454144595f4d494e544544000000000000000000000000000000000000600082015250565b60006133f8600e836120ee565b9150613403826133c2565b602082019050919050565b60006020820190508181036000830152613427816133eb565b905091905056fea2646970667358221220e017ec303d8dacccf3e3192c445d5af32b2d2acf830bf27ad0ba08f82fb7a81b64736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101735760003560e01c80636a627842116100de578063a22cb46511610097578063c87b56dd11610071578063c87b56dd14610422578063e985e9c514610452578063f105a5f114610482578063f2fde38b1461049e57610173565b8063a22cb465146103ba578063ab0d082b146103d6578063b88d4fde1461040657610173565b80636a6278421461030a5780636c0360eb1461032657806370a0823114610344578063715018a6146103745780638da5cb5b1461037e57806395d89b411461039c57610173565b806342842e0e1161013057806342842e0e1461025e57806344df8e701461027a5780634cd88b761461028457806355f804b3146102a057806361bc221a146102bc5780636352211e146102da57610173565b806301ffc9a71461017857806306fdde03146101a8578063081812fc146101c6578063095ea7b3146101f65780630e63304d1461021257806323b872dd14610242575b600080fd5b610192600480360381019061018d9190612080565b6104ba565b60405161019f91906120c8565b60405180910390f35b6101b061054c565b6040516101bd9190612173565b60405180910390f35b6101e060048036038101906101db91906121cb565b6105da565b6040516101ed9190612239565b60405180910390f35b610210600480360381019061020b9190612280565b61060d565b005b61022c600480360381019061022791906122c0565b6107f6565b6040516102399190612336565b60405180910390f35b61025c60048036038101906102579190612351565b61080a565b005b61027860048036038101906102739190612351565b610c1b565b005b610282610d53565b005b61029e600480360381019061029991906124d9565b610d9d565b005b6102ba60048036038101906102b59190612551565b610ee7565b005b6102c4610f02565b6040516102d191906125a9565b60405180910390f35b6102f460048036038101906102ef91906121cb565b610f08565b6040516103019190612239565b60405180910390f35b610324600480360381019061031f91906125c4565b610f3b565b005b61032e610f50565b60405161033b9190612173565b60405180910390f35b61035e600480360381019061035991906125c4565b610fde565b60405161036b91906125a9565b60405180910390f35b61037c610ff6565b005b61038661100a565b6040516103939190612239565b60405180910390f35b6103a4611034565b6040516103b19190612173565b60405180910390f35b6103d460048036038101906103cf919061261d565b6110c2565b005b6103f060048036038101906103eb91906125c4565b6111bf565b6040516103fd91906125a9565b60405180910390f35b610420600480360381019061041b91906126bd565b6111d7565b005b61043c600480360381019061043791906121cb565b611315565b6040516104499190612173565b60405180910390f35b61046c60048036038101906104679190612745565b611327565b60405161047991906120c8565b60405180910390f35b61049c600480360381019061049791906124d9565b611356565b005b6104b860048036038101906104b391906125c4565b611498565b005b60006301ffc9a760e01b827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061051557506380ac58cd60e01b827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806105455750635b5e139f60e01b827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b9050919050565b60658054610559906127b4565b80601f0160208091040260200160405190810160405280929190818152602001828054610585906127b4565b80156105d25780601f106105a7576101008083540402835291602001916105d2565b820191906000526020600020905b8154815290600101906020018083116105b557829003601f168201915b505050505081565b60696020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006067600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806107055750606a60008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b610744576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161073b90612831565b60405180910390fd5b826069600084815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550818373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a4505050565b6000630e63304d60e01b9050949350505050565b61081583838361151b565b6067600082815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16146108b6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108ad9061289d565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610925576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161091c90612909565b60405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806109e55750606a60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b80610a4e57506069600082815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b610a8d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a8490612831565b60405180910390fd5b606860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600081546001900391905081905550606860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000815460010191905081905550816067600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506069600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4610c168383836115c6565b505050565b610c2683838361080a565b60008273ffffffffffffffffffffffffffffffffffffffff163b1480610d0f575063150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168273ffffffffffffffffffffffffffffffffffffffff1663150b7a023386856040518463ffffffff1660e01b8152600401610cab93929190612960565b6020604051808303816000875af1158015610cca573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cee91906129bf565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b610d4e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d4590612a38565b60405180910390fd5b505050565b610d9b606c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546115cb565b565b60008060019054906101000a900460ff16159050808015610dce5750600160008054906101000a900460ff1660ff16105b80610dfb5750610ddd3061178c565b158015610dfa5750600160008054906101000a900460ff1660ff16145b5b610e3a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e3190612aca565b60405180910390fd5b60016000806101000a81548160ff021916908360ff1602179055508015610e77576001600060016101000a81548160ff0219169083151502179055505b610e7f6117af565b610e898383611808565b8015610ee25760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024986001604051610ed99190612b3c565b60405180910390a15b505050565b610eef611865565b80606d9081610efe9190612cf9565b5050565b606b5481565b60676020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610f43611865565b610f4c816118e3565b5050565b606d8054610f5d906127b4565b80601f0160208091040260200160405190810160405280929190818152602001828054610f89906127b4565b8015610fd65780601f10610fab57610100808354040283529160200191610fd6565b820191906000526020600020905b815481529060010190602001808311610fb957829003601f168201915b505050505081565b60686020528060005260406000206000915090505481565b610ffe611865565b6110086000611997565b565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60668054611041906127b4565b80601f016020809104026020016040519081016040528092919081815260200182805461106d906127b4565b80156110ba5780601f1061108f576101008083540402835291602001916110ba565b820191906000526020600020905b81548152906001019060200180831161109d57829003601f168201915b505050505081565b80606a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516111b391906120c8565b60405180910390a35050565b606c6020528060005260406000206000915090505481565b6111e285858561080a565b60008473ffffffffffffffffffffffffffffffffffffffff163b14806112cf575063150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168473ffffffffffffffffffffffffffffffffffffffff1663150b7a0233888787876040518663ffffffff1660e01b815260040161126b959493929190612df8565b6020604051808303816000875af115801561128a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112ae91906129bf565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b61130e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161130590612a38565b60405180910390fd5b5050505050565b606061132082611a5d565b9050919050565b606a6020528160005260406000206020528060005260406000206000915091509054906101000a900460ff1681565b60008060019054906101000a900460ff161590508080156113875750600160008054906101000a900460ff1660ff16105b806113b457506113963061178c565b1580156113b35750600160008054906101000a900460ff1660ff16145b5b6113f3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113ea90612aca565b60405180910390fd5b60016000806101000a81548160ff021916908360ff1602179055508015611430576001600060016101000a81548160ff0219169083151502179055505b61143a8383611a91565b80156114935760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498600160405161148a9190612b3c565b60405180910390a15b505050565b6114a0611865565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361150f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161150690612eb8565b60405180910390fd5b61151881611997565b50565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614806115825750600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b6115c1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115b890612f24565b60405180910390fd5b505050565b505050565b60006067600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611672576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161166990612f90565b60405180910390fd5b606860008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000815460019003919050819055506067600083815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556069600083815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905581600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600060019054906101000a900460ff166117fe576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117f590613022565b60405180910390fd5b611806611b04565b565b600060019054906101000a900460ff16611857576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161184e90613022565b60405180910390fd5b6118618282611a91565b5050565b61186d611b65565b73ffffffffffffffffffffffffffffffffffffffff1661188b61100a565b73ffffffffffffffffffffffffffffffffffffffff16146118e1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118d89061308e565b60405180910390fd5b565b6000816000606860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414611968576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161195f90613120565b60405180910390fd5b6000606b600081548092919061197d9061316f565b91905055905061198d8482611b6d565b8092505050919050565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6060606d611a6a83611ca4565b604051602001611a7b929190613276565b6040516020818303038152906040529050919050565b600060019054906101000a900460ff16611ae0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ad790613022565b60405180910390fd5b8160659081611aef9190612cf9565b508060669081611aff9190612cf9565b505050565b600060019054906101000a900460ff16611b53576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b4a90613022565b60405180910390fd5b611b63611b5e611b65565b611997565b565b600033905090565b611b778282611e04565b60008273ffffffffffffffffffffffffffffffffffffffff163b1480611c61575063150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168273ffffffffffffffffffffffffffffffffffffffff1663150b7a02336000856040518463ffffffff1660e01b8152600401611bfd93929190612960565b6020604051808303816000875af1158015611c1c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c4091906129bf565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b611ca0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c9790612a38565b60405180910390fd5b5050565b606060008203611ceb576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050611dff565b600082905060005b60008214611d1d578080611d069061316f565b915050600a82611d1691906132c9565b9150611cf3565b60008167ffffffffffffffff811115611d3957611d386123ae565b5b6040519080825280601f01601f191660200182016040528015611d6b5781602001600182028036833780820191505090505b5090505b60008514611df857600182611d8491906132fa565b9150600a85611d93919061332e565b6030611d9f919061335f565b60f81b818381518110611db557611db4613393565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a85611df191906132c9565b9450611d6f565b8093505050505b919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611e73576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e6a90612909565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff166067600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611f15576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f0c9061340e565b60405180910390fd5b606860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000815460010191905081905550816067600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61205d81612028565b811461206857600080fd5b50565b60008135905061207a81612054565b92915050565b6000602082840312156120965761209561201e565b5b60006120a48482850161206b565b91505092915050565b60008115159050919050565b6120c2816120ad565b82525050565b60006020820190506120dd60008301846120b9565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561211d578082015181840152602081019050612102565b60008484015250505050565b6000601f19601f8301169050919050565b6000612145826120e3565b61214f81856120ee565b935061215f8185602086016120ff565b61216881612129565b840191505092915050565b6000602082019050818103600083015261218d818461213a565b905092915050565b6000819050919050565b6121a881612195565b81146121b357600080fd5b50565b6000813590506121c58161219f565b92915050565b6000602082840312156121e1576121e061201e565b5b60006121ef848285016121b6565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000612223826121f8565b9050919050565b61223381612218565b82525050565b600060208201905061224e600083018461222a565b92915050565b61225d81612218565b811461226857600080fd5b50565b60008135905061227a81612254565b92915050565b600080604083850312156122975761229661201e565b5b60006122a58582860161226b565b92505060206122b6858286016121b6565b9150509250929050565b600080600080608085870312156122da576122d961201e565b5b60006122e88782880161226b565b94505060206122f9878288016121b6565b935050604061230a8782880161226b565b925050606061231b878288016121b6565b91505092959194509250565b61233081612028565b82525050565b600060208201905061234b6000830184612327565b92915050565b60008060006060848603121561236a5761236961201e565b5b60006123788682870161226b565b93505060206123898682870161226b565b925050604061239a868287016121b6565b9150509250925092565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6123e682612129565b810181811067ffffffffffffffff82111715612405576124046123ae565b5b80604052505050565b6000612418612014565b905061242482826123dd565b919050565b600067ffffffffffffffff821115612444576124436123ae565b5b61244d82612129565b9050602081019050919050565b82818337600083830152505050565b600061247c61247784612429565b61240e565b905082815260208101848484011115612498576124976123a9565b5b6124a384828561245a565b509392505050565b600082601f8301126124c0576124bf6123a4565b5b81356124d0848260208601612469565b91505092915050565b600080604083850312156124f0576124ef61201e565b5b600083013567ffffffffffffffff81111561250e5761250d612023565b5b61251a858286016124ab565b925050602083013567ffffffffffffffff81111561253b5761253a612023565b5b612547858286016124ab565b9150509250929050565b6000602082840312156125675761256661201e565b5b600082013567ffffffffffffffff81111561258557612584612023565b5b612591848285016124ab565b91505092915050565b6125a381612195565b82525050565b60006020820190506125be600083018461259a565b92915050565b6000602082840312156125da576125d961201e565b5b60006125e88482850161226b565b91505092915050565b6125fa816120ad565b811461260557600080fd5b50565b600081359050612617816125f1565b92915050565b600080604083850312156126345761263361201e565b5b60006126428582860161226b565b925050602061265385828601612608565b9150509250929050565b600080fd5b600080fd5b60008083601f84011261267d5761267c6123a4565b5b8235905067ffffffffffffffff81111561269a5761269961265d565b5b6020830191508360018202830111156126b6576126b5612662565b5b9250929050565b6000806000806000608086880312156126d9576126d861201e565b5b60006126e78882890161226b565b95505060206126f88882890161226b565b9450506040612709888289016121b6565b935050606086013567ffffffffffffffff81111561272a57612729612023565b5b61273688828901612667565b92509250509295509295909350565b6000806040838503121561275c5761275b61201e565b5b600061276a8582860161226b565b925050602061277b8582860161226b565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806127cc57607f821691505b6020821081036127df576127de612785565b5b50919050565b7f4e4f545f415554484f52495a4544000000000000000000000000000000000000600082015250565b600061281b600e836120ee565b9150612826826127e5565b602082019050919050565b6000602082019050818103600083015261284a8161280e565b9050919050565b7f57524f4e475f46524f4d00000000000000000000000000000000000000000000600082015250565b6000612887600a836120ee565b915061289282612851565b602082019050919050565b600060208201905081810360008301526128b68161287a565b9050919050565b7f494e56414c49445f524543495049454e54000000000000000000000000000000600082015250565b60006128f36011836120ee565b91506128fe826128bd565b602082019050919050565b60006020820190508181036000830152612922816128e6565b9050919050565b600082825260208201905092915050565b50565b600061294a600083612929565b91506129558261293a565b600082019050919050565b6000608082019050612975600083018661222a565b612982602083018561222a565b61298f604083018461259a565b81810360608301526129a08161293d565b9050949350505050565b6000815190506129b981612054565b92915050565b6000602082840312156129d5576129d461201e565b5b60006129e3848285016129aa565b91505092915050565b7f554e534146455f524543495049454e5400000000000000000000000000000000600082015250565b6000612a226010836120ee565b9150612a2d826129ec565b602082019050919050565b60006020820190508181036000830152612a5181612a15565b9050919050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b6000612ab4602e836120ee565b9150612abf82612a58565b604082019050919050565b60006020820190508181036000830152612ae381612aa7565b9050919050565b6000819050919050565b600060ff82169050919050565b6000819050919050565b6000612b26612b21612b1c84612aea565b612b01565b612af4565b9050919050565b612b3681612b0b565b82525050565b6000602082019050612b516000830184612b2d565b92915050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302612bb97fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82612b7c565b612bc38683612b7c565b95508019841693508086168417925050509392505050565b6000612bf6612bf1612bec84612195565b612b01565b612195565b9050919050565b6000819050919050565b612c1083612bdb565b612c24612c1c82612bfd565b848454612b89565b825550505050565b600090565b612c39612c2c565b612c44818484612c07565b505050565b5b81811015612c6857612c5d600082612c31565b600181019050612c4a565b5050565b601f821115612cad57612c7e81612b57565b612c8784612b6c565b81016020851015612c96578190505b612caa612ca285612b6c565b830182612c49565b50505b505050565b600082821c905092915050565b6000612cd060001984600802612cb2565b1980831691505092915050565b6000612ce98383612cbf565b9150826002028217905092915050565b612d02826120e3565b67ffffffffffffffff811115612d1b57612d1a6123ae565b5b612d2582546127b4565b612d30828285612c6c565b600060209050601f831160018114612d635760008415612d51578287015190505b612d5b8582612cdd565b865550612dc3565b601f198416612d7186612b57565b60005b82811015612d9957848901518255600182019150602085019450602081019050612d74565b86831015612db65784890151612db2601f891682612cbf565b8355505b6001600288020188555050505b505050505050565b6000612dd78385612929565b9350612de483858461245a565b612ded83612129565b840190509392505050565b6000608082019050612e0d600083018861222a565b612e1a602083018761222a565b612e27604083018661259a565b8181036060830152612e3a818486612dcb565b90509695505050505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000612ea26026836120ee565b9150612ead82612e46565b604082019050919050565b60006020820190508181036000830152612ed181612e95565b9050919050565b7f5342543a204e6f207472616e7366657273000000000000000000000000000000600082015250565b6000612f0e6011836120ee565b9150612f1982612ed8565b602082019050919050565b60006020820190508181036000830152612f3d81612f01565b9050919050565b7f4e4f545f4d494e54454400000000000000000000000000000000000000000000600082015250565b6000612f7a600a836120ee565b9150612f8582612f44565b602082019050919050565b60006020820190508181036000830152612fa981612f6d565b9050919050565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b600061300c602b836120ee565b915061301782612fb0565b604082019050919050565b6000602082019050818103600083015261303b81612fff565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006130786020836120ee565b915061308382613042565b602082019050919050565b600060208201905081810360008301526130a78161306b565b9050919050565b7f536f756c426f756e64546f6b656e3a20616c726561647920686176652061207360008201527f6f756c20626f756e6420746f6b656e0000000000000000000000000000000000602082015250565b600061310a602f836120ee565b9150613115826130ae565b604082019050919050565b60006020820190508181036000830152613139816130fd565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061317a82612195565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036131ac576131ab613140565b5b600182019050919050565b600081905092915050565b600081546131cf816127b4565b6131d981866131b7565b945060018216600081146131f457600181146132095761323c565b60ff198316865281151582028601935061323c565b61321285612b57565b60005b8381101561323457815481890152600182019150602081019050613215565b838801955050505b50505092915050565b6000613250826120e3565b61325a81856131b7565b935061326a8185602086016120ff565b80840191505092915050565b600061328282856131c2565b915061328e8284613245565b91508190509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006132d482612195565b91506132df83612195565b9250826132ef576132ee61329a565b5b828204905092915050565b600061330582612195565b915061331083612195565b925082820390508181111561332857613327613140565b5b92915050565b600061333982612195565b915061334483612195565b9250826133545761335361329a565b5b828206905092915050565b600061336a82612195565b915061337583612195565b925082820190508082111561338d5761338c613140565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f414c52454144595f4d494e544544000000000000000000000000000000000000600082015250565b60006133f8600e836120ee565b9150613403826133c2565b602082019050919050565b60006020820190508181036000830152613427816133eb565b905091905056fea2646970667358221220e017ec303d8dacccf3e3192c445d5af32b2d2acf830bf27ad0ba08f82fb7a81b64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "Profile NFT",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "mint(address)": {
        "notice": "Mint a profile NFT for a user         It is minted by the owner so user no need for gas fee"
      }
    },
    "notice": "This is the user profile NFT on blockchain academy platform         It is a soul bound token, which means it         - can not be transferred         - can not mint more than one for each user         - can be burned (will have side effects)         Profile NFT can link other NFTs to it, for example, after a user finished a course / task,         or attended some events.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 138,
        "contract": "contracts/profile/ProfileToken.sol:ProfileToken",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 141,
        "contract": "contracts/profile/ProfileToken.sol:ProfileToken",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 752,
        "contract": "contracts/profile/ProfileToken.sol:ProfileToken",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/profile/ProfileToken.sol:ProfileToken",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 130,
        "contract": "contracts/profile/ProfileToken.sol:ProfileToken",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 1780,
        "contract": "contracts/profile/ProfileToken.sol:ProfileToken",
        "label": "name",
        "offset": 0,
        "slot": "101",
        "type": "t_string_storage"
      },
      {
        "astId": 1782,
        "contract": "contracts/profile/ProfileToken.sol:ProfileToken",
        "label": "symbol",
        "offset": 0,
        "slot": "102",
        "type": "t_string_storage"
      },
      {
        "astId": 1786,
        "contract": "contracts/profile/ProfileToken.sol:ProfileToken",
        "label": "ownerOf",
        "offset": 0,
        "slot": "103",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 1790,
        "contract": "contracts/profile/ProfileToken.sol:ProfileToken",
        "label": "balanceOf",
        "offset": 0,
        "slot": "104",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1794,
        "contract": "contracts/profile/ProfileToken.sol:ProfileToken",
        "label": "getApproved",
        "offset": 0,
        "slot": "105",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 1800,
        "contract": "contracts/profile/ProfileToken.sol:ProfileToken",
        "label": "isApprovedForAll",
        "offset": 0,
        "slot": "106",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 2524,
        "contract": "contracts/profile/ProfileToken.sol:ProfileToken",
        "label": "counter",
        "offset": 0,
        "slot": "107",
        "type": "t_uint256"
      },
      {
        "astId": 2528,
        "contract": "contracts/profile/ProfileToken.sol:ProfileToken",
        "label": "soulBoundTokenId",
        "offset": 0,
        "slot": "108",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2414,
        "contract": "contracts/profile/ProfileToken.sol:ProfileToken",
        "label": "baseURI",
        "offset": 0,
        "slot": "109",
        "type": "t_string_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}