{
  "address": "0x692F1073f0bd5131f677346712A04A7BFE2806Ac",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "oldURI",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "newURI",
          "type": "string"
        }
      ],
      "name": "BaseURIChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "eventId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldEventOwner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "eventOwner",
          "type": "address"
        }
      ],
      "name": "EventOwnerChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "eventId",
          "type": "uint256"
        }
      ],
      "name": "POANFTBurned",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "eventId",
          "type": "uint256"
        }
      ],
      "name": "POANFTMinted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "counter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "eventIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "eventOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "expiryForEvents",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        }
      ],
      "name": "intialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "links",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_eventId",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_uri",
          "type": "string"
        }
      ],
      "name": "setBaseURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_eventId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_eventOwner",
          "type": "address"
        }
      ],
      "name": "setEventOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x9dbddc3ce9d6de926a0469277a37a9e85fc5cabaa4b3b2ae06bb2b9ed0dce1aa",
  "receipt": {
    "to": null,
    "from": "0x53F5339C69d940242dC32D89637824459c96D67E",
    "contractAddress": "0x692F1073f0bd5131f677346712A04A7BFE2806Ac",
    "transactionIndex": 54,
    "gasUsed": "3343661",
    "logsBloom": "0x
    "blockHash": "0x0b57ae36af846182483053d6c58b3ddc0896860059682455b7972b9c20798c34",
    "transactionHash": "0x9dbddc3ce9d6de926a0469277a37a9e85fc5cabaa4b3b2ae06bb2b9ed0dce1aa",
    "logs": [],
    "blockNumber": 15782700,
    "cumulativeGasUsed": "7378323",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "76515367593e2f9129486a2f6ae93b55",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"oldURI\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newURI\",\"type\":\"string\"}],\"name\":\"BaseURIChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldEventOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"eventOwner\",\"type\":\"address\"}],\"name\":\"EventOwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"}],\"name\":\"POANFTBurned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"}],\"name\":\"POANFTMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"counter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"eventIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"eventOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"expiryForEvents\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"intialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"links\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_eventId\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_eventId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_eventOwner\",\"type\":\"address\"}],\"name\":\"setEventOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"Proof-of-Attendance NFT\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"This contract is used to mint NFTs for Proof-of-Attendance events.         Event is identified by a unique event ID. Event details are stored on server.         Token URI = Base URI + Event Id         E.g.           Token id 2 and 5 are both for event 1, then           tokenURI(2) = tokenURI(5) = \\\"https://api.web3edu.xyz/poa/1\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/badge/POANFT.sol\":\"POANFT\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0-rc.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initialized`\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initializing`\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0xf2efdd01f01f127e8b631675a359cd8cabfbcdcd2e8587ecf906181bcd667bc9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x40c636b4572ff5f1dc50cf22097e93c0723ee14eff87e99ac2b02636eeca1250\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0-rc.1) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xabed77589961adbaaa36817e0914bcbe4c447311c9451bf3fc9b073c1f092d8d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"contracts/badge/POANFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\r\\nimport \\\"../base/ERC721Upgradeable.sol\\\";\\r\\nimport \\\"../base/Linkable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Proof-of-Attendance NFT\\r\\n *\\r\\n * @notice This contract is used to mint NFTs for Proof-of-Attendance events.\\r\\n *\\r\\n *         Event is identified by a unique event ID. Event details are stored on server.\\r\\n *\\r\\n *         Token URI = Base URI + Event Id\\r\\n *         E.g.\\r\\n *           Token id 2 and 5 are both for event 1, then\\r\\n *           tokenURI(2) = tokenURI(5) = \\\"https://api.web3edu.xyz/poa/1\\r\\n */\\r\\ncontract POANFT is\\r\\n    OwnableUpgradeable,\\r\\n    PausableUpgradeable,\\r\\n    ERC721Upgradeable,\\r\\n    Linkable\\r\\n{\\r\\n    using Strings for uint256;\\r\\n\\r\\n    // ---------------------------------------------------------------------------------------- //\\r\\n    // ************************************* Variables **************************************** //\\r\\n    // ---------------------------------------------------------------------------------------- //\\r\\n\\r\\n    // Current token id\\r\\n    uint256 public counter;\\r\\n\\r\\n    // Base uri of the token metadata\\r\\n    string public baseURI;\\r\\n\\r\\n    // Token id => Event Id\\r\\n    mapping(uint256 => uint256) public eventIds;\\r\\n\\r\\n    // Event id => Expiry date\\r\\n    mapping(uint256 => uint256) public expiryForEvents;\\r\\n\\r\\n    // Event id => Event owner\\r\\n    mapping(uint256 => address) public eventOwner;\\r\\n\\r\\n    // User address => Event id => Token id\\r\\n    mapping(address => mapping(uint256 => uint256)) userMinted;\\r\\n\\r\\n    // ---------------------------------------------------------------------------------------- //\\r\\n    // *************************************** Events ***************************************** //\\r\\n    // ---------------------------------------------------------------------------------------- //\\r\\n\\r\\n    event BaseURIChanged(string oldURI, string newURI);\\r\\n\\r\\n    event EventOwnerChanged(\\r\\n        uint256 indexed eventId,\\r\\n        address oldEventOwner,\\r\\n        address eventOwner\\r\\n    );\\r\\n\\r\\n    event POANFTMinted(\\r\\n        address indexed to,\\r\\n        uint256 indexed tokenId,\\r\\n        uint256 indexed eventId\\r\\n    );\\r\\n\\r\\n    event POANFTBurned(uint256 tokenId, uint256 eventId);\\r\\n\\r\\n    // ---------------------------------------------------------------------------------------- //\\r\\n    // ************************************* Constructor ************************************** //\\r\\n    // ---------------------------------------------------------------------------------------- //\\r\\n\\r\\n    function initialize(string memory _name, string memory _symbol)\\r\\n        public\\r\\n        initializer\\r\\n    {\\r\\n        __Ownable_init();\\r\\n        __Pausable_init();\\r\\n        __ERC721_init(_name, _symbol);\\r\\n    }\\r\\n\\r\\n    // ---------------------------------------------------------------------------------------- //\\r\\n    // ************************************** Modifiers *************************************** //\\r\\n    // ---------------------------------------------------------------------------------------- //\\r\\n\\r\\n    /**\\r\\n     * @notice Events should not be expired before minting\\r\\n     */\\r\\n    modifier notExpired(uint256 _eventId) {\\r\\n        uint256 expiryDate = expiryForEvents[_eventId];\\r\\n        if (expiryDate != 0) {\\r\\n            require(\\r\\n                block.timestamp < expiryDate,\\r\\n                \\\"CourseNFT: NFT is no longer available for mint\\\"\\r\\n            );\\r\\n        }\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Only permitted addresses can mint\\r\\n     *\\r\\n     *         Permitted:\\r\\n     *         - Owner (if minted on BA website)\\r\\n     *         - Event owner (if the event owner want to mint on his own website)\\r\\n     */\\r\\n    modifier onlyPermitted(uint256 _eventId) {\\r\\n        require(\\r\\n            msg.sender == owner() || msg.sender == eventOwner[_eventId],\\r\\n            \\\"CourseNFT: Only owner or event owner can mint\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    // ---------------------------------------------------------------------------------------- //\\r\\n    // ************************************ View Functions ************************************ //\\r\\n    // ---------------------------------------------------------------------------------------- //\\r\\n\\r\\n    function tokenURI(uint256 _tokenId) public view returns (string memory) {\\r\\n        return _tokenURI(_tokenId);\\r\\n    }\\r\\n\\r\\n    // ---------------------------------------------------------------------------------------- //\\r\\n    // ************************************ Set Functions ************************************* //\\r\\n    // ---------------------------------------------------------------------------------------- //\\r\\n\\r\\n    function setBaseURI(string memory _uri) external onlyOwner {\\r\\n        emit BaseURIChanged(_uri, baseURI);\\r\\n        baseURI = _uri;\\r\\n    }\\r\\n\\r\\n    function setEventOwner(uint256 _eventId, address _eventOwner)\\r\\n        external\\r\\n        onlyOwner\\r\\n    {\\r\\n        emit EventOwnerChanged(_eventId, eventOwner[_eventId], _eventOwner);\\r\\n        eventOwner[_eventId] = _eventOwner;\\r\\n    }\\r\\n\\r\\n    // ---------------------------------------------------------------------------------------- //\\r\\n    // ************************************ Main Functions ************************************ //\\r\\n    // ---------------------------------------------------------------------------------------- //\\r\\n\\r\\n    function mint(address _to, uint256 _eventId)\\r\\n        external\\r\\n        notExpired(_eventId)\\r\\n        onlyPermitted(_eventId)\\r\\n        returns (uint256)\\r\\n    {\\r\\n        require(\\r\\n            userMinted[_to][_eventId] == 0,\\r\\n            \\\"CourseNFT: User already minted\\\"\\r\\n        );\\r\\n\\r\\n        uint256 tokenId = counter++;\\r\\n\\r\\n        _safeMint(_to, tokenId);\\r\\n\\r\\n        // Record this token's course Id\\r\\n        eventIds[tokenId] = _eventId;\\r\\n\\r\\n        userMinted[_to][_eventId] = tokenId;\\r\\n\\r\\n        emit POANFTMinted(_to, tokenId, _eventId);\\r\\n\\r\\n        return tokenId;\\r\\n    }\\r\\n\\r\\n    function burn(uint256 _tokenId) external {\\r\\n        require(\\r\\n            ownerOf[_tokenId] == msg.sender,\\r\\n            \\\"Only the token owner can burn\\\"\\r\\n        );\\r\\n\\r\\n        _burn(_tokenId);\\r\\n\\r\\n        uint256 eventId = eventIds[_tokenId];\\r\\n        delete userMinted[msg.sender][eventId];\\r\\n\\r\\n        emit POANFTBurned(_tokenId, eventIds[_tokenId]);\\r\\n    }\\r\\n\\r\\n    // ---------------------------------------------------------------------------------------- //\\r\\n    // *********************************** Internal Functions ********************************* //\\r\\n    // ---------------------------------------------------------------------------------------- //\\r\\n\\r\\n    /**\\r\\n     * @notice Generate the token URI\\r\\n     *\\r\\n     *         Token URI will be stored on backend\\r\\n     *         URI = \\\"https://api.blockchainacademy.org/api/v1/nft/course/{courseId}\\\"\\r\\n     */\\r\\n    function _tokenURI(uint256 _tokenId) internal view returns (string memory) {\\r\\n        return string.concat(baseURI, eventIds[_tokenId].toString());\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xde6101100f6573a542d1f1e7c6f7150129dbd62fe3f91bf82a91e048d6c3261c\",\"license\":\"MIT\"},\"contracts/base/ERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title ERC721 Token Contract\\r\\n *\\r\\n * @notice This contract is mainly based on solmate/ERC721.sol\\r\\n *         By default, not implement IERC721Metadata\\r\\n */\\r\\nabstract contract ERC721Upgradeable is Initializable {\\r\\n    address internal constant ZERO_ADDRESS = address(0);\\r\\n\\r\\n    string public name;\\r\\n    string public symbol;\\r\\n\\r\\n    mapping(uint256 => address) public ownerOf;\\r\\n    mapping(address => uint256) public balanceOf;\\r\\n\\r\\n    mapping(uint256 => address) public getApproved;\\r\\n    mapping(address => mapping(address => bool)) public isApprovedForAll;\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\r\\n     */\\r\\n    event Transfer(\\r\\n        address indexed from,\\r\\n        address indexed to,\\r\\n        uint256 indexed tokenId\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\r\\n     */\\r\\n    event Approval(\\r\\n        address indexed owner,\\r\\n        address indexed approved,\\r\\n        uint256 indexed tokenId\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\r\\n     */\\r\\n    event ApprovalForAll(\\r\\n        address indexed owner,\\r\\n        address indexed operator,\\r\\n        bool approved\\r\\n    );\\r\\n\\r\\n    function intialize(string memory _name, string memory _symbol)\\r\\n        public\\r\\n        initializer\\r\\n    {\\r\\n        __ERC721_init(_name, _symbol);\\r\\n    }\\r\\n\\r\\n    function __ERC721_init(string memory _name, string memory _symbol)\\r\\n        internal\\r\\n        onlyInitializing\\r\\n    {\\r\\n        name = _name;\\r\\n        symbol = _symbol;\\r\\n    }\\r\\n\\r\\n    function approve(address _spender, uint256 _tokenId) public virtual {\\r\\n        address owner = ownerOf[_tokenId];\\r\\n\\r\\n        require(\\r\\n            msg.sender == owner || isApprovedForAll[owner][msg.sender],\\r\\n            \\\"NOT_AUTHORIZED\\\"\\r\\n        );\\r\\n\\r\\n        getApproved[_tokenId] = _spender;\\r\\n\\r\\n        emit Approval(owner, _spender, _tokenId);\\r\\n    }\\r\\n\\r\\n    function setApprovalForAll(address _operator, bool _approved)\\r\\n        public\\r\\n        virtual\\r\\n    {\\r\\n        isApprovedForAll[msg.sender][_operator] = _approved;\\r\\n\\r\\n        emit ApprovalForAll(msg.sender, _operator, _approved);\\r\\n    }\\r\\n\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 id\\r\\n    ) public virtual {\\r\\n        _beforeTokenTransfer(from, to, id);\\r\\n\\r\\n        require(from == ownerOf[id], \\\"WRONG_FROM\\\");\\r\\n\\r\\n        require(to != ZERO_ADDRESS, \\\"INVALID_RECIPIENT\\\");\\r\\n\\r\\n        require(\\r\\n            msg.sender == from ||\\r\\n                isApprovedForAll[from][msg.sender] ||\\r\\n                msg.sender == getApproved[id],\\r\\n            \\\"NOT_AUTHORIZED\\\"\\r\\n        );\\r\\n\\r\\n        // Underflow of the sender's balance is impossible because we check for\\r\\n        // ownership above and the recipient's balance can't realistically overflow.\\r\\n        unchecked {\\r\\n            --balanceOf[from];\\r\\n\\r\\n            ++balanceOf[to];\\r\\n        }\\r\\n\\r\\n        ownerOf[id] = to;\\r\\n\\r\\n        delete getApproved[id];\\r\\n\\r\\n        emit Transfer(from, to, id);\\r\\n\\r\\n        _afterTokenTransfer(from, to, id);\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 id\\r\\n    ) public virtual {\\r\\n        transferFrom(from, to, id);\\r\\n\\r\\n        require(\\r\\n            to.code.length == 0 ||\\r\\n                IERC721Receiver(to).onERC721Received(\\r\\n                    msg.sender,\\r\\n                    from,\\r\\n                    id,\\r\\n                    \\\"\\\"\\r\\n                ) ==\\r\\n                IERC721Receiver.onERC721Received.selector,\\r\\n            \\\"UNSAFE_RECIPIENT\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 id,\\r\\n        bytes calldata data\\r\\n    ) public virtual {\\r\\n        transferFrom(from, to, id);\\r\\n\\r\\n        require(\\r\\n            to.code.length == 0 ||\\r\\n                IERC721Receiver(to).onERC721Received(\\r\\n                    msg.sender,\\r\\n                    from,\\r\\n                    id,\\r\\n                    data\\r\\n                ) ==\\r\\n                IERC721Receiver.onERC721Received.selector,\\r\\n            \\\"UNSAFE_RECIPIENT\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function supportsInterface(bytes4 interfaceId)\\r\\n        public\\r\\n        view\\r\\n        virtual\\r\\n        returns (bool)\\r\\n    {\\r\\n        return\\r\\n            interfaceId == 0x01ffc9a7 || // ERC165 Interface ID for ERC165\\r\\n            interfaceId == 0x80ac58cd || // ERC165 Interface ID for ERC721\\r\\n            interfaceId == 0x5b5e139f; // ERC165 Interface ID for ERC721Metadata\\r\\n    }\\r\\n\\r\\n    function _mint(address to, uint256 id) internal virtual {\\r\\n        require(to != ZERO_ADDRESS, \\\"INVALID_RECIPIENT\\\");\\r\\n\\r\\n        require(ownerOf[id] == ZERO_ADDRESS, \\\"ALREADY_MINTED\\\");\\r\\n\\r\\n        // Counter overflow is incredibly unrealistic.\\r\\n        unchecked {\\r\\n            ++balanceOf[to];\\r\\n        }\\r\\n\\r\\n        ownerOf[id] = to;\\r\\n\\r\\n        emit Transfer(ZERO_ADDRESS, to, id);\\r\\n    }\\r\\n\\r\\n    function _burn(uint256 id) internal virtual {\\r\\n        address owner = ownerOf[id];\\r\\n\\r\\n        require(owner != ZERO_ADDRESS, \\\"NOT_MINTED\\\");\\r\\n\\r\\n        // Ownership check above ensures no underflow.\\r\\n        unchecked {\\r\\n            --balanceOf[owner];\\r\\n        }\\r\\n\\r\\n        delete ownerOf[id];\\r\\n\\r\\n        delete getApproved[id];\\r\\n\\r\\n        emit Transfer(owner, ZERO_ADDRESS, id);\\r\\n    }\\r\\n\\r\\n    function _safeMint(address to, uint256 id) internal virtual {\\r\\n        _mint(to, id);\\r\\n\\r\\n        require(\\r\\n            to.code.length == 0 ||\\r\\n                IERC721Receiver(to).onERC721Received(\\r\\n                    msg.sender,\\r\\n                    address(0),\\r\\n                    id,\\r\\n                    \\\"\\\"\\r\\n                ) ==\\r\\n                IERC721Receiver.onERC721Received.selector,\\r\\n            \\\"UNSAFE_RECIPIENT\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _safeMint(\\r\\n        address to,\\r\\n        uint256 id,\\r\\n        bytes memory data\\r\\n    ) internal virtual {\\r\\n        _mint(to, id);\\r\\n\\r\\n        require(\\r\\n            to.code.length == 0 ||\\r\\n                IERC721Receiver(to).onERC721Received(\\r\\n                    msg.sender,\\r\\n                    address(0),\\r\\n                    id,\\r\\n                    data\\r\\n                ) ==\\r\\n                IERC721Receiver.onERC721Received.selector,\\r\\n            \\\"UNSAFE_RECIPIENT\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _beforeTokenTransfer(\\r\\n        address _from,\\r\\n        address _to,\\r\\n        uint256 _tokenId\\r\\n    ) internal virtual {}\\r\\n\\r\\n    function _afterTokenTransfer(\\r\\n        address _from,\\r\\n        address _to,\\r\\n        uint256 _tokenId\\r\\n    ) internal virtual {}\\r\\n}\\r\\n\",\"keccak256\":\"0x8933f1844e1a551ba6dd81ecb9958427fc0c57ddec8f10f25cfa7901ebe68833\",\"license\":\"MIT\"},\"contracts/base/ILinkableSBT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\ninterface ILinkableSBT {\\r\\n    function onERC721Linked(\\r\\n        address from,\\r\\n        uint256 fromTokenId,\\r\\n        address to,\\r\\n        uint256 toTokenId\\r\\n    ) external returns (bytes4);\\r\\n}\\r\\n\",\"keccak256\":\"0xab00e82240c42de3da8c60ae4d738d4b919ca52c3ef22c3925147c921d3f367e\",\"license\":\"MIT\"},\"contracts/base/Linkable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\nimport \\\"./ILinkableSBT.sol\\\";\\r\\n\\r\\nabstract contract Linkable {\\r\\n    // Token id => Keccak256(contract, id)\\r\\n    mapping(uint256 => bytes32) public links;\\r\\n\\r\\n    /**\\r\\n     * @notice Ensure that this tokenId not already linked\\r\\n     */\\r\\n    modifier notLinked(uint256 _tokenId) {\\r\\n        require(\\r\\n            links[_tokenId] == bytes32(0),\\r\\n            \\\"Linkable: token already linked to another sbt\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Link a token to a SoulBoundToken\\r\\n     *\\r\\n     *         The target token address must be a soul-bound token\\r\\n     *         It should check the target has the interface\\r\\n     */\\r\\n    function _link(\\r\\n        address _sbt,\\r\\n        uint256 _targetTokenId,\\r\\n        uint256 _tokenId\\r\\n    ) internal virtual notLinked(_tokenId) {\\r\\n        links[_tokenId] = keccak256(abi.encodePacked(_sbt, _targetTokenId));\\r\\n\\r\\n        require(\\r\\n            _sbt.code.length != 0 &&\\r\\n                ILinkableSBT(_sbt).onERC721Linked(\\r\\n                    address(this),\\r\\n                    _tokenId,\\r\\n                    _sbt,\\r\\n                    _targetTokenId\\r\\n                ) ==\\r\\n                ILinkableSBT.onERC721Linked.selector,\\r\\n            \\\"UNSAFE_LINK\\\"\\r\\n        );\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x13f94dbc9eb792629dd214ff3f6dee7d9a17004a7c064c76a793de66daa58ce7\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50613bc5806100206000396000f3fe608060405234801561001057600080fd5b50600436106101cf5760003560e01c80636c0360eb11610104578063998f6ac0116100a2578063c87b56dd11610071578063c87b56dd1461053e578063e985e9c51461056e578063f105a5f11461059e578063f2fde38b146105ba576101cf565b8063998f6ac0146104a6578063a22cb465146104d6578063b4d59d27146104f2578063b88d4fde14610522576101cf565b806385b984e2116100de57806385b984e21461041e578063881d8a401461043a5780638da5cb5b1461046a57806395d89b4114610488576101cf565b80636c0360eb146103c657806370a08231146103e4578063715018a614610414576101cf565b806342966c68116101715780635c975abb1161014b5780635c975abb1461032a57806361bc221a146103485780636352211e1461036657806364fa89f514610396576101cf565b806342966c68146102d65780634cd88b76146102f257806355f804b31461030e576101cf565b8063095ea7b3116101ad578063095ea7b31461025257806323b872dd1461026e57806340c10f191461028a57806342842e0e146102ba576101cf565b806301ffc9a7146101d457806306fdde0314610204578063081812fc14610222575b600080fd5b6101ee60048036038101906101e991906125f3565b6105d6565b6040516101fb919061263b565b60405180910390f35b61020c610668565b60405161021991906126e6565b60405180910390f35b61023c6004803603810190610237919061273e565b6106f6565b60405161024991906127ac565b60405180910390f35b61026c600480360381019061026791906127f3565b610729565b005b61028860048036038101906102839190612833565b610912565b005b6102a4600480360381019061029f91906127f3565b610d23565b6040516102b19190612895565b60405180910390f35b6102d460048036038101906102cf9190612833565b610fdf565b005b6102f060048036038101906102eb919061273e565b611117565b005b61030c600480360381019061030791906129e5565b61127d565b005b61032860048036038101906103239190612a5d565b6113cf565b005b610332611424565b60405161033f919061263b565b60405180910390f35b61035061143b565b60405161035d9190612895565b60405180910390f35b610380600480360381019061037b919061273e565b611441565b60405161038d91906127ac565b60405180910390f35b6103b060048036038101906103ab919061273e565b611474565b6040516103bd9190612895565b60405180910390f35b6103ce61148c565b6040516103db91906126e6565b60405180910390f35b6103fe60048036038101906103f99190612aa6565b61151a565b60405161040b9190612895565b60405180910390f35b61041c611532565b005b61043860048036038101906104339190612ad3565b611546565b005b610454600480360381019061044f919061273e565b611611565b6040516104619190612b2c565b60405180910390f35b610472611629565b60405161047f91906127ac565b60405180910390f35b610490611653565b60405161049d91906126e6565b60405180910390f35b6104c060048036038101906104bb919061273e565b6116e1565b6040516104cd9190612895565b60405180910390f35b6104f060048036038101906104eb9190612b73565b6116f9565b005b61050c6004803603810190610507919061273e565b6117f6565b60405161051991906127ac565b60405180910390f35b61053c60048036038101906105379190612c13565b611829565b005b6105586004803603810190610553919061273e565b611967565b60405161056591906126e6565b60405180910390f35b61058860048036038101906105839190612c9b565b611979565b604051610595919061263b565b60405180910390f35b6105b860048036038101906105b391906129e5565b6119a8565b005b6105d460048036038101906105cf9190612aa6565b611aea565b005b60006301ffc9a760e01b827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061063157506380ac58cd60e01b827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806106615750635b5e139f60e01b827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b9050919050565b6097805461067590612d0a565b80601f01602080910402602001604051908101604052809291908181526020018280546106a190612d0a565b80156106ee5780601f106106c3576101008083540402835291602001916106ee565b820191906000526020600020905b8154815290600101906020018083116106d157829003601f168201915b505050505081565b609b6020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006099600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806108215750609c60008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b610860576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161085790612d87565b60405180910390fd5b82609b600084815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550818373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a4505050565b61091d838383611b6d565b6099600082815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16146109be576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109b590612df3565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610a2d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a2490612e5f565b60405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480610aed5750609c60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b80610b565750609b600082815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b610b95576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b8c90612d87565b60405180910390fd5b609a60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600081546001900391905081905550609a60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000815460010191905081905550816099600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550609b600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4610d1e838383611b72565b505050565b600081600060a1600083815260200190815260200160002054905060008114610d8957804210610d88576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d7f90612ef1565b60405180910390fd5b5b83610d92611629565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480610e29575060a2600082815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b610e68576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e5f90612f83565b60405180910390fd5b600060a360008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008781526020019081526020016000205414610efb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ef290612fef565b60405180910390fd5b6000609e6000815480929190610f109061303e565b919050559050610f208782611b77565b8560a06000838152602001908152602001600020819055508060a360008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008881526020019081526020016000208190555085818873ffffffffffffffffffffffffffffffffffffffff167f3f3bbb46b1493d3a3c23fb54fe1690c322b8f527c0b8dfc0fc0e1171d582817560405160405180910390a48094505050505092915050565b610fea838383610912565b60008273ffffffffffffffffffffffffffffffffffffffff163b14806110d3575063150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168273ffffffffffffffffffffffffffffffffffffffff1663150b7a023386856040518463ffffffff1660e01b815260040161106f939291906130bd565b6020604051808303816000875af115801561108e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110b2919061311c565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b611112576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161110990613195565b60405180910390fd5b505050565b3373ffffffffffffffffffffffffffffffffffffffff166099600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146111b8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111af90613201565b60405180910390fd5b6111c181611cae565b600060a0600083815260200190815260200160002054905060a360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828152602001908152602001600020600090557f174e294080ac26e758ed9757419556c2e1bcfff9724417643a378d78f287a17f8260a0600085815260200190815260200160002054604051611271929190613221565b60405180910390a15050565b60008060019054906101000a900460ff161590508080156112ae5750600160008054906101000a900460ff1660ff16105b806112db57506112bd30611e6f565b1580156112da5750600160008054906101000a900460ff1660ff16145b5b61131a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611311906132bc565b60405180910390fd5b60016000806101000a81548160ff021916908360ff1602179055508015611357576001600060016101000a81548160ff0219169083151502179055505b61135f611e92565b611367611eeb565b6113718383611f44565b80156113ca5760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249860016040516113c1919061332e565b60405180910390a15b505050565b6113d7611fb7565b7fc41b7cb64e5be01af4afc2641afc861432136270f4206b7773f229b658b9669981609f6040516114099291906133e2565b60405180910390a180609f908161142091906135a6565b5050565b6000606560009054906101000a900460ff16905090565b609e5481565b60996020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60a16020528060005260406000206000915090505481565b609f805461149990612d0a565b80601f01602080910402602001604051908101604052809291908181526020018280546114c590612d0a565b80156115125780601f106114e757610100808354040283529160200191611512565b820191906000526020600020905b8154815290600101906020018083116114f557829003601f168201915b505050505081565b609a6020528060005260406000206000915090505481565b61153a611fb7565b6115446000612035565b565b61154e611fb7565b817f153992e28a842ed0d525ca079ad41bdad7a8250e52a8d56893c17bd25ccc10ad60a2600085815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040516115b3929190613678565b60405180910390a28060a2600084815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b609d6020528060005260406000206000915090505481565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6098805461166090612d0a565b80601f016020809104026020016040519081016040528092919081815260200182805461168c90612d0a565b80156116d95780601f106116ae576101008083540402835291602001916116d9565b820191906000526020600020905b8154815290600101906020018083116116bc57829003601f168201915b505050505081565b60a06020528060005260406000206000915090505481565b80609c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516117ea919061263b565b60405180910390a35050565b60a26020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b611834858585610912565b60008473ffffffffffffffffffffffffffffffffffffffff163b1480611921575063150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168473ffffffffffffffffffffffffffffffffffffffff1663150b7a0233888787876040518663ffffffff1660e01b81526004016118bd9594939291906136ce565b6020604051808303816000875af11580156118dc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611900919061311c565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b611960576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161195790613195565b60405180910390fd5b5050505050565b6060611972826120fb565b9050919050565b609c6020528160005260406000206020528060005260406000206000915091509054906101000a900460ff1681565b60008060019054906101000a900460ff161590508080156119d95750600160008054906101000a900460ff1660ff16105b80611a0657506119e830611e6f565b158015611a055750600160008054906101000a900460ff1660ff16145b5b611a45576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a3c906132bc565b60405180910390fd5b60016000806101000a81548160ff021916908360ff1602179055508015611a82576001600060016101000a81548160ff0219169083151502179055505b611a8c8383611f44565b8015611ae55760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024986001604051611adc919061332e565b60405180910390a15b505050565b611af2611fb7565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611b61576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b589061378e565b60405180910390fd5b611b6a81612035565b50565b505050565b505050565b611b818282612142565b60008273ffffffffffffffffffffffffffffffffffffffff163b1480611c6b575063150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168273ffffffffffffffffffffffffffffffffffffffff1663150b7a02336000856040518463ffffffff1660e01b8152600401611c07939291906130bd565b6020604051808303816000875af1158015611c26573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c4a919061311c565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b611caa576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ca190613195565b60405180910390fd5b5050565b60006099600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611d55576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d4c906137fa565b60405180910390fd5b609a60008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000815460019003919050819055506099600083815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055609b600083815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905581600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600060019054906101000a900460ff16611ee1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ed89061388c565b60405180910390fd5b611ee9612352565b565b600060019054906101000a900460ff16611f3a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f319061388c565b60405180910390fd5b611f426123b3565b565b600060019054906101000a900460ff16611f93576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f8a9061388c565b60405180910390fd5b8160979081611fa291906135a6565b508060989081611fb291906135a6565b505050565b611fbf61241f565b73ffffffffffffffffffffffffffffffffffffffff16611fdd611629565b73ffffffffffffffffffffffffffffffffffffffff1614612033576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161202a906138f8565b60405180910390fd5b565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6060609f61211b60a0600085815260200190815260200160002054612427565b60405160200161212c9291906139d7565b6040516020818303038152906040529050919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036121b1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121a890612e5f565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff166099600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614612253576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161224a90613a47565b60405180910390fd5b609a60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000815460010191905081905550816099600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050565b600060019054906101000a900460ff166123a1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123989061388c565b60405180910390fd5b6123b16123ac61241f565b612035565b565b600060019054906101000a900460ff16612402576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123f99061388c565b60405180910390fd5b6000606560006101000a81548160ff021916908315150217905550565b600033905090565b60606000820361246e576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050612582565b600082905060005b600082146124a05780806124899061303e565b915050600a826124999190613a96565b9150612476565b60008167ffffffffffffffff8111156124bc576124bb6128ba565b5b6040519080825280601f01601f1916602001820160405280156124ee5781602001600182028036833780820191505090505b5090505b6000851461257b576001826125079190613ac7565b9150600a856125169190613afb565b60306125229190613b2c565b60f81b81838151811061253857612537613b60565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a856125749190613a96565b94506124f2565b8093505050505b919050565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6125d08161259b565b81146125db57600080fd5b50565b6000813590506125ed816125c7565b92915050565b60006020828403121561260957612608612591565b5b6000612617848285016125de565b91505092915050565b60008115159050919050565b61263581612620565b82525050565b6000602082019050612650600083018461262c565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015612690578082015181840152602081019050612675565b60008484015250505050565b6000601f19601f8301169050919050565b60006126b882612656565b6126c28185612661565b93506126d2818560208601612672565b6126db8161269c565b840191505092915050565b6000602082019050818103600083015261270081846126ad565b905092915050565b6000819050919050565b61271b81612708565b811461272657600080fd5b50565b60008135905061273881612712565b92915050565b60006020828403121561275457612753612591565b5b600061276284828501612729565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006127968261276b565b9050919050565b6127a68161278b565b82525050565b60006020820190506127c1600083018461279d565b92915050565b6127d08161278b565b81146127db57600080fd5b50565b6000813590506127ed816127c7565b92915050565b6000806040838503121561280a57612809612591565b5b6000612818858286016127de565b925050602061282985828601612729565b9150509250929050565b60008060006060848603121561284c5761284b612591565b5b600061285a868287016127de565b935050602061286b868287016127de565b925050604061287c86828701612729565b9150509250925092565b61288f81612708565b82525050565b60006020820190506128aa6000830184612886565b92915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6128f28261269c565b810181811067ffffffffffffffff82111715612911576129106128ba565b5b80604052505050565b6000612924612587565b905061293082826128e9565b919050565b600067ffffffffffffffff8211156129505761294f6128ba565b5b6129598261269c565b9050602081019050919050565b82818337600083830152505050565b600061298861298384612935565b61291a565b9050828152602081018484840111156129a4576129a36128b5565b5b6129af848285612966565b509392505050565b600082601f8301126129cc576129cb6128b0565b5b81356129dc848260208601612975565b91505092915050565b600080604083850312156129fc576129fb612591565b5b600083013567ffffffffffffffff811115612a1a57612a19612596565b5b612a26858286016129b7565b925050602083013567ffffffffffffffff811115612a4757612a46612596565b5b612a53858286016129b7565b9150509250929050565b600060208284031215612a7357612a72612591565b5b600082013567ffffffffffffffff811115612a9157612a90612596565b5b612a9d848285016129b7565b91505092915050565b600060208284031215612abc57612abb612591565b5b6000612aca848285016127de565b91505092915050565b60008060408385031215612aea57612ae9612591565b5b6000612af885828601612729565b9250506020612b09858286016127de565b9150509250929050565b6000819050919050565b612b2681612b13565b82525050565b6000602082019050612b416000830184612b1d565b92915050565b612b5081612620565b8114612b5b57600080fd5b50565b600081359050612b6d81612b47565b92915050565b60008060408385031215612b8a57612b89612591565b5b6000612b98858286016127de565b9250506020612ba985828601612b5e565b9150509250929050565b600080fd5b600080fd5b60008083601f840112612bd357612bd26128b0565b5b8235905067ffffffffffffffff811115612bf057612bef612bb3565b5b602083019150836001820283011115612c0c57612c0b612bb8565b5b9250929050565b600080600080600060808688031215612c2f57612c2e612591565b5b6000612c3d888289016127de565b9550506020612c4e888289016127de565b9450506040612c5f88828901612729565b935050606086013567ffffffffffffffff811115612c8057612c7f612596565b5b612c8c88828901612bbd565b92509250509295509295909350565b60008060408385031215612cb257612cb1612591565b5b6000612cc0858286016127de565b9250506020612cd1858286016127de565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680612d2257607f821691505b602082108103612d3557612d34612cdb565b5b50919050565b7f4e4f545f415554484f52495a4544000000000000000000000000000000000000600082015250565b6000612d71600e83612661565b9150612d7c82612d3b565b602082019050919050565b60006020820190508181036000830152612da081612d64565b9050919050565b7f57524f4e475f46524f4d00000000000000000000000000000000000000000000600082015250565b6000612ddd600a83612661565b9150612de882612da7565b602082019050919050565b60006020820190508181036000830152612e0c81612dd0565b9050919050565b7f494e56414c49445f524543495049454e54000000000000000000000000000000600082015250565b6000612e49601183612661565b9150612e5482612e13565b602082019050919050565b60006020820190508181036000830152612e7881612e3c565b9050919050565b7f436f757273654e46543a204e4654206973206e6f206c6f6e676572206176616960008201527f6c61626c6520666f72206d696e74000000000000000000000000000000000000602082015250565b6000612edb602e83612661565b9150612ee682612e7f565b604082019050919050565b60006020820190508181036000830152612f0a81612ece565b9050919050565b7f436f757273654e46543a204f6e6c79206f776e6572206f72206576656e74206f60008201527f776e65722063616e206d696e7400000000000000000000000000000000000000602082015250565b6000612f6d602d83612661565b9150612f7882612f11565b604082019050919050565b60006020820190508181036000830152612f9c81612f60565b9050919050565b7f436f757273654e46543a205573657220616c7265616479206d696e7465640000600082015250565b6000612fd9601e83612661565b9150612fe482612fa3565b602082019050919050565b6000602082019050818103600083015261300881612fcc565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061304982612708565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361307b5761307a61300f565b5b600182019050919050565b600082825260208201905092915050565b50565b60006130a7600083613086565b91506130b282613097565b600082019050919050565b60006080820190506130d2600083018661279d565b6130df602083018561279d565b6130ec6040830184612886565b81810360608301526130fd8161309a565b9050949350505050565b600081519050613116816125c7565b92915050565b60006020828403121561313257613131612591565b5b600061314084828501613107565b91505092915050565b7f554e534146455f524543495049454e5400000000000000000000000000000000600082015250565b600061317f601083612661565b915061318a82613149565b602082019050919050565b600060208201905081810360008301526131ae81613172565b9050919050565b7f4f6e6c792074686520746f6b656e206f776e65722063616e206275726e000000600082015250565b60006131eb601d83612661565b91506131f6826131b5565b602082019050919050565b6000602082019050818103600083015261321a816131de565b9050919050565b60006040820190506132366000830185612886565b6132436020830184612886565b9392505050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b60006132a6602e83612661565b91506132b18261324a565b604082019050919050565b600060208201905081810360008301526132d581613299565b9050919050565b6000819050919050565b600060ff82169050919050565b6000819050919050565b600061331861331361330e846132dc565b6132f3565b6132e6565b9050919050565b613328816132fd565b82525050565b6000602082019050613343600083018461331f565b92915050565b60008190508160005260206000209050919050565b6000815461336b81612d0a565b6133758186612661565b9450600182166000811461339057600181146133a6576133d9565b60ff1983168652811515602002860193506133d9565b6133af85613349565b60005b838110156133d1578154818901526001820191506020810190506133b2565b808801955050505b50505092915050565b600060408201905081810360008301526133fc81856126ad565b90508181036020830152613410818461335e565b90509392505050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026134667fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82613429565b6134708683613429565b95508019841693508086168417925050509392505050565b60006134a361349e61349984612708565b6132f3565b612708565b9050919050565b6000819050919050565b6134bd83613488565b6134d16134c9826134aa565b848454613436565b825550505050565b600090565b6134e66134d9565b6134f18184846134b4565b505050565b5b818110156135155761350a6000826134de565b6001810190506134f7565b5050565b601f82111561355a5761352b81613349565b61353484613419565b81016020851015613543578190505b61355761354f85613419565b8301826134f6565b50505b505050565b600082821c905092915050565b600061357d6000198460080261355f565b1980831691505092915050565b6000613596838361356c565b9150826002028217905092915050565b6135af82612656565b67ffffffffffffffff8111156135c8576135c76128ba565b5b6135d28254612d0a565b6135dd828285613519565b600060209050601f83116001811461361057600084156135fe578287015190505b613608858261358a565b865550613670565b601f19841661361e86613349565b60005b8281101561364657848901518255600182019150602085019450602081019050613621565b86831015613663578489015161365f601f89168261356c565b8355505b6001600288020188555050505b505050505050565b600060408201905061368d600083018561279d565b61369a602083018461279d565b9392505050565b60006136ad8385613086565b93506136ba838584612966565b6136c38361269c565b840190509392505050565b60006080820190506136e3600083018861279d565b6136f0602083018761279d565b6136fd6040830186612886565b81810360608301526137108184866136a1565b90509695505050505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000613778602683612661565b91506137838261371c565b604082019050919050565b600060208201905081810360008301526137a78161376b565b9050919050565b7f4e4f545f4d494e54454400000000000000000000000000000000000000000000600082015250565b60006137e4600a83612661565b91506137ef826137ae565b602082019050919050565b60006020820190508181036000830152613813816137d7565b9050919050565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b6000613876602b83612661565b91506138818261381a565b604082019050919050565b600060208201905081810360008301526138a581613869565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006138e2602083612661565b91506138ed826138ac565b602082019050919050565b60006020820190508181036000830152613911816138d5565b9050919050565b600081905092915050565b6000815461393081612d0a565b61393a8186613918565b94506001821660008114613955576001811461396a5761399d565b60ff198316865281151582028601935061399d565b61397385613349565b60005b8381101561399557815481890152600182019150602081019050613976565b838801955050505b50505092915050565b60006139b182612656565b6139bb8185613918565b93506139cb818560208601612672565b80840191505092915050565b60006139e38285613923565b91506139ef82846139a6565b91508190509392505050565b7f414c52454144595f4d494e544544000000000000000000000000000000000000600082015250565b6000613a31600e83612661565b9150613a3c826139fb565b602082019050919050565b60006020820190508181036000830152613a6081613a24565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000613aa182612708565b9150613aac83612708565b925082613abc57613abb613a67565b5b828204905092915050565b6000613ad282612708565b9150613add83612708565b9250828203905081811115613af557613af461300f565b5b92915050565b6000613b0682612708565b9150613b1183612708565b925082613b2157613b20613a67565b5b828206905092915050565b6000613b3782612708565b9150613b4283612708565b9250828201905080821115613b5a57613b5961300f565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fdfea2646970667358221220720728c54fe305305743e39997b242d57ae2dc2ae68a953096f7735fcb6f8f1c64736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101cf5760003560e01c80636c0360eb11610104578063998f6ac0116100a2578063c87b56dd11610071578063c87b56dd1461053e578063e985e9c51461056e578063f105a5f11461059e578063f2fde38b146105ba576101cf565b8063998f6ac0146104a6578063a22cb465146104d6578063b4d59d27146104f2578063b88d4fde14610522576101cf565b806385b984e2116100de57806385b984e21461041e578063881d8a401461043a5780638da5cb5b1461046a57806395d89b4114610488576101cf565b80636c0360eb146103c657806370a08231146103e4578063715018a614610414576101cf565b806342966c68116101715780635c975abb1161014b5780635c975abb1461032a57806361bc221a146103485780636352211e1461036657806364fa89f514610396576101cf565b806342966c68146102d65780634cd88b76146102f257806355f804b31461030e576101cf565b8063095ea7b3116101ad578063095ea7b31461025257806323b872dd1461026e57806340c10f191461028a57806342842e0e146102ba576101cf565b806301ffc9a7146101d457806306fdde0314610204578063081812fc14610222575b600080fd5b6101ee60048036038101906101e991906125f3565b6105d6565b6040516101fb919061263b565b60405180910390f35b61020c610668565b60405161021991906126e6565b60405180910390f35b61023c6004803603810190610237919061273e565b6106f6565b60405161024991906127ac565b60405180910390f35b61026c600480360381019061026791906127f3565b610729565b005b61028860048036038101906102839190612833565b610912565b005b6102a4600480360381019061029f91906127f3565b610d23565b6040516102b19190612895565b60405180910390f35b6102d460048036038101906102cf9190612833565b610fdf565b005b6102f060048036038101906102eb919061273e565b611117565b005b61030c600480360381019061030791906129e5565b61127d565b005b61032860048036038101906103239190612a5d565b6113cf565b005b610332611424565b60405161033f919061263b565b60405180910390f35b61035061143b565b60405161035d9190612895565b60405180910390f35b610380600480360381019061037b919061273e565b611441565b60405161038d91906127ac565b60405180910390f35b6103b060048036038101906103ab919061273e565b611474565b6040516103bd9190612895565b60405180910390f35b6103ce61148c565b6040516103db91906126e6565b60405180910390f35b6103fe60048036038101906103f99190612aa6565b61151a565b60405161040b9190612895565b60405180910390f35b61041c611532565b005b61043860048036038101906104339190612ad3565b611546565b005b610454600480360381019061044f919061273e565b611611565b6040516104619190612b2c565b60405180910390f35b610472611629565b60405161047f91906127ac565b60405180910390f35b610490611653565b60405161049d91906126e6565b60405180910390f35b6104c060048036038101906104bb919061273e565b6116e1565b6040516104cd9190612895565b60405180910390f35b6104f060048036038101906104eb9190612b73565b6116f9565b005b61050c6004803603810190610507919061273e565b6117f6565b60405161051991906127ac565b60405180910390f35b61053c60048036038101906105379190612c13565b611829565b005b6105586004803603810190610553919061273e565b611967565b60405161056591906126e6565b60405180910390f35b61058860048036038101906105839190612c9b565b611979565b604051610595919061263b565b60405180910390f35b6105b860048036038101906105b391906129e5565b6119a8565b005b6105d460048036038101906105cf9190612aa6565b611aea565b005b60006301ffc9a760e01b827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061063157506380ac58cd60e01b827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806106615750635b5e139f60e01b827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b9050919050565b6097805461067590612d0a565b80601f01602080910402602001604051908101604052809291908181526020018280546106a190612d0a565b80156106ee5780601f106106c3576101008083540402835291602001916106ee565b820191906000526020600020905b8154815290600101906020018083116106d157829003601f168201915b505050505081565b609b6020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006099600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806108215750609c60008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b610860576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161085790612d87565b60405180910390fd5b82609b600084815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550818373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a4505050565b61091d838383611b6d565b6099600082815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16146109be576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109b590612df3565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610a2d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a2490612e5f565b60405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480610aed5750609c60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b80610b565750609b600082815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b610b95576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b8c90612d87565b60405180910390fd5b609a60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600081546001900391905081905550609a60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000815460010191905081905550816099600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550609b600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4610d1e838383611b72565b505050565b600081600060a1600083815260200190815260200160002054905060008114610d8957804210610d88576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d7f90612ef1565b60405180910390fd5b5b83610d92611629565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480610e29575060a2600082815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b610e68576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e5f90612f83565b60405180910390fd5b600060a360008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008781526020019081526020016000205414610efb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ef290612fef565b60405180910390fd5b6000609e6000815480929190610f109061303e565b919050559050610f208782611b77565b8560a06000838152602001908152602001600020819055508060a360008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008881526020019081526020016000208190555085818873ffffffffffffffffffffffffffffffffffffffff167f3f3bbb46b1493d3a3c23fb54fe1690c322b8f527c0b8dfc0fc0e1171d582817560405160405180910390a48094505050505092915050565b610fea838383610912565b60008273ffffffffffffffffffffffffffffffffffffffff163b14806110d3575063150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168273ffffffffffffffffffffffffffffffffffffffff1663150b7a023386856040518463ffffffff1660e01b815260040161106f939291906130bd565b6020604051808303816000875af115801561108e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110b2919061311c565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b611112576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161110990613195565b60405180910390fd5b505050565b3373ffffffffffffffffffffffffffffffffffffffff166099600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146111b8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111af90613201565b60405180910390fd5b6111c181611cae565b600060a0600083815260200190815260200160002054905060a360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828152602001908152602001600020600090557f174e294080ac26e758ed9757419556c2e1bcfff9724417643a378d78f287a17f8260a0600085815260200190815260200160002054604051611271929190613221565b60405180910390a15050565b60008060019054906101000a900460ff161590508080156112ae5750600160008054906101000a900460ff1660ff16105b806112db57506112bd30611e6f565b1580156112da5750600160008054906101000a900460ff1660ff16145b5b61131a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611311906132bc565b60405180910390fd5b60016000806101000a81548160ff021916908360ff1602179055508015611357576001600060016101000a81548160ff0219169083151502179055505b61135f611e92565b611367611eeb565b6113718383611f44565b80156113ca5760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249860016040516113c1919061332e565b60405180910390a15b505050565b6113d7611fb7565b7fc41b7cb64e5be01af4afc2641afc861432136270f4206b7773f229b658b9669981609f6040516114099291906133e2565b60405180910390a180609f908161142091906135a6565b5050565b6000606560009054906101000a900460ff16905090565b609e5481565b60996020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60a16020528060005260406000206000915090505481565b609f805461149990612d0a565b80601f01602080910402602001604051908101604052809291908181526020018280546114c590612d0a565b80156115125780601f106114e757610100808354040283529160200191611512565b820191906000526020600020905b8154815290600101906020018083116114f557829003601f168201915b505050505081565b609a6020528060005260406000206000915090505481565b61153a611fb7565b6115446000612035565b565b61154e611fb7565b817f153992e28a842ed0d525ca079ad41bdad7a8250e52a8d56893c17bd25ccc10ad60a2600085815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040516115b3929190613678565b60405180910390a28060a2600084815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b609d6020528060005260406000206000915090505481565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6098805461166090612d0a565b80601f016020809104026020016040519081016040528092919081815260200182805461168c90612d0a565b80156116d95780601f106116ae576101008083540402835291602001916116d9565b820191906000526020600020905b8154815290600101906020018083116116bc57829003601f168201915b505050505081565b60a06020528060005260406000206000915090505481565b80609c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516117ea919061263b565b60405180910390a35050565b60a26020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b611834858585610912565b60008473ffffffffffffffffffffffffffffffffffffffff163b1480611921575063150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168473ffffffffffffffffffffffffffffffffffffffff1663150b7a0233888787876040518663ffffffff1660e01b81526004016118bd9594939291906136ce565b6020604051808303816000875af11580156118dc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611900919061311c565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b611960576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161195790613195565b60405180910390fd5b5050505050565b6060611972826120fb565b9050919050565b609c6020528160005260406000206020528060005260406000206000915091509054906101000a900460ff1681565b60008060019054906101000a900460ff161590508080156119d95750600160008054906101000a900460ff1660ff16105b80611a0657506119e830611e6f565b158015611a055750600160008054906101000a900460ff1660ff16145b5b611a45576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a3c906132bc565b60405180910390fd5b60016000806101000a81548160ff021916908360ff1602179055508015611a82576001600060016101000a81548160ff0219169083151502179055505b611a8c8383611f44565b8015611ae55760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024986001604051611adc919061332e565b60405180910390a15b505050565b611af2611fb7565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611b61576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b589061378e565b60405180910390fd5b611b6a81612035565b50565b505050565b505050565b611b818282612142565b60008273ffffffffffffffffffffffffffffffffffffffff163b1480611c6b575063150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168273ffffffffffffffffffffffffffffffffffffffff1663150b7a02336000856040518463ffffffff1660e01b8152600401611c07939291906130bd565b6020604051808303816000875af1158015611c26573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c4a919061311c565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b611caa576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ca190613195565b60405180910390fd5b5050565b60006099600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611d55576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d4c906137fa565b60405180910390fd5b609a60008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000815460019003919050819055506099600083815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055609b600083815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905581600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600060019054906101000a900460ff16611ee1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ed89061388c565b60405180910390fd5b611ee9612352565b565b600060019054906101000a900460ff16611f3a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f319061388c565b60405180910390fd5b611f426123b3565b565b600060019054906101000a900460ff16611f93576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f8a9061388c565b60405180910390fd5b8160979081611fa291906135a6565b508060989081611fb291906135a6565b505050565b611fbf61241f565b73ffffffffffffffffffffffffffffffffffffffff16611fdd611629565b73ffffffffffffffffffffffffffffffffffffffff1614612033576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161202a906138f8565b60405180910390fd5b565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6060609f61211b60a0600085815260200190815260200160002054612427565b60405160200161212c9291906139d7565b6040516020818303038152906040529050919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036121b1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121a890612e5f565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff166099600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614612253576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161224a90613a47565b60405180910390fd5b609a60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000815460010191905081905550816099600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050565b600060019054906101000a900460ff166123a1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123989061388c565b60405180910390fd5b6123b16123ac61241f565b612035565b565b600060019054906101000a900460ff16612402576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123f99061388c565b60405180910390fd5b6000606560006101000a81548160ff021916908315150217905550565b600033905090565b60606000820361246e576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050612582565b600082905060005b600082146124a05780806124899061303e565b915050600a826124999190613a96565b9150612476565b60008167ffffffffffffffff8111156124bc576124bb6128ba565b5b6040519080825280601f01601f1916602001820160405280156124ee5781602001600182028036833780820191505090505b5090505b6000851461257b576001826125079190613ac7565b9150600a856125169190613afb565b60306125229190613b2c565b60f81b81838151811061253857612537613b60565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a856125749190613a96565b94506124f2565b8093505050505b919050565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6125d08161259b565b81146125db57600080fd5b50565b6000813590506125ed816125c7565b92915050565b60006020828403121561260957612608612591565b5b6000612617848285016125de565b91505092915050565b60008115159050919050565b61263581612620565b82525050565b6000602082019050612650600083018461262c565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015612690578082015181840152602081019050612675565b60008484015250505050565b6000601f19601f8301169050919050565b60006126b882612656565b6126c28185612661565b93506126d2818560208601612672565b6126db8161269c565b840191505092915050565b6000602082019050818103600083015261270081846126ad565b905092915050565b6000819050919050565b61271b81612708565b811461272657600080fd5b50565b60008135905061273881612712565b92915050565b60006020828403121561275457612753612591565b5b600061276284828501612729565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006127968261276b565b9050919050565b6127a68161278b565b82525050565b60006020820190506127c1600083018461279d565b92915050565b6127d08161278b565b81146127db57600080fd5b50565b6000813590506127ed816127c7565b92915050565b6000806040838503121561280a57612809612591565b5b6000612818858286016127de565b925050602061282985828601612729565b9150509250929050565b60008060006060848603121561284c5761284b612591565b5b600061285a868287016127de565b935050602061286b868287016127de565b925050604061287c86828701612729565b9150509250925092565b61288f81612708565b82525050565b60006020820190506128aa6000830184612886565b92915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6128f28261269c565b810181811067ffffffffffffffff82111715612911576129106128ba565b5b80604052505050565b6000612924612587565b905061293082826128e9565b919050565b600067ffffffffffffffff8211156129505761294f6128ba565b5b6129598261269c565b9050602081019050919050565b82818337600083830152505050565b600061298861298384612935565b61291a565b9050828152602081018484840111156129a4576129a36128b5565b5b6129af848285612966565b509392505050565b600082601f8301126129cc576129cb6128b0565b5b81356129dc848260208601612975565b91505092915050565b600080604083850312156129fc576129fb612591565b5b600083013567ffffffffffffffff811115612a1a57612a19612596565b5b612a26858286016129b7565b925050602083013567ffffffffffffffff811115612a4757612a46612596565b5b612a53858286016129b7565b9150509250929050565b600060208284031215612a7357612a72612591565b5b600082013567ffffffffffffffff811115612a9157612a90612596565b5b612a9d848285016129b7565b91505092915050565b600060208284031215612abc57612abb612591565b5b6000612aca848285016127de565b91505092915050565b60008060408385031215612aea57612ae9612591565b5b6000612af885828601612729565b9250506020612b09858286016127de565b9150509250929050565b6000819050919050565b612b2681612b13565b82525050565b6000602082019050612b416000830184612b1d565b92915050565b612b5081612620565b8114612b5b57600080fd5b50565b600081359050612b6d81612b47565b92915050565b60008060408385031215612b8a57612b89612591565b5b6000612b98858286016127de565b9250506020612ba985828601612b5e565b9150509250929050565b600080fd5b600080fd5b60008083601f840112612bd357612bd26128b0565b5b8235905067ffffffffffffffff811115612bf057612bef612bb3565b5b602083019150836001820283011115612c0c57612c0b612bb8565b5b9250929050565b600080600080600060808688031215612c2f57612c2e612591565b5b6000612c3d888289016127de565b9550506020612c4e888289016127de565b9450506040612c5f88828901612729565b935050606086013567ffffffffffffffff811115612c8057612c7f612596565b5b612c8c88828901612bbd565b92509250509295509295909350565b60008060408385031215612cb257612cb1612591565b5b6000612cc0858286016127de565b9250506020612cd1858286016127de565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680612d2257607f821691505b602082108103612d3557612d34612cdb565b5b50919050565b7f4e4f545f415554484f52495a4544000000000000000000000000000000000000600082015250565b6000612d71600e83612661565b9150612d7c82612d3b565b602082019050919050565b60006020820190508181036000830152612da081612d64565b9050919050565b7f57524f4e475f46524f4d00000000000000000000000000000000000000000000600082015250565b6000612ddd600a83612661565b9150612de882612da7565b602082019050919050565b60006020820190508181036000830152612e0c81612dd0565b9050919050565b7f494e56414c49445f524543495049454e54000000000000000000000000000000600082015250565b6000612e49601183612661565b9150612e5482612e13565b602082019050919050565b60006020820190508181036000830152612e7881612e3c565b9050919050565b7f436f757273654e46543a204e4654206973206e6f206c6f6e676572206176616960008201527f6c61626c6520666f72206d696e74000000000000000000000000000000000000602082015250565b6000612edb602e83612661565b9150612ee682612e7f565b604082019050919050565b60006020820190508181036000830152612f0a81612ece565b9050919050565b7f436f757273654e46543a204f6e6c79206f776e6572206f72206576656e74206f60008201527f776e65722063616e206d696e7400000000000000000000000000000000000000602082015250565b6000612f6d602d83612661565b9150612f7882612f11565b604082019050919050565b60006020820190508181036000830152612f9c81612f60565b9050919050565b7f436f757273654e46543a205573657220616c7265616479206d696e7465640000600082015250565b6000612fd9601e83612661565b9150612fe482612fa3565b602082019050919050565b6000602082019050818103600083015261300881612fcc565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061304982612708565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361307b5761307a61300f565b5b600182019050919050565b600082825260208201905092915050565b50565b60006130a7600083613086565b91506130b282613097565b600082019050919050565b60006080820190506130d2600083018661279d565b6130df602083018561279d565b6130ec6040830184612886565b81810360608301526130fd8161309a565b9050949350505050565b600081519050613116816125c7565b92915050565b60006020828403121561313257613131612591565b5b600061314084828501613107565b91505092915050565b7f554e534146455f524543495049454e5400000000000000000000000000000000600082015250565b600061317f601083612661565b915061318a82613149565b602082019050919050565b600060208201905081810360008301526131ae81613172565b9050919050565b7f4f6e6c792074686520746f6b656e206f776e65722063616e206275726e000000600082015250565b60006131eb601d83612661565b91506131f6826131b5565b602082019050919050565b6000602082019050818103600083015261321a816131de565b9050919050565b60006040820190506132366000830185612886565b6132436020830184612886565b9392505050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b60006132a6602e83612661565b91506132b18261324a565b604082019050919050565b600060208201905081810360008301526132d581613299565b9050919050565b6000819050919050565b600060ff82169050919050565b6000819050919050565b600061331861331361330e846132dc565b6132f3565b6132e6565b9050919050565b613328816132fd565b82525050565b6000602082019050613343600083018461331f565b92915050565b60008190508160005260206000209050919050565b6000815461336b81612d0a565b6133758186612661565b9450600182166000811461339057600181146133a6576133d9565b60ff1983168652811515602002860193506133d9565b6133af85613349565b60005b838110156133d1578154818901526001820191506020810190506133b2565b808801955050505b50505092915050565b600060408201905081810360008301526133fc81856126ad565b90508181036020830152613410818461335e565b90509392505050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026134667fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82613429565b6134708683613429565b95508019841693508086168417925050509392505050565b60006134a361349e61349984612708565b6132f3565b612708565b9050919050565b6000819050919050565b6134bd83613488565b6134d16134c9826134aa565b848454613436565b825550505050565b600090565b6134e66134d9565b6134f18184846134b4565b505050565b5b818110156135155761350a6000826134de565b6001810190506134f7565b5050565b601f82111561355a5761352b81613349565b61353484613419565b81016020851015613543578190505b61355761354f85613419565b8301826134f6565b50505b505050565b600082821c905092915050565b600061357d6000198460080261355f565b1980831691505092915050565b6000613596838361356c565b9150826002028217905092915050565b6135af82612656565b67ffffffffffffffff8111156135c8576135c76128ba565b5b6135d28254612d0a565b6135dd828285613519565b600060209050601f83116001811461361057600084156135fe578287015190505b613608858261358a565b865550613670565b601f19841661361e86613349565b60005b8281101561364657848901518255600182019150602085019450602081019050613621565b86831015613663578489015161365f601f89168261356c565b8355505b6001600288020188555050505b505050505050565b600060408201905061368d600083018561279d565b61369a602083018461279d565b9392505050565b60006136ad8385613086565b93506136ba838584612966565b6136c38361269c565b840190509392505050565b60006080820190506136e3600083018861279d565b6136f0602083018761279d565b6136fd6040830186612886565b81810360608301526137108184866136a1565b90509695505050505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000613778602683612661565b91506137838261371c565b604082019050919050565b600060208201905081810360008301526137a78161376b565b9050919050565b7f4e4f545f4d494e54454400000000000000000000000000000000000000000000600082015250565b60006137e4600a83612661565b91506137ef826137ae565b602082019050919050565b60006020820190508181036000830152613813816137d7565b9050919050565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b6000613876602b83612661565b91506138818261381a565b604082019050919050565b600060208201905081810360008301526138a581613869565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006138e2602083612661565b91506138ed826138ac565b602082019050919050565b60006020820190508181036000830152613911816138d5565b9050919050565b600081905092915050565b6000815461393081612d0a565b61393a8186613918565b94506001821660008114613955576001811461396a5761399d565b60ff198316865281151582028601935061399d565b61397385613349565b60005b8381101561399557815481890152600182019150602081019050613976565b838801955050505b50505092915050565b60006139b182612656565b6139bb8185613918565b93506139cb818560208601612672565b80840191505092915050565b60006139e38285613923565b91506139ef82846139a6565b91508190509392505050565b7f414c52454144595f4d494e544544000000000000000000000000000000000000600082015250565b6000613a31600e83612661565b9150613a3c826139fb565b602082019050919050565b60006020820190508181036000830152613a6081613a24565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000613aa182612708565b9150613aac83612708565b925082613abc57613abb613a67565b5b828204905092915050565b6000613ad282612708565b9150613add83612708565b9250828203905081811115613af557613af461300f565b5b92915050565b6000613b0682612708565b9150613b1183612708565b925082613b2157613b20613a67565b5b828206905092915050565b6000613b3782612708565b9150613b4283612708565b9250828201905080821115613b5a57613b5961300f565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fdfea2646970667358221220720728c54fe305305743e39997b242d57ae2dc2ae68a953096f7735fcb6f8f1c64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "Proof-of-Attendance NFT",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "This contract is used to mint NFTs for Proof-of-Attendance events.         Event is identified by a unique event ID. Event details are stored on server.         Token URI = Base URI + Event Id         E.g.           Token id 2 and 5 are both for event 1, then           tokenURI(2) = tokenURI(5) = \"https://api.web3edu.xyz/poa/1",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 138,
        "contract": "contracts/badge/POANFT.sol:POANFT",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 141,
        "contract": "contracts/badge/POANFT.sol:POANFT",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 752,
        "contract": "contracts/badge/POANFT.sol:POANFT",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/badge/POANFT.sol:POANFT",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 130,
        "contract": "contracts/badge/POANFT.sol:POANFT",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 321,
        "contract": "contracts/badge/POANFT.sol:POANFT",
        "label": "_paused",
        "offset": 0,
        "slot": "101",
        "type": "t_bool"
      },
      {
        "astId": 426,
        "contract": "contracts/badge/POANFT.sol:POANFT",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 1780,
        "contract": "contracts/badge/POANFT.sol:POANFT",
        "label": "name",
        "offset": 0,
        "slot": "151",
        "type": "t_string_storage"
      },
      {
        "astId": 1782,
        "contract": "contracts/badge/POANFT.sol:POANFT",
        "label": "symbol",
        "offset": 0,
        "slot": "152",
        "type": "t_string_storage"
      },
      {
        "astId": 1786,
        "contract": "contracts/badge/POANFT.sol:POANFT",
        "label": "ownerOf",
        "offset": 0,
        "slot": "153",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 1790,
        "contract": "contracts/badge/POANFT.sol:POANFT",
        "label": "balanceOf",
        "offset": 0,
        "slot": "154",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1794,
        "contract": "contracts/badge/POANFT.sol:POANFT",
        "label": "getApproved",
        "offset": 0,
        "slot": "155",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 1800,
        "contract": "contracts/badge/POANFT.sol:POANFT",
        "label": "isApprovedForAll",
        "offset": 0,
        "slot": "156",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 2324,
        "contract": "contracts/badge/POANFT.sol:POANFT",
        "label": "links",
        "offset": 0,
        "slot": "157",
        "type": "t_mapping(t_uint256,t_bytes32)"
      },
      {
        "astId": 1473,
        "contract": "contracts/badge/POANFT.sol:POANFT",
        "label": "counter",
        "offset": 0,
        "slot": "158",
        "type": "t_uint256"
      },
      {
        "astId": 1475,
        "contract": "contracts/badge/POANFT.sol:POANFT",
        "label": "baseURI",
        "offset": 0,
        "slot": "159",
        "type": "t_string_storage"
      },
      {
        "astId": 1479,
        "contract": "contracts/badge/POANFT.sol:POANFT",
        "label": "eventIds",
        "offset": 0,
        "slot": "160",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 1483,
        "contract": "contracts/badge/POANFT.sol:POANFT",
        "label": "expiryForEvents",
        "offset": 0,
        "slot": "161",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 1487,
        "contract": "contracts/badge/POANFT.sol:POANFT",
        "label": "eventOwner",
        "offset": 0,
        "slot": "162",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 1493,
        "contract": "contracts/badge/POANFT.sol:POANFT",
        "label": "userMinted",
        "offset": 0,
        "slot": "163",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}