{
  "address": "0xF7F819063F3858Db25F04FaB38DAd7D28227De11",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "oldURI",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "newURI",
          "type": "string"
        }
      ],
      "name": "BaseURIChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "courseId",
          "type": "uint256"
        }
      ],
      "name": "CourseNFTBurned",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "courseId",
          "type": "uint256"
        }
      ],
      "name": "CourseNFTMinted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "counter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "courseIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "expiryForCourses",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        }
      ],
      "name": "intialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "links",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_courseId",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_uri",
          "type": "string"
        }
      ],
      "name": "setBaseURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "userMinted",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x0c8f1ec225b99ea5acba77a4c0e08bf19446952c422653e00136f858b8e2961d",
  "receipt": {
    "to": null,
    "from": "0x53F5339C69d940242dC32D89637824459c96D67E",
    "contractAddress": "0xF7F819063F3858Db25F04FaB38DAd7D28227De11",
    "transactionIndex": 85,
    "gasUsed": "3119915",
    "logsBloom": "0x
    "blockHash": "0x9de8bbf48a0f8fb92d66d5229c5ea5f4e90ffc4224508d15ba2e644a377e22d1",
    "transactionHash": "0x0c8f1ec225b99ea5acba77a4c0e08bf19446952c422653e00136f858b8e2961d",
    "logs": [],
    "blockNumber": 15782716,
    "cumulativeGasUsed": "11831503",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "76515367593e2f9129486a2f6ae93b55",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"oldURI\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newURI\",\"type\":\"string\"}],\"name\":\"BaseURIChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"courseId\",\"type\":\"uint256\"}],\"name\":\"CourseNFTBurned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"courseId\",\"type\":\"uint256\"}],\"name\":\"CourseNFTMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"counter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"courseIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"expiryForCourses\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"intialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"links\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_courseId\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userMinted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/badge/CourseNFT.sol\":\"CourseNFT\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0-rc.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initialized`\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initializing`\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0xf2efdd01f01f127e8b631675a359cd8cabfbcdcd2e8587ecf906181bcd667bc9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0-rc.1) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xabed77589961adbaaa36817e0914bcbe4c447311c9451bf3fc9b073c1f092d8d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"contracts/badge/CourseNFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\r\\nimport \\\"../base/ERC721Upgradeable.sol\\\";\\r\\nimport \\\"../base/Linkable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\r\\n\\r\\ncontract CourseNFT is OwnableUpgradeable, ERC721Upgradeable, Linkable {\\r\\n    using Strings for uint256;\\r\\n\\r\\n    // ---------------------------------------------------------------------------------------- //\\r\\n    // ************************************* Variables **************************************** //\\r\\n    // ---------------------------------------------------------------------------------------- //\\r\\n\\r\\n    uint256 public counter;\\r\\n\\r\\n    string public baseURI;\\r\\n\\r\\n    // Token id => Course Id\\r\\n    // Course id is an index for the server to query the course\\r\\n    // After querying the correct course, the server can get the event data\\r\\n    mapping(uint256 => uint256) public courseIds;\\r\\n\\r\\n    // Expiry timestamp for a course id\\r\\n    // After this timestamp, the NFT is no longer available for mint\\r\\n    // If expiry == 0, the NFT is always available for mint\\r\\n    mapping(uint256 => uint256) public expiryForCourses;\\r\\n\\r\\n    // User address => course id => token id\\r\\n    mapping(address => mapping(uint256 => uint256)) public userMinted;\\r\\n\\r\\n    // ---------------------------------------------------------------------------------------- //\\r\\n    // *************************************** Events ***************************************** //\\r\\n    // ---------------------------------------------------------------------------------------- //\\r\\n\\r\\n    event BaseURIChanged(string oldURI, string newURI);\\r\\n\\r\\n    event CourseNFTMinted(\\r\\n        address indexed to,\\r\\n        uint256 indexed tokenId,\\r\\n        uint256 indexed courseId\\r\\n    );\\r\\n\\r\\n    event CourseNFTBurned(uint256 indexed tokenId, uint256 indexed courseId);\\r\\n\\r\\n    // ---------------------------------------------------------------------------------------- //\\r\\n    // ************************************* Constructor ************************************** //\\r\\n    // ---------------------------------------------------------------------------------------- //\\r\\n\\r\\n    function initialize(string memory _name, string memory _symbol)\\r\\n        public\\r\\n        initializer\\r\\n    {\\r\\n        __Ownable_init();\\r\\n        __ERC721_init(_name, _symbol);\\r\\n    }\\r\\n\\r\\n    // ---------------------------------------------------------------------------------------- //\\r\\n    // ************************************** Modifiers *************************************** //\\r\\n    // ---------------------------------------------------------------------------------------- //\\r\\n\\r\\n    modifier notExpired(uint256 _courseId) {\\r\\n        uint256 expiryDate = expiryForCourses[_courseId];\\r\\n        if (expiryDate != 0) {\\r\\n            require(\\r\\n                block.timestamp < expiryDate,\\r\\n                \\\"CourseNFT: NFT is no longer available for mint\\\"\\r\\n            );\\r\\n        }\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    // ---------------------------------------------------------------------------------------- //\\r\\n    // ************************************ Set Functions ************************************* //\\r\\n    // ---------------------------------------------------------------------------------------- //\\r\\n\\r\\n    function setBaseURI(string memory _uri) public onlyOwner {\\r\\n        emit BaseURIChanged(_uri, baseURI);\\r\\n        baseURI = _uri;\\r\\n    }\\r\\n\\r\\n    // ---------------------------------------------------------------------------------------- //\\r\\n    // ************************************ Main Functions ************************************ //\\r\\n    // ---------------------------------------------------------------------------------------- //\\r\\n\\r\\n    function mint(address _to, uint256 _courseId)\\r\\n        external\\r\\n        notExpired(_courseId)\\r\\n        onlyOwner\\r\\n        returns (uint256)\\r\\n    {\\r\\n        require(\\r\\n            userMinted[_to][_courseId] == 0,\\r\\n            \\\"CourseNFT: user already minted this course\\\"\\r\\n        );\\r\\n\\r\\n        uint256 tokenId = counter++;\\r\\n\\r\\n        _safeMint(_to, tokenId);\\r\\n\\r\\n        // Record this token's course Id\\r\\n        courseIds[tokenId] = _courseId;\\r\\n\\r\\n        userMinted[_to][_courseId] = tokenId;\\r\\n\\r\\n        emit CourseNFTMinted(_to, tokenId, _courseId);\\r\\n\\r\\n        return tokenId;\\r\\n    }\\r\\n\\r\\n    function burn(uint256 _tokenId) external {\\r\\n        require(\\r\\n            ownerOf[_tokenId] == msg.sender,\\r\\n            \\\"Only the token owner can burn\\\"\\r\\n        );\\r\\n\\r\\n        _burn(_tokenId);\\r\\n\\r\\n        uint256 courseId = courseIds[_tokenId];\\r\\n        delete userMinted[msg.sender][courseId];\\r\\n\\r\\n        emit CourseNFTBurned(_tokenId, courseId);\\r\\n    }\\r\\n\\r\\n    function tokenURI(uint256 _tokenId) public view returns (string memory) {\\r\\n        return _tokenURI(_tokenId);\\r\\n    }\\r\\n\\r\\n    // ---------------------------------------------------------------------------------------- //\\r\\n    // *********************************** Internal Functions ********************************* //\\r\\n    // ---------------------------------------------------------------------------------------- //\\r\\n\\r\\n    /**\\r\\n     * @notice Generate the token URI\\r\\n     *\\r\\n     *         Token URI will be stored on backend\\r\\n     *         URI = \\\"https://api.blockchainacademy.org/api/v1/nft/course/{courseId}\\\"\\r\\n     */\\r\\n    function _tokenURI(uint256 _tokenId) internal view returns (string memory) {\\r\\n        return string.concat(baseURI, courseIds[_tokenId].toString());\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x35e0b1a197ea4786ed1466fc983eeeeca23bfbc5c296519b570e1388af76d1d3\",\"license\":\"MIT\"},\"contracts/base/ERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title ERC721 Token Contract\\r\\n *\\r\\n * @notice This contract is mainly based on solmate/ERC721.sol\\r\\n *         By default, not implement IERC721Metadata\\r\\n */\\r\\nabstract contract ERC721Upgradeable is Initializable {\\r\\n    address internal constant ZERO_ADDRESS = address(0);\\r\\n\\r\\n    string public name;\\r\\n    string public symbol;\\r\\n\\r\\n    mapping(uint256 => address) public ownerOf;\\r\\n    mapping(address => uint256) public balanceOf;\\r\\n\\r\\n    mapping(uint256 => address) public getApproved;\\r\\n    mapping(address => mapping(address => bool)) public isApprovedForAll;\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\r\\n     */\\r\\n    event Transfer(\\r\\n        address indexed from,\\r\\n        address indexed to,\\r\\n        uint256 indexed tokenId\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\r\\n     */\\r\\n    event Approval(\\r\\n        address indexed owner,\\r\\n        address indexed approved,\\r\\n        uint256 indexed tokenId\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\r\\n     */\\r\\n    event ApprovalForAll(\\r\\n        address indexed owner,\\r\\n        address indexed operator,\\r\\n        bool approved\\r\\n    );\\r\\n\\r\\n    function intialize(string memory _name, string memory _symbol)\\r\\n        public\\r\\n        initializer\\r\\n    {\\r\\n        __ERC721_init(_name, _symbol);\\r\\n    }\\r\\n\\r\\n    function __ERC721_init(string memory _name, string memory _symbol)\\r\\n        internal\\r\\n        onlyInitializing\\r\\n    {\\r\\n        name = _name;\\r\\n        symbol = _symbol;\\r\\n    }\\r\\n\\r\\n    function approve(address _spender, uint256 _tokenId) public virtual {\\r\\n        address owner = ownerOf[_tokenId];\\r\\n\\r\\n        require(\\r\\n            msg.sender == owner || isApprovedForAll[owner][msg.sender],\\r\\n            \\\"NOT_AUTHORIZED\\\"\\r\\n        );\\r\\n\\r\\n        getApproved[_tokenId] = _spender;\\r\\n\\r\\n        emit Approval(owner, _spender, _tokenId);\\r\\n    }\\r\\n\\r\\n    function setApprovalForAll(address _operator, bool _approved)\\r\\n        public\\r\\n        virtual\\r\\n    {\\r\\n        isApprovedForAll[msg.sender][_operator] = _approved;\\r\\n\\r\\n        emit ApprovalForAll(msg.sender, _operator, _approved);\\r\\n    }\\r\\n\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 id\\r\\n    ) public virtual {\\r\\n        _beforeTokenTransfer(from, to, id);\\r\\n\\r\\n        require(from == ownerOf[id], \\\"WRONG_FROM\\\");\\r\\n\\r\\n        require(to != ZERO_ADDRESS, \\\"INVALID_RECIPIENT\\\");\\r\\n\\r\\n        require(\\r\\n            msg.sender == from ||\\r\\n                isApprovedForAll[from][msg.sender] ||\\r\\n                msg.sender == getApproved[id],\\r\\n            \\\"NOT_AUTHORIZED\\\"\\r\\n        );\\r\\n\\r\\n        // Underflow of the sender's balance is impossible because we check for\\r\\n        // ownership above and the recipient's balance can't realistically overflow.\\r\\n        unchecked {\\r\\n            --balanceOf[from];\\r\\n\\r\\n            ++balanceOf[to];\\r\\n        }\\r\\n\\r\\n        ownerOf[id] = to;\\r\\n\\r\\n        delete getApproved[id];\\r\\n\\r\\n        emit Transfer(from, to, id);\\r\\n\\r\\n        _afterTokenTransfer(from, to, id);\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 id\\r\\n    ) public virtual {\\r\\n        transferFrom(from, to, id);\\r\\n\\r\\n        require(\\r\\n            to.code.length == 0 ||\\r\\n                IERC721Receiver(to).onERC721Received(\\r\\n                    msg.sender,\\r\\n                    from,\\r\\n                    id,\\r\\n                    \\\"\\\"\\r\\n                ) ==\\r\\n                IERC721Receiver.onERC721Received.selector,\\r\\n            \\\"UNSAFE_RECIPIENT\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 id,\\r\\n        bytes calldata data\\r\\n    ) public virtual {\\r\\n        transferFrom(from, to, id);\\r\\n\\r\\n        require(\\r\\n            to.code.length == 0 ||\\r\\n                IERC721Receiver(to).onERC721Received(\\r\\n                    msg.sender,\\r\\n                    from,\\r\\n                    id,\\r\\n                    data\\r\\n                ) ==\\r\\n                IERC721Receiver.onERC721Received.selector,\\r\\n            \\\"UNSAFE_RECIPIENT\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function supportsInterface(bytes4 interfaceId)\\r\\n        public\\r\\n        view\\r\\n        virtual\\r\\n        returns (bool)\\r\\n    {\\r\\n        return\\r\\n            interfaceId == 0x01ffc9a7 || // ERC165 Interface ID for ERC165\\r\\n            interfaceId == 0x80ac58cd || // ERC165 Interface ID for ERC721\\r\\n            interfaceId == 0x5b5e139f; // ERC165 Interface ID for ERC721Metadata\\r\\n    }\\r\\n\\r\\n    function _mint(address to, uint256 id) internal virtual {\\r\\n        require(to != ZERO_ADDRESS, \\\"INVALID_RECIPIENT\\\");\\r\\n\\r\\n        require(ownerOf[id] == ZERO_ADDRESS, \\\"ALREADY_MINTED\\\");\\r\\n\\r\\n        // Counter overflow is incredibly unrealistic.\\r\\n        unchecked {\\r\\n            ++balanceOf[to];\\r\\n        }\\r\\n\\r\\n        ownerOf[id] = to;\\r\\n\\r\\n        emit Transfer(ZERO_ADDRESS, to, id);\\r\\n    }\\r\\n\\r\\n    function _burn(uint256 id) internal virtual {\\r\\n        address owner = ownerOf[id];\\r\\n\\r\\n        require(owner != ZERO_ADDRESS, \\\"NOT_MINTED\\\");\\r\\n\\r\\n        // Ownership check above ensures no underflow.\\r\\n        unchecked {\\r\\n            --balanceOf[owner];\\r\\n        }\\r\\n\\r\\n        delete ownerOf[id];\\r\\n\\r\\n        delete getApproved[id];\\r\\n\\r\\n        emit Transfer(owner, ZERO_ADDRESS, id);\\r\\n    }\\r\\n\\r\\n    function _safeMint(address to, uint256 id) internal virtual {\\r\\n        _mint(to, id);\\r\\n\\r\\n        require(\\r\\n            to.code.length == 0 ||\\r\\n                IERC721Receiver(to).onERC721Received(\\r\\n                    msg.sender,\\r\\n                    address(0),\\r\\n                    id,\\r\\n                    \\\"\\\"\\r\\n                ) ==\\r\\n                IERC721Receiver.onERC721Received.selector,\\r\\n            \\\"UNSAFE_RECIPIENT\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _safeMint(\\r\\n        address to,\\r\\n        uint256 id,\\r\\n        bytes memory data\\r\\n    ) internal virtual {\\r\\n        _mint(to, id);\\r\\n\\r\\n        require(\\r\\n            to.code.length == 0 ||\\r\\n                IERC721Receiver(to).onERC721Received(\\r\\n                    msg.sender,\\r\\n                    address(0),\\r\\n                    id,\\r\\n                    data\\r\\n                ) ==\\r\\n                IERC721Receiver.onERC721Received.selector,\\r\\n            \\\"UNSAFE_RECIPIENT\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _beforeTokenTransfer(\\r\\n        address _from,\\r\\n        address _to,\\r\\n        uint256 _tokenId\\r\\n    ) internal virtual {}\\r\\n\\r\\n    function _afterTokenTransfer(\\r\\n        address _from,\\r\\n        address _to,\\r\\n        uint256 _tokenId\\r\\n    ) internal virtual {}\\r\\n}\\r\\n\",\"keccak256\":\"0x8933f1844e1a551ba6dd81ecb9958427fc0c57ddec8f10f25cfa7901ebe68833\",\"license\":\"MIT\"},\"contracts/base/ILinkableSBT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\ninterface ILinkableSBT {\\r\\n    function onERC721Linked(\\r\\n        address from,\\r\\n        uint256 fromTokenId,\\r\\n        address to,\\r\\n        uint256 toTokenId\\r\\n    ) external returns (bytes4);\\r\\n}\\r\\n\",\"keccak256\":\"0xab00e82240c42de3da8c60ae4d738d4b919ca52c3ef22c3925147c921d3f367e\",\"license\":\"MIT\"},\"contracts/base/Linkable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\nimport \\\"./ILinkableSBT.sol\\\";\\r\\n\\r\\nabstract contract Linkable {\\r\\n    // Token id => Keccak256(contract, id)\\r\\n    mapping(uint256 => bytes32) public links;\\r\\n\\r\\n    /**\\r\\n     * @notice Ensure that this tokenId not already linked\\r\\n     */\\r\\n    modifier notLinked(uint256 _tokenId) {\\r\\n        require(\\r\\n            links[_tokenId] == bytes32(0),\\r\\n            \\\"Linkable: token already linked to another sbt\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Link a token to a SoulBoundToken\\r\\n     *\\r\\n     *         The target token address must be a soul-bound token\\r\\n     *         It should check the target has the interface\\r\\n     */\\r\\n    function _link(\\r\\n        address _sbt,\\r\\n        uint256 _targetTokenId,\\r\\n        uint256 _tokenId\\r\\n    ) internal virtual notLinked(_tokenId) {\\r\\n        links[_tokenId] = keccak256(abi.encodePacked(_sbt, _targetTokenId));\\r\\n\\r\\n        require(\\r\\n            _sbt.code.length != 0 &&\\r\\n                ILinkableSBT(_sbt).onERC721Linked(\\r\\n                    address(this),\\r\\n                    _tokenId,\\r\\n                    _sbt,\\r\\n                    _targetTokenId\\r\\n                ) ==\\r\\n                ILinkableSBT.onERC721Linked.selector,\\r\\n            \\\"UNSAFE_LINK\\\"\\r\\n        );\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x13f94dbc9eb792629dd214ff3f6dee7d9a17004a7c064c76a793de66daa58ce7\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506137b4806100206000396000f3fe608060405234801561001057600080fd5b50600436106101a95760003560e01c80636352211e116100f9578063a22cb46511610097578063e985e9c511610071578063e985e9c5146104de578063f105a5f11461050e578063f2fde38b1461052a578063f3801cc514610546576101a9565b8063a22cb46514610476578063b88d4fde14610492578063c87b56dd146104ae576101a9565b8063715018a6116100d3578063715018a614610400578063881d8a401461040a5780638da5cb5b1461043a57806395d89b4114610458576101a9565b80636352211e146103825780636c0360eb146103b257806370a08231146103d0576101a9565b806342842e0e116101665780634cd88b76116101405780634cd88b76146102fc57806353f23a271461031857806355f804b31461034857806361bc221a14610364576101a9565b806342842e0e1461029457806342966c68146102b0578063494e2371146102cc576101a9565b806301ffc9a7146101ae57806306fdde03146101de578063081812fc146101fc578063095ea7b31461022c57806323b872dd1461024857806340c10f1914610264575b600080fd5b6101c860048036038101906101c391906122e0565b610576565b6040516101d59190612328565b60405180910390f35b6101e6610608565b6040516101f391906123d3565b60405180910390f35b6102166004803603810190610211919061242b565b610696565b6040516102239190612499565b60405180910390f35b610246600480360381019061024191906124e0565b6106c9565b005b610262600480360381019061025d9190612520565b6108b2565b005b61027e600480360381019061027991906124e0565b610cc3565b60405161028b9190612582565b60405180910390f35b6102ae60048036038101906102a99190612520565b610ea7565b005b6102ca60048036038101906102c5919061242b565b610fdf565b005b6102e660048036038101906102e1919061242b565b611127565b6040516102f39190612582565b60405180910390f35b610316600480360381019061031191906126d2565b61113f565b005b610332600480360381019061032d91906124e0565b611289565b60405161033f9190612582565b60405180910390f35b610362600480360381019061035d919061274a565b6112ae565b005b61036c611303565b6040516103799190612582565b60405180910390f35b61039c6004803603810190610397919061242b565b611309565b6040516103a99190612499565b60405180910390f35b6103ba61133c565b6040516103c791906123d3565b60405180910390f35b6103ea60048036038101906103e59190612793565b6113ca565b6040516103f79190612582565b60405180910390f35b6104086113e2565b005b610424600480360381019061041f919061242b565b6113f6565b60405161043191906127d9565b60405180910390f35b61044261140e565b60405161044f9190612499565b60405180910390f35b610460611438565b60405161046d91906123d3565b60405180910390f35b610490600480360381019061048b9190612820565b6114c6565b005b6104ac60048036038101906104a791906128c0565b6115c3565b005b6104c860048036038101906104c3919061242b565b611701565b6040516104d591906123d3565b60405180910390f35b6104f860048036038101906104f39190612948565b611713565b6040516105059190612328565b60405180910390f35b610528600480360381019061052391906126d2565b611742565b005b610544600480360381019061053f9190612793565b611884565b005b610560600480360381019061055b919061242b565b611907565b60405161056d9190612582565b60405180910390f35b60006301ffc9a760e01b827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806105d157506380ac58cd60e01b827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806106015750635b5e139f60e01b827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b9050919050565b60658054610615906129b7565b80601f0160208091040260200160405190810160405280929190818152602001828054610641906129b7565b801561068e5780601f106106635761010080835404028352916020019161068e565b820191906000526020600020905b81548152906001019060200180831161067157829003601f168201915b505050505081565b60696020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006067600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806107c15750606a60008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b610800576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107f790612a34565b60405180910390fd5b826069600084815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550818373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a4505050565b6108bd83838361191f565b6067600082815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161461095e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161095590612aa0565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036109cd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109c490612b0c565b60405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480610a8d5750606a60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b80610af657506069600082815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b610b35576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b2c90612a34565b60405180910390fd5b606860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600081546001900391905081905550606860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000815460010191905081905550816067600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506069600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4610cbe838383611924565b505050565b6000816000606f600083815260200190815260200160002054905060008114610d2957804210610d28576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d1f90612b9e565b60405180910390fd5b5b610d31611929565b6000607060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008681526020019081526020016000205414610dc4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dbb90612c30565b60405180910390fd5b6000606c6000815480929190610dd990612c7f565b919050559050610de986826119a7565b84606e60008381526020019081526020016000208190555080607060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008781526020019081526020016000208190555084818773ffffffffffffffffffffffffffffffffffffffff167fa8963a1df737598e6f80f76f857611b54c7e6642a3af609a14d9cee52e63dd7a60405160405180910390a480935050505092915050565b610eb28383836108b2565b60008273ffffffffffffffffffffffffffffffffffffffff163b1480610f9b575063150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168273ffffffffffffffffffffffffffffffffffffffff1663150b7a023386856040518463ffffffff1660e01b8152600401610f3793929190612cfe565b6020604051808303816000875af1158015610f56573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f7a9190612d5d565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b610fda576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fd190612dd6565b60405180910390fd5b505050565b3373ffffffffffffffffffffffffffffffffffffffff166067600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611080576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161107790612e42565b60405180910390fd5b61108981611ade565b6000606e6000838152602001908152602001600020549050607060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008281526020019081526020016000206000905580827fdc8e1a3d96514a8c52ee312fbf211f9a066d5fc7375d88038516cc227f84ffc060405160405180910390a35050565b606e6020528060005260406000206000915090505481565b60008060019054906101000a900460ff161590508080156111705750600160008054906101000a900460ff1660ff16105b8061119d575061117f30611c9f565b15801561119c5750600160008054906101000a900460ff1660ff16145b5b6111dc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111d390612ed4565b60405180910390fd5b60016000806101000a81548160ff021916908360ff1602179055508015611219576001600060016101000a81548160ff0219169083151502179055505b611221611cc2565b61122b8383611d1b565b80156112845760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498600160405161127b9190612f46565b60405180910390a15b505050565b6070602052816000526040600020602052806000526040600020600091509150505481565b6112b6611929565b7fc41b7cb64e5be01af4afc2641afc861432136270f4206b7773f229b658b9669981606d6040516112e8929190612ffa565b60405180910390a180606d90816112ff91906131be565b5050565b606c5481565b60676020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b606d8054611349906129b7565b80601f0160208091040260200160405190810160405280929190818152602001828054611375906129b7565b80156113c25780601f10611397576101008083540402835291602001916113c2565b820191906000526020600020905b8154815290600101906020018083116113a557829003601f168201915b505050505081565b60686020528060005260406000206000915090505481565b6113ea611929565b6113f46000611d8e565b565b606b6020528060005260406000206000915090505481565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60668054611445906129b7565b80601f0160208091040260200160405190810160405280929190818152602001828054611471906129b7565b80156114be5780601f10611493576101008083540402835291602001916114be565b820191906000526020600020905b8154815290600101906020018083116114a157829003601f168201915b505050505081565b80606a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516115b79190612328565b60405180910390a35050565b6115ce8585856108b2565b60008473ffffffffffffffffffffffffffffffffffffffff163b14806116bb575063150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168473ffffffffffffffffffffffffffffffffffffffff1663150b7a0233888787876040518663ffffffff1660e01b81526004016116579594939291906132bd565b6020604051808303816000875af1158015611676573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061169a9190612d5d565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b6116fa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116f190612dd6565b60405180910390fd5b5050505050565b606061170c82611e54565b9050919050565b606a6020528160005260406000206020528060005260406000206000915091509054906101000a900460ff1681565b60008060019054906101000a900460ff161590508080156117735750600160008054906101000a900460ff1660ff16105b806117a0575061178230611c9f565b15801561179f5750600160008054906101000a900460ff1660ff16145b5b6117df576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117d690612ed4565b60405180910390fd5b60016000806101000a81548160ff021916908360ff160217905550801561181c576001600060016101000a81548160ff0219169083151502179055505b6118268383611d1b565b801561187f5760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249860016040516118769190612f46565b60405180910390a15b505050565b61188c611929565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036118fb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118f29061337d565b60405180910390fd5b61190481611d8e565b50565b606f6020528060005260406000206000915090505481565b505050565b505050565b611931611e9b565b73ffffffffffffffffffffffffffffffffffffffff1661194f61140e565b73ffffffffffffffffffffffffffffffffffffffff16146119a5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161199c906133e9565b60405180910390fd5b565b6119b18282611ea3565b60008273ffffffffffffffffffffffffffffffffffffffff163b1480611a9b575063150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168273ffffffffffffffffffffffffffffffffffffffff1663150b7a02336000856040518463ffffffff1660e01b8152600401611a3793929190612cfe565b6020604051808303816000875af1158015611a56573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a7a9190612d5d565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b611ada576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ad190612dd6565b60405180910390fd5b5050565b60006067600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611b85576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b7c90613455565b60405180910390fd5b606860008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000815460019003919050819055506067600083815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556069600083815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905581600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600060019054906101000a900460ff16611d11576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d08906134e7565b60405180910390fd5b611d196120b3565b565b600060019054906101000a900460ff16611d6a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d61906134e7565b60405180910390fd5b8160659081611d7991906131be565b508060669081611d8991906131be565b505050565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6060606d611e74606e600085815260200190815260200160002054612114565b604051602001611e859291906135c6565b6040516020818303038152906040529050919050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611f12576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f0990612b0c565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff166067600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611fb4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fab90613636565b60405180910390fd5b606860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000815460010191905081905550816067600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050565b600060019054906101000a900460ff16612102576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120f9906134e7565b60405180910390fd5b61211261210d611e9b565b611d8e565b565b60606000820361215b576040518060400160405280600181526020017f3000000000000000000000000000000000000000000000000000000000000000815250905061226f565b600082905060005b6000821461218d57808061217690612c7f565b915050600a826121869190613685565b9150612163565b60008167ffffffffffffffff8111156121a9576121a86125a7565b5b6040519080825280601f01601f1916602001820160405280156121db5781602001600182028036833780820191505090505b5090505b60008514612268576001826121f491906136b6565b9150600a8561220391906136ea565b603061220f919061371b565b60f81b8183815181106122255761222461374f565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a856122619190613685565b94506121df565b8093505050505b919050565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6122bd81612288565b81146122c857600080fd5b50565b6000813590506122da816122b4565b92915050565b6000602082840312156122f6576122f561227e565b5b6000612304848285016122cb565b91505092915050565b60008115159050919050565b6123228161230d565b82525050565b600060208201905061233d6000830184612319565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561237d578082015181840152602081019050612362565b60008484015250505050565b6000601f19601f8301169050919050565b60006123a582612343565b6123af818561234e565b93506123bf81856020860161235f565b6123c881612389565b840191505092915050565b600060208201905081810360008301526123ed818461239a565b905092915050565b6000819050919050565b612408816123f5565b811461241357600080fd5b50565b600081359050612425816123ff565b92915050565b6000602082840312156124415761244061227e565b5b600061244f84828501612416565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061248382612458565b9050919050565b61249381612478565b82525050565b60006020820190506124ae600083018461248a565b92915050565b6124bd81612478565b81146124c857600080fd5b50565b6000813590506124da816124b4565b92915050565b600080604083850312156124f7576124f661227e565b5b6000612505858286016124cb565b925050602061251685828601612416565b9150509250929050565b6000806000606084860312156125395761253861227e565b5b6000612547868287016124cb565b9350506020612558868287016124cb565b925050604061256986828701612416565b9150509250925092565b61257c816123f5565b82525050565b60006020820190506125976000830184612573565b92915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6125df82612389565b810181811067ffffffffffffffff821117156125fe576125fd6125a7565b5b80604052505050565b6000612611612274565b905061261d82826125d6565b919050565b600067ffffffffffffffff82111561263d5761263c6125a7565b5b61264682612389565b9050602081019050919050565b82818337600083830152505050565b600061267561267084612622565b612607565b905082815260208101848484011115612691576126906125a2565b5b61269c848285612653565b509392505050565b600082601f8301126126b9576126b861259d565b5b81356126c9848260208601612662565b91505092915050565b600080604083850312156126e9576126e861227e565b5b600083013567ffffffffffffffff81111561270757612706612283565b5b612713858286016126a4565b925050602083013567ffffffffffffffff81111561273457612733612283565b5b612740858286016126a4565b9150509250929050565b6000602082840312156127605761275f61227e565b5b600082013567ffffffffffffffff81111561277e5761277d612283565b5b61278a848285016126a4565b91505092915050565b6000602082840312156127a9576127a861227e565b5b60006127b7848285016124cb565b91505092915050565b6000819050919050565b6127d3816127c0565b82525050565b60006020820190506127ee60008301846127ca565b92915050565b6127fd8161230d565b811461280857600080fd5b50565b60008135905061281a816127f4565b92915050565b600080604083850312156128375761283661227e565b5b6000612845858286016124cb565b92505060206128568582860161280b565b9150509250929050565b600080fd5b600080fd5b60008083601f8401126128805761287f61259d565b5b8235905067ffffffffffffffff81111561289d5761289c612860565b5b6020830191508360018202830111156128b9576128b8612865565b5b9250929050565b6000806000806000608086880312156128dc576128db61227e565b5b60006128ea888289016124cb565b95505060206128fb888289016124cb565b945050604061290c88828901612416565b935050606086013567ffffffffffffffff81111561292d5761292c612283565b5b6129398882890161286a565b92509250509295509295909350565b6000806040838503121561295f5761295e61227e565b5b600061296d858286016124cb565b925050602061297e858286016124cb565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806129cf57607f821691505b6020821081036129e2576129e1612988565b5b50919050565b7f4e4f545f415554484f52495a4544000000000000000000000000000000000000600082015250565b6000612a1e600e8361234e565b9150612a29826129e8565b602082019050919050565b60006020820190508181036000830152612a4d81612a11565b9050919050565b7f57524f4e475f46524f4d00000000000000000000000000000000000000000000600082015250565b6000612a8a600a8361234e565b9150612a9582612a54565b602082019050919050565b60006020820190508181036000830152612ab981612a7d565b9050919050565b7f494e56414c49445f524543495049454e54000000000000000000000000000000600082015250565b6000612af660118361234e565b9150612b0182612ac0565b602082019050919050565b60006020820190508181036000830152612b2581612ae9565b9050919050565b7f436f757273654e46543a204e4654206973206e6f206c6f6e676572206176616960008201527f6c61626c6520666f72206d696e74000000000000000000000000000000000000602082015250565b6000612b88602e8361234e565b9150612b9382612b2c565b604082019050919050565b60006020820190508181036000830152612bb781612b7b565b9050919050565b7f436f757273654e46543a207573657220616c7265616479206d696e746564207460008201527f68697320636f7572736500000000000000000000000000000000000000000000602082015250565b6000612c1a602a8361234e565b9150612c2582612bbe565b604082019050919050565b60006020820190508181036000830152612c4981612c0d565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612c8a826123f5565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203612cbc57612cbb612c50565b5b600182019050919050565b600082825260208201905092915050565b50565b6000612ce8600083612cc7565b9150612cf382612cd8565b600082019050919050565b6000608082019050612d13600083018661248a565b612d20602083018561248a565b612d2d6040830184612573565b8181036060830152612d3e81612cdb565b9050949350505050565b600081519050612d57816122b4565b92915050565b600060208284031215612d7357612d7261227e565b5b6000612d8184828501612d48565b91505092915050565b7f554e534146455f524543495049454e5400000000000000000000000000000000600082015250565b6000612dc060108361234e565b9150612dcb82612d8a565b602082019050919050565b60006020820190508181036000830152612def81612db3565b9050919050565b7f4f6e6c792074686520746f6b656e206f776e65722063616e206275726e000000600082015250565b6000612e2c601d8361234e565b9150612e3782612df6565b602082019050919050565b60006020820190508181036000830152612e5b81612e1f565b9050919050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b6000612ebe602e8361234e565b9150612ec982612e62565b604082019050919050565b60006020820190508181036000830152612eed81612eb1565b9050919050565b6000819050919050565b600060ff82169050919050565b6000819050919050565b6000612f30612f2b612f2684612ef4565b612f0b565b612efe565b9050919050565b612f4081612f15565b82525050565b6000602082019050612f5b6000830184612f37565b92915050565b60008190508160005260206000209050919050565b60008154612f83816129b7565b612f8d818661234e565b94506001821660008114612fa85760018114612fbe57612ff1565b60ff198316865281151560200286019350612ff1565b612fc785612f61565b60005b83811015612fe957815481890152600182019150602081019050612fca565b808801955050505b50505092915050565b60006040820190508181036000830152613014818561239a565b905081810360208301526130288184612f76565b90509392505050565b60006020601f8301049050919050565b600082821b905092915050565b60006008830261307e7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82613041565b6130888683613041565b95508019841693508086168417925050509392505050565b60006130bb6130b66130b1846123f5565b612f0b565b6123f5565b9050919050565b6000819050919050565b6130d5836130a0565b6130e96130e1826130c2565b84845461304e565b825550505050565b600090565b6130fe6130f1565b6131098184846130cc565b505050565b5b8181101561312d576131226000826130f6565b60018101905061310f565b5050565b601f8211156131725761314381612f61565b61314c84613031565b8101602085101561315b578190505b61316f61316785613031565b83018261310e565b50505b505050565b600082821c905092915050565b600061319560001984600802613177565b1980831691505092915050565b60006131ae8383613184565b9150826002028217905092915050565b6131c782612343565b67ffffffffffffffff8111156131e0576131df6125a7565b5b6131ea82546129b7565b6131f5828285613131565b600060209050601f8311600181146132285760008415613216578287015190505b61322085826131a2565b865550613288565b601f19841661323686612f61565b60005b8281101561325e57848901518255600182019150602085019450602081019050613239565b8683101561327b5784890151613277601f891682613184565b8355505b6001600288020188555050505b505050505050565b600061329c8385612cc7565b93506132a9838584612653565b6132b283612389565b840190509392505050565b60006080820190506132d2600083018861248a565b6132df602083018761248a565b6132ec6040830186612573565b81810360608301526132ff818486613290565b90509695505050505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b600061336760268361234e565b91506133728261330b565b604082019050919050565b600060208201905081810360008301526133968161335a565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006133d360208361234e565b91506133de8261339d565b602082019050919050565b60006020820190508181036000830152613402816133c6565b9050919050565b7f4e4f545f4d494e54454400000000000000000000000000000000000000000000600082015250565b600061343f600a8361234e565b915061344a82613409565b602082019050919050565b6000602082019050818103600083015261346e81613432565b9050919050565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b60006134d1602b8361234e565b91506134dc82613475565b604082019050919050565b60006020820190508181036000830152613500816134c4565b9050919050565b600081905092915050565b6000815461351f816129b7565b6135298186613507565b9450600182166000811461354457600181146135595761358c565b60ff198316865281151582028601935061358c565b61356285612f61565b60005b8381101561358457815481890152600182019150602081019050613565565b838801955050505b50505092915050565b60006135a082612343565b6135aa8185613507565b93506135ba81856020860161235f565b80840191505092915050565b60006135d28285613512565b91506135de8284613595565b91508190509392505050565b7f414c52454144595f4d494e544544000000000000000000000000000000000000600082015250565b6000613620600e8361234e565b915061362b826135ea565b602082019050919050565b6000602082019050818103600083015261364f81613613565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000613690826123f5565b915061369b836123f5565b9250826136ab576136aa613656565b5b828204905092915050565b60006136c1826123f5565b91506136cc836123f5565b92508282039050818111156136e4576136e3612c50565b5b92915050565b60006136f5826123f5565b9150613700836123f5565b9250826137105761370f613656565b5b828206905092915050565b6000613726826123f5565b9150613731836123f5565b925082820190508082111561374957613748612c50565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fdfea2646970667358221220223d90564f836ef6b6ecc24074c34f75eef3c63b60364e0756aa4393a3a77ddc64736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101a95760003560e01c80636352211e116100f9578063a22cb46511610097578063e985e9c511610071578063e985e9c5146104de578063f105a5f11461050e578063f2fde38b1461052a578063f3801cc514610546576101a9565b8063a22cb46514610476578063b88d4fde14610492578063c87b56dd146104ae576101a9565b8063715018a6116100d3578063715018a614610400578063881d8a401461040a5780638da5cb5b1461043a57806395d89b4114610458576101a9565b80636352211e146103825780636c0360eb146103b257806370a08231146103d0576101a9565b806342842e0e116101665780634cd88b76116101405780634cd88b76146102fc57806353f23a271461031857806355f804b31461034857806361bc221a14610364576101a9565b806342842e0e1461029457806342966c68146102b0578063494e2371146102cc576101a9565b806301ffc9a7146101ae57806306fdde03146101de578063081812fc146101fc578063095ea7b31461022c57806323b872dd1461024857806340c10f1914610264575b600080fd5b6101c860048036038101906101c391906122e0565b610576565b6040516101d59190612328565b60405180910390f35b6101e6610608565b6040516101f391906123d3565b60405180910390f35b6102166004803603810190610211919061242b565b610696565b6040516102239190612499565b60405180910390f35b610246600480360381019061024191906124e0565b6106c9565b005b610262600480360381019061025d9190612520565b6108b2565b005b61027e600480360381019061027991906124e0565b610cc3565b60405161028b9190612582565b60405180910390f35b6102ae60048036038101906102a99190612520565b610ea7565b005b6102ca60048036038101906102c5919061242b565b610fdf565b005b6102e660048036038101906102e1919061242b565b611127565b6040516102f39190612582565b60405180910390f35b610316600480360381019061031191906126d2565b61113f565b005b610332600480360381019061032d91906124e0565b611289565b60405161033f9190612582565b60405180910390f35b610362600480360381019061035d919061274a565b6112ae565b005b61036c611303565b6040516103799190612582565b60405180910390f35b61039c6004803603810190610397919061242b565b611309565b6040516103a99190612499565b60405180910390f35b6103ba61133c565b6040516103c791906123d3565b60405180910390f35b6103ea60048036038101906103e59190612793565b6113ca565b6040516103f79190612582565b60405180910390f35b6104086113e2565b005b610424600480360381019061041f919061242b565b6113f6565b60405161043191906127d9565b60405180910390f35b61044261140e565b60405161044f9190612499565b60405180910390f35b610460611438565b60405161046d91906123d3565b60405180910390f35b610490600480360381019061048b9190612820565b6114c6565b005b6104ac60048036038101906104a791906128c0565b6115c3565b005b6104c860048036038101906104c3919061242b565b611701565b6040516104d591906123d3565b60405180910390f35b6104f860048036038101906104f39190612948565b611713565b6040516105059190612328565b60405180910390f35b610528600480360381019061052391906126d2565b611742565b005b610544600480360381019061053f9190612793565b611884565b005b610560600480360381019061055b919061242b565b611907565b60405161056d9190612582565b60405180910390f35b60006301ffc9a760e01b827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806105d157506380ac58cd60e01b827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806106015750635b5e139f60e01b827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b9050919050565b60658054610615906129b7565b80601f0160208091040260200160405190810160405280929190818152602001828054610641906129b7565b801561068e5780601f106106635761010080835404028352916020019161068e565b820191906000526020600020905b81548152906001019060200180831161067157829003601f168201915b505050505081565b60696020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006067600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806107c15750606a60008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b610800576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107f790612a34565b60405180910390fd5b826069600084815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550818373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a4505050565b6108bd83838361191f565b6067600082815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161461095e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161095590612aa0565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036109cd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109c490612b0c565b60405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480610a8d5750606a60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b80610af657506069600082815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b610b35576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b2c90612a34565b60405180910390fd5b606860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600081546001900391905081905550606860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000815460010191905081905550816067600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506069600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4610cbe838383611924565b505050565b6000816000606f600083815260200190815260200160002054905060008114610d2957804210610d28576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d1f90612b9e565b60405180910390fd5b5b610d31611929565b6000607060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008681526020019081526020016000205414610dc4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dbb90612c30565b60405180910390fd5b6000606c6000815480929190610dd990612c7f565b919050559050610de986826119a7565b84606e60008381526020019081526020016000208190555080607060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008781526020019081526020016000208190555084818773ffffffffffffffffffffffffffffffffffffffff167fa8963a1df737598e6f80f76f857611b54c7e6642a3af609a14d9cee52e63dd7a60405160405180910390a480935050505092915050565b610eb28383836108b2565b60008273ffffffffffffffffffffffffffffffffffffffff163b1480610f9b575063150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168273ffffffffffffffffffffffffffffffffffffffff1663150b7a023386856040518463ffffffff1660e01b8152600401610f3793929190612cfe565b6020604051808303816000875af1158015610f56573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f7a9190612d5d565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b610fda576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fd190612dd6565b60405180910390fd5b505050565b3373ffffffffffffffffffffffffffffffffffffffff166067600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611080576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161107790612e42565b60405180910390fd5b61108981611ade565b6000606e6000838152602001908152602001600020549050607060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008281526020019081526020016000206000905580827fdc8e1a3d96514a8c52ee312fbf211f9a066d5fc7375d88038516cc227f84ffc060405160405180910390a35050565b606e6020528060005260406000206000915090505481565b60008060019054906101000a900460ff161590508080156111705750600160008054906101000a900460ff1660ff16105b8061119d575061117f30611c9f565b15801561119c5750600160008054906101000a900460ff1660ff16145b5b6111dc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111d390612ed4565b60405180910390fd5b60016000806101000a81548160ff021916908360ff1602179055508015611219576001600060016101000a81548160ff0219169083151502179055505b611221611cc2565b61122b8383611d1b565b80156112845760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498600160405161127b9190612f46565b60405180910390a15b505050565b6070602052816000526040600020602052806000526040600020600091509150505481565b6112b6611929565b7fc41b7cb64e5be01af4afc2641afc861432136270f4206b7773f229b658b9669981606d6040516112e8929190612ffa565b60405180910390a180606d90816112ff91906131be565b5050565b606c5481565b60676020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b606d8054611349906129b7565b80601f0160208091040260200160405190810160405280929190818152602001828054611375906129b7565b80156113c25780601f10611397576101008083540402835291602001916113c2565b820191906000526020600020905b8154815290600101906020018083116113a557829003601f168201915b505050505081565b60686020528060005260406000206000915090505481565b6113ea611929565b6113f46000611d8e565b565b606b6020528060005260406000206000915090505481565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60668054611445906129b7565b80601f0160208091040260200160405190810160405280929190818152602001828054611471906129b7565b80156114be5780601f10611493576101008083540402835291602001916114be565b820191906000526020600020905b8154815290600101906020018083116114a157829003601f168201915b505050505081565b80606a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516115b79190612328565b60405180910390a35050565b6115ce8585856108b2565b60008473ffffffffffffffffffffffffffffffffffffffff163b14806116bb575063150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168473ffffffffffffffffffffffffffffffffffffffff1663150b7a0233888787876040518663ffffffff1660e01b81526004016116579594939291906132bd565b6020604051808303816000875af1158015611676573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061169a9190612d5d565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b6116fa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116f190612dd6565b60405180910390fd5b5050505050565b606061170c82611e54565b9050919050565b606a6020528160005260406000206020528060005260406000206000915091509054906101000a900460ff1681565b60008060019054906101000a900460ff161590508080156117735750600160008054906101000a900460ff1660ff16105b806117a0575061178230611c9f565b15801561179f5750600160008054906101000a900460ff1660ff16145b5b6117df576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117d690612ed4565b60405180910390fd5b60016000806101000a81548160ff021916908360ff160217905550801561181c576001600060016101000a81548160ff0219169083151502179055505b6118268383611d1b565b801561187f5760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249860016040516118769190612f46565b60405180910390a15b505050565b61188c611929565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036118fb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118f29061337d565b60405180910390fd5b61190481611d8e565b50565b606f6020528060005260406000206000915090505481565b505050565b505050565b611931611e9b565b73ffffffffffffffffffffffffffffffffffffffff1661194f61140e565b73ffffffffffffffffffffffffffffffffffffffff16146119a5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161199c906133e9565b60405180910390fd5b565b6119b18282611ea3565b60008273ffffffffffffffffffffffffffffffffffffffff163b1480611a9b575063150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168273ffffffffffffffffffffffffffffffffffffffff1663150b7a02336000856040518463ffffffff1660e01b8152600401611a3793929190612cfe565b6020604051808303816000875af1158015611a56573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a7a9190612d5d565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b611ada576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ad190612dd6565b60405180910390fd5b5050565b60006067600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611b85576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b7c90613455565b60405180910390fd5b606860008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000815460019003919050819055506067600083815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556069600083815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905581600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600060019054906101000a900460ff16611d11576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d08906134e7565b60405180910390fd5b611d196120b3565b565b600060019054906101000a900460ff16611d6a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d61906134e7565b60405180910390fd5b8160659081611d7991906131be565b508060669081611d8991906131be565b505050565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6060606d611e74606e600085815260200190815260200160002054612114565b604051602001611e859291906135c6565b6040516020818303038152906040529050919050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611f12576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f0990612b0c565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff166067600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611fb4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fab90613636565b60405180910390fd5b606860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000815460010191905081905550816067600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050565b600060019054906101000a900460ff16612102576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120f9906134e7565b60405180910390fd5b61211261210d611e9b565b611d8e565b565b60606000820361215b576040518060400160405280600181526020017f3000000000000000000000000000000000000000000000000000000000000000815250905061226f565b600082905060005b6000821461218d57808061217690612c7f565b915050600a826121869190613685565b9150612163565b60008167ffffffffffffffff8111156121a9576121a86125a7565b5b6040519080825280601f01601f1916602001820160405280156121db5781602001600182028036833780820191505090505b5090505b60008514612268576001826121f491906136b6565b9150600a8561220391906136ea565b603061220f919061371b565b60f81b8183815181106122255761222461374f565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a856122619190613685565b94506121df565b8093505050505b919050565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6122bd81612288565b81146122c857600080fd5b50565b6000813590506122da816122b4565b92915050565b6000602082840312156122f6576122f561227e565b5b6000612304848285016122cb565b91505092915050565b60008115159050919050565b6123228161230d565b82525050565b600060208201905061233d6000830184612319565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561237d578082015181840152602081019050612362565b60008484015250505050565b6000601f19601f8301169050919050565b60006123a582612343565b6123af818561234e565b93506123bf81856020860161235f565b6123c881612389565b840191505092915050565b600060208201905081810360008301526123ed818461239a565b905092915050565b6000819050919050565b612408816123f5565b811461241357600080fd5b50565b600081359050612425816123ff565b92915050565b6000602082840312156124415761244061227e565b5b600061244f84828501612416565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061248382612458565b9050919050565b61249381612478565b82525050565b60006020820190506124ae600083018461248a565b92915050565b6124bd81612478565b81146124c857600080fd5b50565b6000813590506124da816124b4565b92915050565b600080604083850312156124f7576124f661227e565b5b6000612505858286016124cb565b925050602061251685828601612416565b9150509250929050565b6000806000606084860312156125395761253861227e565b5b6000612547868287016124cb565b9350506020612558868287016124cb565b925050604061256986828701612416565b9150509250925092565b61257c816123f5565b82525050565b60006020820190506125976000830184612573565b92915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6125df82612389565b810181811067ffffffffffffffff821117156125fe576125fd6125a7565b5b80604052505050565b6000612611612274565b905061261d82826125d6565b919050565b600067ffffffffffffffff82111561263d5761263c6125a7565b5b61264682612389565b9050602081019050919050565b82818337600083830152505050565b600061267561267084612622565b612607565b905082815260208101848484011115612691576126906125a2565b5b61269c848285612653565b509392505050565b600082601f8301126126b9576126b861259d565b5b81356126c9848260208601612662565b91505092915050565b600080604083850312156126e9576126e861227e565b5b600083013567ffffffffffffffff81111561270757612706612283565b5b612713858286016126a4565b925050602083013567ffffffffffffffff81111561273457612733612283565b5b612740858286016126a4565b9150509250929050565b6000602082840312156127605761275f61227e565b5b600082013567ffffffffffffffff81111561277e5761277d612283565b5b61278a848285016126a4565b91505092915050565b6000602082840312156127a9576127a861227e565b5b60006127b7848285016124cb565b91505092915050565b6000819050919050565b6127d3816127c0565b82525050565b60006020820190506127ee60008301846127ca565b92915050565b6127fd8161230d565b811461280857600080fd5b50565b60008135905061281a816127f4565b92915050565b600080604083850312156128375761283661227e565b5b6000612845858286016124cb565b92505060206128568582860161280b565b9150509250929050565b600080fd5b600080fd5b60008083601f8401126128805761287f61259d565b5b8235905067ffffffffffffffff81111561289d5761289c612860565b5b6020830191508360018202830111156128b9576128b8612865565b5b9250929050565b6000806000806000608086880312156128dc576128db61227e565b5b60006128ea888289016124cb565b95505060206128fb888289016124cb565b945050604061290c88828901612416565b935050606086013567ffffffffffffffff81111561292d5761292c612283565b5b6129398882890161286a565b92509250509295509295909350565b6000806040838503121561295f5761295e61227e565b5b600061296d858286016124cb565b925050602061297e858286016124cb565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806129cf57607f821691505b6020821081036129e2576129e1612988565b5b50919050565b7f4e4f545f415554484f52495a4544000000000000000000000000000000000000600082015250565b6000612a1e600e8361234e565b9150612a29826129e8565b602082019050919050565b60006020820190508181036000830152612a4d81612a11565b9050919050565b7f57524f4e475f46524f4d00000000000000000000000000000000000000000000600082015250565b6000612a8a600a8361234e565b9150612a9582612a54565b602082019050919050565b60006020820190508181036000830152612ab981612a7d565b9050919050565b7f494e56414c49445f524543495049454e54000000000000000000000000000000600082015250565b6000612af660118361234e565b9150612b0182612ac0565b602082019050919050565b60006020820190508181036000830152612b2581612ae9565b9050919050565b7f436f757273654e46543a204e4654206973206e6f206c6f6e676572206176616960008201527f6c61626c6520666f72206d696e74000000000000000000000000000000000000602082015250565b6000612b88602e8361234e565b9150612b9382612b2c565b604082019050919050565b60006020820190508181036000830152612bb781612b7b565b9050919050565b7f436f757273654e46543a207573657220616c7265616479206d696e746564207460008201527f68697320636f7572736500000000000000000000000000000000000000000000602082015250565b6000612c1a602a8361234e565b9150612c2582612bbe565b604082019050919050565b60006020820190508181036000830152612c4981612c0d565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612c8a826123f5565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203612cbc57612cbb612c50565b5b600182019050919050565b600082825260208201905092915050565b50565b6000612ce8600083612cc7565b9150612cf382612cd8565b600082019050919050565b6000608082019050612d13600083018661248a565b612d20602083018561248a565b612d2d6040830184612573565b8181036060830152612d3e81612cdb565b9050949350505050565b600081519050612d57816122b4565b92915050565b600060208284031215612d7357612d7261227e565b5b6000612d8184828501612d48565b91505092915050565b7f554e534146455f524543495049454e5400000000000000000000000000000000600082015250565b6000612dc060108361234e565b9150612dcb82612d8a565b602082019050919050565b60006020820190508181036000830152612def81612db3565b9050919050565b7f4f6e6c792074686520746f6b656e206f776e65722063616e206275726e000000600082015250565b6000612e2c601d8361234e565b9150612e3782612df6565b602082019050919050565b60006020820190508181036000830152612e5b81612e1f565b9050919050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b6000612ebe602e8361234e565b9150612ec982612e62565b604082019050919050565b60006020820190508181036000830152612eed81612eb1565b9050919050565b6000819050919050565b600060ff82169050919050565b6000819050919050565b6000612f30612f2b612f2684612ef4565b612f0b565b612efe565b9050919050565b612f4081612f15565b82525050565b6000602082019050612f5b6000830184612f37565b92915050565b60008190508160005260206000209050919050565b60008154612f83816129b7565b612f8d818661234e565b94506001821660008114612fa85760018114612fbe57612ff1565b60ff198316865281151560200286019350612ff1565b612fc785612f61565b60005b83811015612fe957815481890152600182019150602081019050612fca565b808801955050505b50505092915050565b60006040820190508181036000830152613014818561239a565b905081810360208301526130288184612f76565b90509392505050565b60006020601f8301049050919050565b600082821b905092915050565b60006008830261307e7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82613041565b6130888683613041565b95508019841693508086168417925050509392505050565b60006130bb6130b66130b1846123f5565b612f0b565b6123f5565b9050919050565b6000819050919050565b6130d5836130a0565b6130e96130e1826130c2565b84845461304e565b825550505050565b600090565b6130fe6130f1565b6131098184846130cc565b505050565b5b8181101561312d576131226000826130f6565b60018101905061310f565b5050565b601f8211156131725761314381612f61565b61314c84613031565b8101602085101561315b578190505b61316f61316785613031565b83018261310e565b50505b505050565b600082821c905092915050565b600061319560001984600802613177565b1980831691505092915050565b60006131ae8383613184565b9150826002028217905092915050565b6131c782612343565b67ffffffffffffffff8111156131e0576131df6125a7565b5b6131ea82546129b7565b6131f5828285613131565b600060209050601f8311600181146132285760008415613216578287015190505b61322085826131a2565b865550613288565b601f19841661323686612f61565b60005b8281101561325e57848901518255600182019150602085019450602081019050613239565b8683101561327b5784890151613277601f891682613184565b8355505b6001600288020188555050505b505050505050565b600061329c8385612cc7565b93506132a9838584612653565b6132b283612389565b840190509392505050565b60006080820190506132d2600083018861248a565b6132df602083018761248a565b6132ec6040830186612573565b81810360608301526132ff818486613290565b90509695505050505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b600061336760268361234e565b91506133728261330b565b604082019050919050565b600060208201905081810360008301526133968161335a565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006133d360208361234e565b91506133de8261339d565b602082019050919050565b60006020820190508181036000830152613402816133c6565b9050919050565b7f4e4f545f4d494e54454400000000000000000000000000000000000000000000600082015250565b600061343f600a8361234e565b915061344a82613409565b602082019050919050565b6000602082019050818103600083015261346e81613432565b9050919050565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b60006134d1602b8361234e565b91506134dc82613475565b604082019050919050565b60006020820190508181036000830152613500816134c4565b9050919050565b600081905092915050565b6000815461351f816129b7565b6135298186613507565b9450600182166000811461354457600181146135595761358c565b60ff198316865281151582028601935061358c565b61356285612f61565b60005b8381101561358457815481890152600182019150602081019050613565565b838801955050505b50505092915050565b60006135a082612343565b6135aa8185613507565b93506135ba81856020860161235f565b80840191505092915050565b60006135d28285613512565b91506135de8284613595565b91508190509392505050565b7f414c52454144595f4d494e544544000000000000000000000000000000000000600082015250565b6000613620600e8361234e565b915061362b826135ea565b602082019050919050565b6000602082019050818103600083015261364f81613613565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000613690826123f5565b915061369b836123f5565b9250826136ab576136aa613656565b5b828204905092915050565b60006136c1826123f5565b91506136cc836123f5565b92508282039050818111156136e4576136e3612c50565b5b92915050565b60006136f5826123f5565b9150613700836123f5565b9250826137105761370f613656565b5b828206905092915050565b6000613726826123f5565b9150613731836123f5565b925082820190508082111561374957613748612c50565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fdfea2646970667358221220223d90564f836ef6b6ecc24074c34f75eef3c63b60364e0756aa4393a3a77ddc64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 138,
        "contract": "contracts/badge/CourseNFT.sol:CourseNFT",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 141,
        "contract": "contracts/badge/CourseNFT.sol:CourseNFT",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 752,
        "contract": "contracts/badge/CourseNFT.sol:CourseNFT",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/badge/CourseNFT.sol:CourseNFT",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 130,
        "contract": "contracts/badge/CourseNFT.sol:CourseNFT",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 1780,
        "contract": "contracts/badge/CourseNFT.sol:CourseNFT",
        "label": "name",
        "offset": 0,
        "slot": "101",
        "type": "t_string_storage"
      },
      {
        "astId": 1782,
        "contract": "contracts/badge/CourseNFT.sol:CourseNFT",
        "label": "symbol",
        "offset": 0,
        "slot": "102",
        "type": "t_string_storage"
      },
      {
        "astId": 1786,
        "contract": "contracts/badge/CourseNFT.sol:CourseNFT",
        "label": "ownerOf",
        "offset": 0,
        "slot": "103",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 1790,
        "contract": "contracts/badge/CourseNFT.sol:CourseNFT",
        "label": "balanceOf",
        "offset": 0,
        "slot": "104",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1794,
        "contract": "contracts/badge/CourseNFT.sol:CourseNFT",
        "label": "getApproved",
        "offset": 0,
        "slot": "105",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 1800,
        "contract": "contracts/badge/CourseNFT.sol:CourseNFT",
        "label": "isApprovedForAll",
        "offset": 0,
        "slot": "106",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 2324,
        "contract": "contracts/badge/CourseNFT.sol:CourseNFT",
        "label": "links",
        "offset": 0,
        "slot": "107",
        "type": "t_mapping(t_uint256,t_bytes32)"
      },
      {
        "astId": 1226,
        "contract": "contracts/badge/CourseNFT.sol:CourseNFT",
        "label": "counter",
        "offset": 0,
        "slot": "108",
        "type": "t_uint256"
      },
      {
        "astId": 1228,
        "contract": "contracts/badge/CourseNFT.sol:CourseNFT",
        "label": "baseURI",
        "offset": 0,
        "slot": "109",
        "type": "t_string_storage"
      },
      {
        "astId": 1232,
        "contract": "contracts/badge/CourseNFT.sol:CourseNFT",
        "label": "courseIds",
        "offset": 0,
        "slot": "110",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 1236,
        "contract": "contracts/badge/CourseNFT.sol:CourseNFT",
        "label": "expiryForCourses",
        "offset": 0,
        "slot": "111",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 1242,
        "contract": "contracts/badge/CourseNFT.sol:CourseNFT",
        "label": "userMinted",
        "offset": 0,
        "slot": "112",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}